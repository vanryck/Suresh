
--  FIRST GRAB ALL ACTIVE PRODUCTS
--  USING ACTIVE GROUP, PDPD, CSPI\CSPB

DROP TABLE IF EXISTS ##ACTIVE_PDPDS

SELECT DISTINCT  PDPD.PDPD_ID, PDDS.PDDS_DESC, CSPI.CSPD_CAT, PDDS.PDDS_MCTR_BCAT, PDPD.LOBD_ID, PDDS.PDDS_PROD_TYPE, 
                 PDBC_SPTC.PDBC_PFX AS SPCT_PFX, PDPX_SPCT.PDPX_DESC  AS SPCT_DESC,
				 PDBC_SRTC.PDBC_PFX AS SRCT_PFX, PDPX_SRCT.PDPX_DESC  AS SRCT_DESC,
				 PDBC_PDBL.PDBC_PFX AS PDBL_PFX, PDPX_PDBL.PDPX_DESC  AS PDBL_DESC,
				 FLOB.SEQ_RENEW,
				 FLOB.FLOB_CODE,
				 FLOB_DESC
INTO ##ACTIVE_PDPDS
FROM facets.dbo.CMC_GRGR_GROUP             GRGR
INNER JOIN facets.dbo.CMC_CSPI_CS_PLAN     CSPI
  ON GRGR.GRGR_CK = CSPI.GRGR_CK
  AND CSPI.CSPD_CAT IN ('H','M')
  AND GETDATE() BETWEEN CSPI.CSPI_EFF_DT AND CSPI.CSPI_TERM_DT
INNER JOIN facets.dbo.CMC_CSPB_PLAN_BENV     CSPB
  ON GRGR.GRGR_CK = CSPB.GRGR_CK
	AND CSPI.CSCS_ID = CSPB.CSCS_ID
	AND CSPI.CSPI_ID = CSPB.CSPI_ID
	AND CSPI.CSPD_CAT = CSPB.CSPD_CAT
	AND GETDATE() BETWEEN CSPB.CSPB_BEG_DT AND CSPB.CSPB_END_DT
INNER JOIN facets.dbo.CMC_PDPD_PRODUCT      PDPD
   ON CSPI.PDPD_ID = PDPD.PDPD_ID
  AND GETDATE() BETWEEN PDPD.PDPD_EFF_DT AND PDPD.PDPD_TERM_DT
INNER JOIN facets.dbo.CMC_PDDS_PROD_DESC       PDDS
   ON CSPI.PDPD_ID = PDDS.PDPD_ID
LEFT OUTER JOIN facets.dbo.CMC_PDBC_PROD_COMP     PDBC_SPTC
	ON PDPD.PDPD_ID = PDBC_SPTC.PDPD_ID 
	AND PDBC_SPTC.PDBC_TYPE = 'SPCT'
	AND GETDATE() < PDBC_SPTC.PDBC_TERM_DT
LEFT OUTER JOIN facets.dbo.CMC_PDBC_PROD_COMP     PDBC_SRTC
	ON PDPD.PDPD_ID = PDBC_SRTC.PDPD_ID 
	AND PDBC_SRTC.PDBC_TYPE = 'SRCT'
	AND GETDATE() < PDBC_SRTC.PDBC_TERM_DT
LEFT OUTER JOIN facets.dbo.CMC_PDBC_PROD_COMP     PDBC_PDBL
	ON PDPD.PDPD_ID = PDBC_PDBL.PDPD_ID 
	AND PDBC_PDBL.PDBC_TYPE = 'PDBL'
	AND GETDATE() < PDBC_PDBL.PDBC_TERM_DT
LEFT OUTER JOIN facets.dbo.CMC_PDBL_PROD_BILL     PDBL
	ON PDBC_PDBL.PDBC_PFX = PDBL.PDBC_PFX 
	AND PDBC_PDBL.PDBC_TYPE = 'PDBL'
	AND PDBL.PDBL_ID = 'MED1' 
	AND GETDATE() < PDBL.PDBL_TERM_DT
LEFT OUTER JOIN CMC_PDPX_DESC                     PDPX_SPCT
    ON PDBC_SPTC.PDBC_TYPE = PDPX_SPCT.PDBC_TYPE
	AND PDBC_SPTC.PDBC_PFX = PDPX_SPCT.PDBC_PFX 
LEFT OUTER JOIN CMC_PDPX_DESC                     PDPX_SRCT
    ON PDBC_SRTC.PDBC_TYPE = PDPX_SRCT.PDBC_TYPE
	AND PDBC_SRTC.PDBC_PFX = PDPX_SRCT.PDBC_PFX 
LEFT OUTER JOIN CMC_PDPX_DESC                     PDPX_PDBL
    ON PDBC_PDBL.PDBC_TYPE = PDPX_PDBL.PDBC_TYPE
	AND PDBC_PDBL.PDBC_PFX = PDPX_PDBL.PDBC_PFX 
LEFT OUTER JOIN tempdb.dbo.AHEAD_FLOB_FIN_LOB     FLOB                            
    ON PDBL.PDBL_ACCT_CAT = FLOB.FLOB_CODE 
WHERE GRGR.GRGR_STS = 'AC'
-- (6736 rows affected)

--SELECT SPCT_PFX, COUNT(DISTINCT LOBD_ID)  AS LOBD_ID_COUNT,
--                 COUNT(DISTINCT PDDS_MCTR_BCAT) AS BCAT_COUNT,
--				 COUNT(DISTINCT PDDS_PROD_TYPE) AS PROD_TYPE_COUNT,
--				 COUNT(DISTINCT FLOB_CODE) AS FLOB_COUNT
--FROM ##ACTIVE_PDPDS
--GROUP BY SPCT_PFX
--HAVING COUNT(DISTINCT LOBD_ID) > 1
--OR COUNT(DISTINCT PDDS_MCTR_BCAT) > 1
--OR COUNT(DISTINCT PDDS_PROD_TYPE) > 1
--OR COUNT(DISTINCT FLOB_CODE) > 1
 
--SELECT LOBD_ID, COUNT(DISTINCT PDDS_MCTR_BCAT) AS BCAT_COUNT,
--				 COUNT(DISTINCT PDDS_PROD_TYPE) AS PROD_TYPE_COUNT,
--				 COUNT(DISTINCT FLOB_CODE) AS FLOB_COUNT
--FROM ##ACTIVE_PDPDS
--GROUP BY LOBD_ID
--HAVING  COUNT(DISTINCT PDDS_MCTR_BCAT) > 1
--OR COUNT(DISTINCT PDDS_PROD_TYPE) > 1
--OR COUNT(DISTINCT FLOB_CODE) > 1
/*
LOBD_ID	BCAT_COUNT	PROD_TYPE_COUNT	FLOB_COUNT
BAMA	1	1	4
BCAR	5	2	11
BCBS	8	3	56
MVLH	1	1	2
MVMA	1	1	5
*/

--SELECT SPCT_PFX, COUNT(DISTINCT LOBD_ID)
--FROM ##ACTIVE_PDPDS
--GROUP BY SPCT_PFX
--HAVING COUNT(DISTINCT LOBD_ID) > 1


--SELECT *
--FROM ##ACTIVE_PDPDS
--WHERE LOBD_ID = 'BCAR'

--SELECT 

--SELECT *
--FROM ##ACTIVE_PDPDS
--WHERE LOBD_ID LIKE  'FEP%'


---------------------------------------------------------------------
--  VALIDATION
---------------------------------------------------------------------

SELECT PDPD_ID
FROM ##ACTIVE_PDPDS
GROUP BY PDPD_ID
HAVING COUNT(DISTINCT PDPD_ID) > 1

SELECT *
FROM ##ACTIVE_PDPDS
WHERE SPCT_PFX IS NULL
OR SRCT_PFX IS NULL
OR PDBL_PFX IS NULL

SELECT DISTINCT FLOB_CODE FROM ##ACTIVE_PDPDS
-- 83

SELECT FLOB_CODE, COUNT(DISTINCT LOBD_ID)
FROM ##ACTIVE_PDPDS
GROUP BY FLOB_CODE
HAVING COUNT(DISTINCT LOBD_ID) > 1
-- 9051  2



---------------------------------------------------------------------
---------------------------------------------------------------------

----  USING ACTIVE PRODUCTS FROM ABOVE
----  FIND DISTINCT PDBC_PFX VALUES FOR SPCT

DROP TABLE IF EXISTS ##ACTIVE_SPCTS
SELECT PDBC.PDBC_PFX AS PDBC_PFX, COUNT(DISTINCT PDPD.PDPD_ID) AS NBR_PDPDS
INTO ##ACTIVE_SPCTS
FROM  ##ACTIVE_PDPDS      PDPD
INNER JOIN facets.dbo.CMC_PDBC_PROD_COMP     PDBC
	ON PDPD.PDPD_ID = PDBC.PDPD_ID 
	AND PDBC.PDBC_TYPE = 'SPCT'
	AND GETDATE() BETWEEN PDBC.PDBC_EFF_DT AND PDBC.PDBC_TERM_DT
GROUP BY PDBC.PDBC_PFX
--  (351 rows affected)

CREATE INDEX #ACTIVE_SPCTS_IDX ON ##ACTIVE_SPCTS(PDBC_PFX);

SELECT COUNT(*) FROM ##ACTIVE_SPCTS

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------


DROP TABLE IF EXISTS  tempdb.dbo.AHEAD_CONV_CRIT_CAT

CREATE TABLE tempdb.dbo.AHEAD_CONV_CRIT_CAT
 (CONV_SRC    CHAR(4),
  CRIT_ID     CHAR(4),
  CRIT_DESC   VARCHAR(70),
  CRIT_TYPE   CHAR(1));

---------------------------------------------------------------------------------------------------------

INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','IPCD','Procedure Code','R')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','MODF','Procedure Code Modifier','M')  
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','IDCD','Diagnosis Code','R')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','DCTP','Diagnosis Code Type','M')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','PSCD','Place of Sevice','R')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','MAGE','Patients Age','R')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','MSEX','Patients Gender','M')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','PTYP','Practioner Type','M')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','PSPC','Practitioner Specialty','M')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','SCSE','Conversion Service ID','M')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','RPTC','Service Report Category','M')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','OPTS','Conversion Service ID','M')
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','PREL','Patient Relationship','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','RCRC','Revenue Code','R')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','DIAG','Diagnosis Code','R')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','DCTP','Diagnosis Code Type','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','HBCD','Hospital Billing Classification Identifier','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','MAGE','Patients Age','R')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','MSEX','Patients Gender','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','FTYP','Facility Type','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','SCSE','Conversion Service ID','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','RPTC','Service Report Category','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','OPTS','Supplemental Revenue Code Conversion Options','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','ICDV','ICD Version','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','IDRE','Related Diagnosis Type','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','IPCD','Procedure Code','R')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SRCT','IPTP','Procedure Code Type','M')
--INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT VALUES ('SPCT','PREL','Patient Relationship','M')

select distinct CRIT_ID from tempdb.dbo.AHEAD_CONV_CRIT_CAT

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

DROP TABLE IF EXISTS tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS 
CREATE TABLE tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
 (CONV_SRC    CHAR(4),
  CRIT_ID     CHAR(4),
  CRIT_ID_SEQ INT,  
  CRIT_LOW    CHAR(10),
  CRIT_HIGH   CHAR(10),
  OCCURS      INT);

CREATE INDEX AHEAD_CRIT_VALS_IDX ON tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS (CRIT_ID, CRIT_LOW)

---------------------------------------------------------------------------------------------------------
--SELECT * FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS


INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT 'SPCT' AS CONV_SRC,
       'IPCD' AS CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW,CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       SPCT_IPCD_LOW  AS CRIT_LOW,
	   SPCT_IPCD_HIGH AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_IPCD_LOW, SPCT_IPCD_HIGH)  SPCT
  --------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT 'SPCT' AS CONV_SRC,
       'MODF' AS CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       SPCT_MODIFIER  AS CRIT_LOW,
	   ' ' AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_MODIFIER)  SPCT
  --------------------------------------------------------------------------------------------------------------

INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'IDCD' AS CRIT_ID,
       SPCT_ID_REL_LOW  AS CRIT_LOW,
	   SPCT_ID_REL_HIGH AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_ID_REL_LOW, SPCT_ID_REL_HIGH)  SPCT





INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'DCTP' AS CRIT_ID,
       SPCT_IDCD_TYPE  AS CRIT_LOW,
	   ' ' AS CRIT_HIGH,
	   COUNT(*)  AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_IDCD_TYPE)  SPCT;


INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'PSCD' AS CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY SPCT_PSCD_LOW, SPCT_PSCD_HIGH) AS CRIT_ID_SEQ,
       SPCT_PSCD_LOW  AS CRIT_LOW,
	   SPCT_PSCD_HIGH AS CRIT_HIGH,
	   COUNT(*)   AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_PSCD_LOW,SPCT_PSCD_HIGH)  SPCT;




INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'MAGE' AS CRIT_ID,
       SPCT_AGE_LOW  AS CRIT_LOW,
	   SPCT_AGE_HIGH AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_AGE_LOW, SPCT_AGE_HIGH)  SPCT;

INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'MSEX' AS CRIT_ID,
       SPCT_SEX  AS CRIT_LOW,
	   ' ' AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_SEX)  SPCT;

INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'PTYP' AS CRIT_ID,
       PRPR_MCTR_TYPE  AS CRIT_LOW,
	   ' ' AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY PRPR_MCTR_TYPE)  SPCT;

INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'PSPC' AS CRIT_ID,
       PRCF_MCTR_SPEC  AS CRIT_LOW,
	   ' ' AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY PRCF_MCTR_SPEC)  SPCT;

----INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
----SELECT CONV_SRC,
----       CRIT_ID,
----	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
----	   CRIT_LOW,
----	   CRIT_HIGH,
----	   OCCURS
----FROM (SELECT DISTINCT
----       'SPCT' AS CONV_SRC,
----       'SCSE' AS CRIT_ID,
----	   ROW_NUMBER() OVER (ORDER BY SPCT_SESE_ID) AS CRIT_ID_SEQ,
----       SPCT_SESE_ID  AS CRIT_LOW,
----	   '' AS CRIT_HIGH,
----	   COUNT(*) AS OCCURS
----FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
----INNER JOIN ##ACTIVE_SPCTS              ACTV
----     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
----WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
----GROUP BY SPCT_SESE_ID)  SPCT;

INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'RPTC' AS CRIT_ID,
       RPTC_RPT_CAT  AS CRIT_LOW,
	   ' ' AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY RPTC_RPT_CAT)  SPCT;

INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'OPTS' AS CRIT_ID,
       SPCT_OPTS  AS CRIT_LOW,
	   ' ' AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_OPTS)  SPCT;

INSERT INTO tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SELECT CONV_SRC,
       CRIT_ID,
	   ROW_NUMBER() OVER (ORDER BY CRIT_LOW, CRIT_HIGH ) AS CRIT_ID_SEQ,
	   CRIT_LOW,
	   CRIT_HIGH,
	   OCCURS
FROM (SELECT DISTINCT
       'SPCT' AS CONV_SRC,
       'PREL' AS CRIT_ID,
       SPCT_RELATION  AS CRIT_LOW,
	   ' ' AS CRIT_HIGH,
	   COUNT(*) AS OCCURS
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
GROUP BY SPCT_RELATION)  SPCT;

SELECT CRIT_ID, COUNT(*)
FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
GROUP BY CRIT_ID

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

ALTER TABLE tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
ADD NOT_USED  CHAR(1) 

UPDATE tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
SET NOT_USED = CASE WHEN ((CRIT_LOW = ' ' AND CRIT_HIGH = ' ')
                     OR ( CRIT_ID = 'MSEX' AND CRIT_LOW = 'B')
					 OR (CRIT_ID = 'MAGE' AND CRIT_LOW = '0' AND CRIT_HIGH = '999'))THEN 'Y' ELSE 'N' END

--SELECT * FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
--WHERE CRIT_ID = 'DCTP'
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

--DROP TABLE IF EXISTS tempdb.dbo.AHEAD_CONV_GRP_MATCH
--CREATE TABLE tempdb.dbo.AHEAD_CONV_GRP_MATCH
-- (CONV_SRC        CHAR(4),
--  SESE_ID         CHAR(4),
--  CONV_SESE_ID    CHAR(4),
--  CRIT_ID         CHAR(4),
--  CRIT_ID_SEQ     INT,
--  MATCH_COUNT     INT);

--SELECT * FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'IDCD'

DROP TABLE IF EXISTS ##SPCT_MAP
SELECT 
       SPCT.PDBC_PFX
	  ,SPCT.SPCT_EFF_DT
      ,SPCT.SPCT_TERM_DT
	  ,SPCT.SPCT_SEQ_NO
      ,SPCT.SESE_ID
      ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'IPCD' AND SPCT.SPCT_IPCD_LOW = CONV.CRIT_LOW AND SPCT.SPCT_IPCD_HIGH = CONV.CRIT_HIGH)  AS IPCD_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'MODF' AND SPCT.SPCT_MODIFIER = CONV.CRIT_LOW )  AS MODF_CRIT_SEQ
      ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'IDCD' AND SPCT.SPCT_ID_REL_LOW = CONV.CRIT_LOW AND SPCT.SPCT_ID_REL_HIGH = CONV.CRIT_HIGH)  AS IDCD_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'DCTP' AND SPCT.SPCT_IDCD_TYPE = CONV.CRIT_LOW )  AS DCTP_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'PSCD' AND SPCT.SPCT_PSCD_LOW = CONV.CRIT_LOW AND SPCT.SPCT_PSCD_HIGH = CONV.CRIT_HIGH)  AS PSCD_CRIT_SEQ
      ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'MAGE' AND SPCT.SPCT_AGE_LOW = CONV.CRIT_LOW AND SPCT.SPCT_AGE_HIGH = CONV.CRIT_HIGH)  AS MAGE_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'MSEX' AND SPCT.SPCT_SEX = CONV.CRIT_LOW )  AS MSEX_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'PTYP' AND SPCT.PRPR_MCTR_TYPE = CONV.CRIT_LOW )  AS PTYP_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'PSPC' AND SPCT.PRCF_MCTR_SPEC = CONV.CRIT_LOW )  AS PSPC_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'RPTC' AND SPCT.RPTC_RPT_CAT = CONV.CRIT_LOW )  AS RPTC_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'OPTS' AND SPCT.SPCT_OPTS = CONV.CRIT_LOW )  AS OPTS_CRIT_SEQ
	  ,(SELECT CASE WHEN CONV.NOT_USED = 'Y' THEN -1 ELSE CRIT_ID_SEQ END FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV WHERE CONV.CRIT_ID = 'PREL' AND SPCT.SPCT_RELATION = CONV.CRIT_LOW )  AS PREL_CRIT_SEQ
      ,SPCT_SESE_ID
	  ,CAST(NULL AS NVARCHAR(255)) AS HASHVAL 
INTO ##SPCT_MAP
FROM ##ACTIVE_SPCTS                                    ACTV
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV               SPCT
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
     AND GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
	 AND SPCT.SPCT_IDCD_TYPE <> 'I'
-- (12900596 rows affected)

UPDATE ##SPCT_MAP
SET HASHVAL = CONCAT(SESE_ID,'|', CAST(IPCD_CRIT_SEQ AS CHAR(5)),'|',CAST(MODF_CRIT_SEQ  AS CHAR(2)),'|',CAST(IDCD_CRIT_SEQ  AS CHAR(5)),'|', CAST(DCTP_CRIT_SEQ  AS CHAR(2)),'|', CAST( PSCD_CRIT_SEQ AS CHAR(2)),'|',CAST( MAGE_CRIT_SEQ AS CHAR(2)),'|',CAST( MSEX_CRIT_SEQ AS CHAR(4)),'|', CAST( PTYP_CRIT_SEQ AS CHAR(4)),'|',CAST( PSPC_CRIT_SEQ AS CHAR(4)),'|',CAST( RPTC_CRIT_SEQ AS CHAR(4)),'|',CAST( OPTS_CRIT_SEQ AS CHAR(4)),'|',CAST( PREL_CRIT_SEQ AS CHAR(4)),'|',SPCT_SESE_ID )
--  (12900596 rows affected)

SELECT COUNT(DISTINCT PDBC_PFX) FROM ##SPCT_MAP
-- 351


DROP TABLE IF EXISTS ##HASHVAL_OCCURS
SELECT HASHVAL, COUNT(distinct PDBC_PFX) AS OCCURS
INTO ##HASHVAL_OCCURS
FROM ##SPCT_MAP
group by HASHVAL ORDER BY 2 DESC
-- (404065 rows affected)


SELECT SESE_ID, SPCT_SESE_ID, COUNT(DISTINCT PDBC_PFX)
FROM  (SELECT HASHVAL FROM ##HASHVAL_OCCURS WHERE OCCURS >= 341)  HV
INNER JOIN   ##SPCT_MAP         SPCT
   ON SPCT.HASHVAL   = HV.HASHVAL
GROUP BY SESE_ID, SPCT_SESE_ID
ORDER BY 1,2

SELECT *
FROM 




SELECT OCCURS, COUNT(*)
FROM ##HASHVAL_OCCURS
GROUP BY OCCURS ORDER BY 1 DESC 


SELECT DISTINCT PDBC_PFX
FROM  (SELECT HASHVAL FROM ##HASHVAL_OCCURS WHERE OCCURS = 341)  HV
LEFT JOIN   ##SPCT_MAP         SPCT
   ON SPCT.HASHVAL   = HV.HASHVAL
WHERE SPCT.HASHVAL IS  NULL

SELECT DISTINCT PDBC_PFX
FROM  ##SPCT_MAP         SPCT
LEFT JOIN  (SELECT HASHVAL FROM ##HASHVAL_OCCURS WHERE OCCURS = 350)  HV
   ON SPCT.HASHVAL   = HV.HASHVAL
WHERE HV.HASHVAL IS  NULL


------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
---   Reporting 
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

select ACTV.PDBC_PFX, COUNT(*)  AS PFX_ROW_COUNT,
FROM ##ACTIVE_SPCTS                                    ACTV
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV               SPCT
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
     AND GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
GROUP BY ACTV.PDBC_PFX
--40K - 50K AVERAGE



SELECT *
FROM ##SPCT_MAP
WHERE HASHVAL IN (



HAVING COUNT(*) = 23166)


SELECT COUNT(DISTINCT PDBC_PFX) FROM ##ACTIVE_SPCTS 
--  351 

DROP TABLE IF EXISTS ##CONV_TTLS
seLECT  SESE_ID
		,IPCD_CRIT_SEQ
		,MODF_CRIT_SEQ
		,IDCD_CRIT_SEQ
		,DCTP_CRIT_SEQ
		,PSCD_CRIT_SEQ
		,MAGE_CRIT_SEQ
		,MSEX_CRIT_SEQ
		,PTYP_CRIT_SEQ
		,PSPC_CRIT_SEQ
		,RPTC_CRIT_SEQ
		,OPTS_CRIT_SEQ
		,PREL_CRIT_SEQ
		,SPCT_SESE_ID
		,HASHVAL
		,COUNT(DISTINCT PDBC_PFX)   as PFX_COUNT
INTO ##CONV_TTLS
FROM ##SPCT_MAP       MAP
WHERE DCTP_CRIT_SEQ <> 2
GROUP BY  SESE_ID
		,IPCD_CRIT_SEQ
		,MODF_CRIT_SEQ
		,IDCD_CRIT_SEQ
		,DCTP_CRIT_SEQ
		,PSCD_CRIT_SEQ
		,MAGE_CRIT_SEQ
		,MSEX_CRIT_SEQ
		,PTYP_CRIT_SEQ
		,PSPC_CRIT_SEQ
		,RPTC_CRIT_SEQ
		,OPTS_CRIT_SEQ
		,PREL_CRIT_SEQ
		,SPCT_SESE_ID
		,HASHVAL
--HAVING COUNT(DISTINCT PDBC_PFX) = 23



SELECT  *
FROM ##CONV_TTLS       MAP


SELECT COUNT(*)
FROM ##ACTIVE_PDPDS                 PDPD
INNER JOIN ##SPCT_MAP               MAP
   ON PDPD.SPCT_PFX = MAP.PDBC_PFX

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

SELECT *
FROM 
WHERE SESE_ID = 'ACIM'


SELECT *
FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
WHERE CRIT_ID = 'DCTP' ORDER BY OCCURS DESC


SELECT * FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS CONV 
WHERE  CRIT_ID = 'IDCD'
AND CRIT_LOW = '290'

SELECT COUNT(*)
FROM ##ACTIVE_SPCTS                                    ACTV
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV               SPCT
    ON ACTV.PDBC_PFX = SPCT.PDBC_PFX
    AND   GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
--  16,567,350

SELECT COUNT(*)
FROM ##ACTIVE_SPCTS                                    ACTV
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV               SPCT
    ON ACTV.PDBC_PFX = SPCT.PDBC_PFX
    AND   GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
INNER JOIN tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS         CVAL
    ON RTRIM(CVAL.CRIT_LOW) = RTRIM(SPCT.SPCT_IPCD_LOW)
   AND RTRIM(CVAL.CRIT_HIGH) = RTRIM(SPCT.SPCT_IPCD_HIGH)
   AND CVAL.CONV_SRC = 'SPCT'
   AND CVAL.CRIT_ID = 'IPCD'



SELECT CCAT.CONV_SRC, SPCT.PDBC_PFX, SPCT.SESE_ID, SPCT.SPCT_SESE_ID, SPCT.CCAT.CRIT_ID, CVAL.CRIT_ID_SEQ--, COUNT(*) AS MATCH_COUNT 
--INTO ##MATCHES
--SELECT COUNT(*)
FROM tempdb.dbo.AHEAD_CONV_CRIT_CAT                    CCAT
INNER JOIN tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS         CVAL
         ON CCAT.CONV_SRC = CVAL.CONV_SRC
		AND CCAT.CRIT_ID = CVAL.CRIT_ID
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV               SPCT
    ON RTRIM(CVAL.CRIT_LOW) = RTRIM(SPCT.SPCT_IPCD_LOW)
   AND RTRIM(CVAL.CRIT_HIGH) = RTRIM(SPCT.SPCT_IPCD_HIGH)
   AND GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
INNER JOIN ##ACTIVE_SPCTS                              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX

WHERE CCAT.CONV_SRC = 'SPCT'
  AND CCAT.CRIT_ID = 'IPCD'



  SELECT * FROM 
  tempdb.dbo.AHEAD_CONV_CRIT_CAT_VALS
  WHERE CRIT_ID_SEQ = 1
  ORDER BY 1,2,3

SELECT DISTINCT SPCT.SESE_ID, SEDS.SEDS_DESC, SPCT_SESE_ID, SEDS2.SEDS_DESC
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
INNER JOIN CMC_SEDS_SE_DESC  SEDS
  ON SPCT.SESE_ID = SEDS.SESE_ID
INNER JOIN CMC_SEDS_SE_DESC   SEDS2
  ON SPCT.SESE_ID = SEDS2.SESE_ID
WHERE GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
AND  SPCT_AGE_LOW = '0' AND  SPCT_AGE_HIGH = '0' 


GROUP BY SPCT_AGE_LOW, SPCT_AGE_HIGH
ORDER BY 3 DESC




SELECT AIAI_CL_ACPT_PER, COUNT(*)
FROM CMC_AIAI_ADM_INFO
GROUP BY AIAI_CL_ACPT_PER



SELECT COUNT(*) FROM 
(
SELECT DISTINCT SPCT.PDBC_PFX, SPCT.SESE_ID, SPCT.SPCT_EFF_DT, SPCT.SPCT_SEQ_NO
FROM facets.dbo.CMC_SPCT_SUPP_CONV        SPCT
INNER JOIN  facets.dbo.CMC_IDCD_DIAG_CD   IDCD
   ON IDCD.IDCD_ID BETWEEN SPCT.SPCT_ID_REL_LOW AND SPCT.SPCT_ID_REL_HIGH
  AND IDCD.IDCD_TYPE = 'I'
WHERE SPCT.SPCT_IDCD_TYPE = 'I'
  AND SPCT.SPCT_EFF_DT > '10/1/2015' ) BLAH

-- 14,787,709

SELECT * 
FROM facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
INNER JOIN ##ACTIVE_SPCTS              ACTV
     ON SPCT.PDBC_PFX = ACTV.PDBC_PFX
WHERE [SPCT_IDCD_TYPE] = ' '
AND SPCT_ID_REL_LOW <> ' '
AND SPCT_TERM_DT > GETDATE()







---------------------------------------------------------
--  SRCT COUNT FOR 2022
---------------------------------------------------------
DROP TABLE IF EXISTS ##SRCT_COUNT_2022
SELECT PDBC_SRCT.PDBC_TYPE, PDBC_SRCT.PDBC_PFX, COUNT(*)  AS SRCT_COUNT
INTO ##SRCT_COUNT_2022
FROM [facets].[dbo].[CMC_CLCL_CLAIM]         CLCL
INNER JOIN [facets].[dbo].CMC_CDML_CL_LINE   CDML
  ON CLCL.CLCL_ID = CDML.CLCL_ID
  INNER JOIN CMC_PDBC_PROD_COMP          PDBC_SRCT
  ON CLCL.PDPD_ID = PDBC_SRCT.PDPD_ID
  AND PDBC_SRCT.PDBC_TYPE = 'SRCT'
  AND CLCL.CLCL_LOW_SVC_DT BETWEEN PDBC_SRCT.PDBC_EFF_DT AND PDBC_SRCT.PDBC_TERM_DT
INNER JOIN CMC_SRCT_SUPP_CONV   SRCT
  ON PDBC_SRCT.PDBC_PFX = SRCT.PDBC_PFX
  AND CLCL.CLCL_LOW_SVC_DT BETWEEN SRCT_EFF_DT AND SRCT_TERM_DT
  AND CDML.SESE_ID = SRCT.SRCT_SESE_ID
WHERE CLCL.CLCL_LOW_SVC_DT > '12/31/2021'
AND CLCL.CLCL_CUR_STS = '02'
GROUP BY PDBC_SRCT.PDBC_TYPE, PDBC_SRCT.PDBC_PFX

-- (316 rows affected)

select * 
from  ##SRCT_COUNT_2022 order by 3 desc
---------------------------------------------------------
--  SPCT COUNT FOR 2022
---------------------------------------------------------

DROP TABLE IF EXISTS ##SPCT_COUNT_2022
SELECT PDBC_SPCT.PDBC_TYPE, PDBC_SPCT.PDBC_PFX, COUNT(*)  AS SRCT_COUNT
INTO ##SPCT_COUNT_2022
FROM [facets].[dbo].[CMC_CLCL_CLAIM]         CLCL
INNER JOIN [facets].[dbo].CMC_CDML_CL_LINE   CDML
  ON CLCL.CLCL_ID = CDML.CLCL_ID
INNER JOIN CMC_PDBC_PROD_COMP          PDBC_SPCT
  ON CLCL.PDPD_ID = PDBC_SPCT.PDPD_ID
  AND PDBC_SPCT.PDBC_TYPE = 'SPCT'
  AND CLCL.CLCL_LOW_SVC_DT BETWEEN PDBC_SPCT.PDBC_EFF_DT AND PDBC_SPCT.PDBC_TERM_DT
INNER JOIN CMC_SPCT_SUPP_CONV   SPCT
  ON PDBC_SPCT.PDBC_PFX = SPCT.PDBC_PFX
  AND CLCL.CLCL_LOW_SVC_DT BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
  AND CDML.SESE_ID = SPCT.SPCT_SESE_ID
WHERE CLCL.CLCL_LOW_SVC_DT > '12/31/2021'
AND CLCL.CLCL_CUR_STS = '02'
GROUP BY PDBC_SPCT.PDBC_TYPE, PDBC_SPCT.PDBC_PFX
--  (500 rows affected)
select * 
from  ##SPCT_COUNT_2022 order by 3 desc



---------------------------------------------------------
--  TOTALS
---------------------------------------------------------

SELECT TOP 10 * FROM ##SRCT_COUNT_2022 ORDER BY SRCT_COUNT DESC

SELECT TOP 10 * FROM ##SPCT_COUNT_2022 ORDER BY SPCT_COUNT DESC



select *
from CMC_GRGR_GROUP
WHERE GRGR_STS = 'AC'



USE [cmudb]
GO
/****** Object:  StoredProcedure [dbo].[tzg_dmu_batch_migration]    Script Date: 9/9/2022 4:21:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*********************************************************************************
*** BEGIN MAINTENANCE WRAPPER:tzg_dmu_batch_migration - END
*********************************************************************************/

ALTER PROCEDURE [dbo].[tzg_dmu_batch_migration]
(      
  @pchPriority CHAR(1) = NULL      
 ,@pchTgtEnvironmentID CHAR(10) = NULL      
       
)     
AS      
SET NOCOUNT ON      
SET ANSI_NULLS ON      
SET ANSI_WARNINGS ON      
SET XACT_ABORT ON      
SET QUOTED_IDENTIFIER ON      
      
/*      
 DB PLATFORM   :  Microsoft SQL Server      
      
   INPUT  :  @pchPriority : The priority level of requests to be processed.      
      @pchTgtEnvironmentID : the target environment of the requests      
            
   OUTPUT  :  Data migrated to target environment.      
      
  RETURN CODE  :  0 = OK, otherwise pass through database error code.      
      
  DEPENDENCIES :  FACETS TABLES:  Depends on request      
      
  DMU TABLES  :  tzgt_dmu_environment,tzgt_dmu_message_log      
      tzgt_dmu_migration_request,tzgt_dmu_validation_rules      
      tzgt_dmu_completed_requests,tzgt_dmu_note_keys      
      tzgt_dmu_pdrt_ck_keys,tzgt_dmu_rate_keys ( and various work tables created in process)      
      
  VIEWS   :  None      
      
  STORED PROCS :  CERSP_ATT0_RETURN_GEN_IDS      
      tzg_dmu_assign_note_keys      
      tzg_dmu_assign_rate_keys      
      tzg_dmu_assign_pdrt_ck      
      tzg_dmu_bulk_delete      
      tzg_dmu_set_audit      
      
  PURPOSE/DESC:  This procedure is part of the Data Migration Utility (DMU) developed by The TriZetto Group for users of its Facets software.        
        This procedure is typically called by a batch process. The procedure looks for migrations scheduled in the DMU for the specified environment and priority level, and if found, proceeds to serially process the migrations that fit that criteria.     
 
      
  REVISIONS : (Ver  - Date   - Author  - Description)      
     ------------------------------------------------------------------------------------------------------------------------------      
      1.0 - 10/10/2005 - DougHanna/Paul  Sepan Initial development.      
      
      1.1 - 12/19/2005 - Paul Sepan   Corrections to syntax.Due to differences in how Sybase handles inter-server communications      
              compared with MS-SQL Server and Oracle, much of the query logic had to be reworked for the Sybase environment.  Added code to create and drop proxy tables for the remote database tables.      
      
              Added code to turn off auditing temporarily for the target tables and turn it back on after   migration complete.      
                    
              Moved final update of migration request table to inside the cursor loop to prevent loss of data or appearance that migrations did not complete if a subsequent migration caused an error.      
      
     1.2 - 02/15/2006  - Paul Sepan     Revised maintenance wrappers to make this procedure consistent with other database objects in this      
              project.      
                                                              
     1.3 - 02/15/2006  - Paul Sepan     Changed test of @lchALLOW_DELETE to check for 'N' instead of an empty string.       
                 That variable should never be populated with an empty string.      
                 3/3/06 Added REQUEST_ID number to name of index created on ATXR work table to prevent error on duplicate (index) object names.      
                                                              
     1.4 - 05/23/2006  - Paul Sepan     Changes to handle added input parameter @pUSUS_ID in the      
                 CERSP_TXN1_GET_TXN1_ID procedure in Facets, apparently added in 4.31.      
                 Also added input parameter to this procedure that allows the user      
                 to skip the code that temporarily turns off Facets auditing during      
                 migrations.  Moved UPDATE_AND_CONTINUE jump point up to include the      
                 resetting of audit status and the dropping of proxy tables.      
      
     1.5 - 08/31/2006 - Paul Sepan  Correction to INSERT statement to specify column names, correcting error which inserts       
              ADD and DEL stats into wrong columns.      
      
     1.6 - 11/18/2009 - Irwin Chen  The logic to move the User Field added      
      
     1.6.1- 01/08/2010 -Masato Nakai  Added permanent working table tzgt_dmu_atxr_stage and tzgt_dmu_atuf_stage to improve       
              the attachment migration. The logic was ported from the Sybase version.      
      
     1.7 - 07/12/2011 - Brett Peters   Increased max size of column values and servers      
         
     1.8 - 02/20/2012 - Brett Peters   Added select distinct when pulling atxr records from source and target      
         
     1.9 - 12/5/2013 -  Ed Schroeder  Increased server name to 100      
         
     1.10 - 1/15/2014 - Ed Schroeder   Ver 1.7 introduced a possible string overflow error      
              increasing the local variables to handle string size      
      
     1.11 - 1/15/2015 - Matt Sampley   Updated to include OpenQuery to improve performance for data pull if Source/Target are linked servers      
              Updated to include bulk copy to improve data pull/push to target(Must be deployed to Facets Target Database)      
              Updated to include Start Times for major Extracts, Deletes, and Inserts for logging and troubleshooting      
      
     1.12 - 03/06/2015 - Matt Sampley  Updated to include option for Bulk Copy for CMU 2.3.1 enhancement      
              Updated to include new validation rule functionality (Constants on Reference Table)      
      
     1.13 - 05/15/2015 - Matt Sampley    Enhanced error checking for transactions      
              Updates to Validation Rules - creating new table with distinct values for validation to improve  performance      
      
     1.14 - 01/05/2016-  Matt Sampley Full Table Move determination - Truncate on delete if full table move      
            
     1.15 - 05/15/2016 - Matt Sampley    Simulated Migration      
            
     1.16 - 07/08/2016 - Matt and Bill   Full Table Move - Truncate only if target environment setting is enabled      
                                                              
     1.17 - 08/16/2016 - Viswa      Modified the Message_Text column as size of 230 for the user Story 4188      
                                                              
     1.18 - 12/23/2016 - Bijoish         Modified for the Adding Batch Duration      
                                                              
     1.19 - 05/18/2016 - Sathish      Modified for the Defect Fix - 1691      
                                                           
     1.20 - 03/22/2018 - Sathish      Modified for the US - 10941 ,ALM 9941,key word skipAudit or SKIP_AUDIT      
                                                              
     1.21 - 08/18/2018 - Ravi         Database Field length variable has been modified to 124                  
                                          
     1.22 - 09/07/2018 - Mani      Disable Facets Trigger Functionality included      
                                            
     1.23 - 09/07/2018 - sathish      Multi version suport -migration concept and table structure validation       
                                                              
     1.24 - 10/01/2018 - sathish      Multi version suport -Bulk copy function in remote and local environment       
                                               
     1.25 - 10/05/2018 - sathish      Multi version suport - prefix tables[ CMC_PDPX_DESC,CMC_ITPX_DESC] function in remote      
                 and local environment                           
      
     1.26 - 11/28/2018 - CMU Dev team    Both Same & multi version support by configuration value flag - logic       
              included (TABLE:tzgt_dmu_configuration)      
      
     1.27 - 20/03/2019 - DINESH N     US#14815 : CMU - Migration from Sybase to SQL  migration  Non - BPA Requests      
           
     1.28 - 09/04/2019 - DINESH N      US#14431 : CMU- BPA Migration By Prefix Enhancement - SQL      
           
     1.29 - 04/12/2018 - Rajesh      Defect#1507486 :Revised wrapper with formating db oject name to enclose with []       
          
        1.30 - 16/05/2019 - DINESH N      US#14432 : CMU - BPA migration by qualifier enhancement - SQL      
           
     1.31 - 07/17/2019 - DINESH N      Defect#5220 :CMU - Remove "Value count does not match" message       
           
     1.32 - 07/22/2019 - EDWIN       Defect#5296 :CMU - Request execution duration not appearing on the view/modify page       
      
     1.33 - 10/03/2019 - DINESH N   Defect#5487 :CMU- Migration request processing even after request in waiting approval Status      
           
                    1.34 - 12/02/2019   Rajsekar R      US#17429: CMU - Automate Comparison Job - SQL.        
           
                    1.35 - 12/04/2019 - VIKRAM T  Defect# 5427 : CMU- Message log coming empty for Failed requests      
      
     1.36 - 12/09/2019 - VIKRAM T  Defect# 5426 : CMU -  Request ID 0000000072 is failing in SQL, ORACLE and Sybase      
      
     1.37 - 12/23/2019 - VIKRAM T  Defect# 5410 : CMU- Migration is processing sucessfully if the request class is made inactive later      
           
     1.38 - 12/02/2019 - EDWIN   Defect#5729 : CMU - Database version does not restrict migrations between different environments      
           
     1.39 - 22/01/2020 - EDWIN   Defect#5777 : CMU - Preferred Care Partners - CMU Migration Request times out but Migration Request is set to Completed Successfully      
      
     1.40 - 03/02/2020 - RAJSEKAR R  Defect#5921 : CMU - CARESOURCE - Errors during BPA data moves       
      
     1.41 - 20/03/2020 - GNANAPRAGASAM US#18836 : CMU - Performance Tuning - Implement Batching in SQL      
      
     1.42 - 07/07/2020 - Rajsekar R  DefectID#47210:CMU - Remove Skip Audit flag from Batch migration SP      
           
     1.43 - 07/14/2020 - Edwin S   DefectID#91121:CMU - Migration requests are failing if column value exceeds 800 characters      
      
     1.44 - 07/17/2020 - Rajsekar R     UserStory#47389: CMU - Update Migration Logic for Request Type 0000000168 to avoid multiple generation      
           
     1.45 - 07/18/2020 - Pragathi P      US#97184  :  CMU - New Request type NWX0000052 for NetworX NWX_NCGP_CD_GROUP and NWX_NCGV_CD_VALUE table migration by group name, sequence number, TP Low and TP High      
      
     1.46 - 07/22/2020 - VIKRAM T  US#47387/US#47388 - CMU - Update Migration Logic for Request Type 0000000165/0000000166 to avoid multiple generation      
      
     1.47 - 07/24/2020 - GNANAPRAGASAM   US#97185  :  CMU - New Request Type NWX0000051 for NetworX NWX_NSRS_RATE_SHT and NWX_NRST_RS_TERMS migration by code, description, section type, sequence number and effective date.      
      
     1.48 - 09/11/2020 GNANAPRAGASAM   Defect#133389 : Bulk Copy feature is not working when target linked server name is not same as CMU server name      
      
     1.49 - 10/14/2020 PRAGATHI P  US#169322  : Performance enhancement for migration batch and bulk copy in SQL       
      
     1.50  - 12/09/2020  Rajsekar R  Userstory#200289:Cross Platform analysis Migration from Sybase to SQL       
      
     1.51  - 12/18/2020 GNANAPRAGASAM   US#182154 : New Workflow Request Type WFL0000021 for New Queue Definition(s) 
	 
	 1.52 - 02/11/2021 Parthiban US#246723 : Rename Skip Audit and Disable Trigger as Enable Audit and Enable Trigger

	 1.53 - 02/19/2021  Parthiban US#261332 : Rename SKIP_Validation and UI_SKIP_validation as Enable Validation and Enable UI Validation

     1.54 - 04/15/2021 - EDWIN  US#317581 - Rollback Update Term Date Logic for Request Types 0000000165(Service Definition) and 0000000168(Service Payment)

     1.55 - 05/14/2021 - Parthiban US#311637 - Migrate Supplemental Data by Prefix and Base Service ID using BPA0000017 - SQL & Sybase

     1.56 - 06/23/2021 - Parthiban US#405228 - CMU - Compatibility - Facets 5.8 R2 - Request Types
	 
	 1.57 - 08/18/2021 - Pragathi  US#481797-CMU – To Improve performance Skip tables Target backup - SQL

	 1.58 - 09/13/2021 - Pragathi P  US#47408-CMU - Enhanced Batch Logging for Remote servers- SQL 
	 
	 1.59 - 09/21/2021 - VIKRAM T US#495642 - CMU - Introduce Custom Based settings for detailed log - SQL

	 1.60 - 10/04/2021 - PRIYANKA DEFECT#478808 - CMU - Restrict the simulation for special request types either in UI or in Migration run.

     1.61 - 12/03/2021 - Parthiban  US#578710 - CMU - Migration Success - Zero records inserted or updated – SQL

     1.62 - 12/28/2021 - PRIYANKA  BUG#614018 - CMU - Restrict the simulation migration when target backup is NO

     1.63 - 12/29/2021 - PRAGATHI - BUG#614067 - CMU - When Allow Delete is NO - ADD & Delete Count should be zero If migration is failed with validation errors

************************************************************************************************************************************/      
BEGIN      
 -- variables used for dynamic SQL       
 DECLARE @lvcSqlString NVARCHAR(4000) --v1.10      
 DECLARE @lvcSqlString2 NVARCHAR(MAX) --v1.36      
  --  DECLARE @lvcParmString  NVARCHAR(500)  --1.3       
 DECLARE @lvcWhereString NVARCHAR(4000)      
 DECLARE @lvcLinkWhereString NVARCHAR(4000) --1.11      
  -- variables used for main loop -- processing migration request records        
 DECLARE @lnREQUEST_ID INT      
 DECLARE @lvcREQUEST_TYPE_ID NVARCHAR(10)      
 DECLARE @lvcTYPE_STATUS NVARCHAR(10) --1.37      
 DECLARE @lvcREQUEST_CLASS_ID NVARCHAR(10) --1.37      
 DECLARE @lvcCLASS_STATUS NVARCHAR(10) --1.37      
 DECLARE @lvcFIRST_TBL_NAME NVARCHAR(50)      
 DECLARE @lvcSECOND_TBL_NAME NVARCHAR(50)      
 DECLARE @lvcTHIRD_TBL_NAME NVARCHAR(50)      
 DECLARE @lvcFOURTH_TBL_NAME NVARCHAR(50)      
 DECLARE @lvcFIFTH_TBL_NAME NVARCHAR(50)      
 DECLARE @lvcFIRST_COL_NAME NVARCHAR(50)      
 DECLARE @lvcFIRST_COL_VAL NVARCHAR(1500) --v1.7 & v1.10      
 DECLARE @lvcSECOND_COL_NAME NVARCHAR(50)      
 DECLARE @lvcSECOND_COL_VAL NVARCHAR(1500) --v1.7 & v1.10      
 DECLARE @lvcTHIRD_COL_NAME NVARCHAR(50)      
 DECLARE @lvcTHIRD_COL_VAL NVARCHAR(1500) --v1.7 & v1.10      
 DECLARE @lvcFOURTH_COL_NAME NVARCHAR(50)      
 DECLARE @lvcFOURTH_COL_VAL NVARCHAR(1500) --v1.7 & v1.10      
 DECLARE @lvcFIFTH_COL_NAME NVARCHAR(50)      
 DECLARE @lvcFIFTH_COL_VAL NVARCHAR(1500) --v1.7 & v1.10      
 DECLARE @lvcFIRST_CONST_COL NVARCHAR(50)      
 DECLARE @lvcFIRST_CONST_VAL NVARCHAR(50)      
 DECLARE @lvcSECOND_CONST_COL NVARCHAR(50)      
 DECLARE @lvcSECOND_CONST_VAL NVARCHAR(50)      
 DECLARE @lvcPREFIX_TBL_NAME VARCHAR(4)      
 DECLARE @lvcPREFIX_TYPE NVARCHAR(4)      
 DECLARE @lchMOVE_NOTES CHAR(1)  
 DECLARE @lchTGT_BACKUP_REQ CHAR(1) 
 DECLARE @lchMOVE_USR_FLD CHAR(1) --1.6      
 DECLARE @lchALLOW_DELETE CHAR(1)      
 DECLARE @lchCHECK_VAL_CT CHAR(1)      
 DECLARE @lnREQUEST_VAL_CT INT      
 DECLARE @lvcSRC_SERVER_NAME NVARCHAR(150) --v1.7 v1.9      
 DECLARE @lvcSRC_DATABASE_NAME NVARCHAR(150)      
 DECLARE @lvcSRC_SCHEMA_NAME NVARCHAR(20)      
 DECLARE @lvcSRC_DATABASE_VERSION NVARCHAR(15)       
 DECLARE @lvcTGT_SERVER_NAME NVARCHAR(150) --v1.7 v1.9      
 DECLARE @lvcTGT_DATABASE_NAME NVARCHAR(150)      
 DECLARE @lvcTGT_SCHEMA_NAME NVARCHAR(20)      
 DECLARE @lvcTGT_DATABASE_VERSION NVARCHAR(15)       
 DECLARE @lvcMIG_SCHEMA_NAME NVARCHAR(20)      
 DECLARE @bitSRC_REMOTE_SERVER BIT --1.11      
 DECLARE @bitTGT_REMOTE_SERVER BIT --1.11      
 DECLARE @lvcCMU_DATABASE_NAME NVARCHAR(150) --1.11      
 DECLARE @lvcCMU_SERVER_NAME NVARCHAR(150) --1.11      
 DECLARE @lchTGT_BULK_COPY CHAR(1) --1.12      
 DECLARE @lvcREQUEST_STS NVARCHAR(2) --1.15      
 DECLARE @lnSIM_VAL_RULE_COUNT INT --1.15      
  -- variables for validation rules cursor       
 DECLARE @lnRULE_ID INT      
 DECLARE @lvcSRC_TBL_ID INT      
 DECLARE @lvcREF_TBL_NAME NVARCHAR(50)      
 DECLARE @lvcFIRST_SRC_COL NVARCHAR(50)      
 DECLARE @lvcFIRST_REF_COL NVARCHAR(50)      
 DECLARE @lvcSECOND_SRC_COL NVARCHAR(50)      
 DECLARE @lvcSECOND_REF_COL NVARCHAR(50)      
 DECLARE @lvcTHIRD_SRC_COL NVARCHAR(50)      
 DECLARE @lvcTHIRD_REF_COL NVARCHAR(50)      
 DECLARE @lvcFOURTH_SRC_COL NVARCHAR(50)      
 DECLARE @lvcFOURTH_REF_COL NVARCHAR(50)      
 DECLARE @lvcFIFTH_SRC_COL NVARCHAR(50)      
 DECLARE @lvcFIFTH_REF_COL NVARCHAR(50)      
 DECLARE @lvcVAL_FIRST_CONST_COL NVARCHAR(50)      
 DECLARE @lvcVAL_FIRST_CONST_VAL NVARCHAR(50)      
 DECLARE @lvcVAL_SECOND_CONST_COL NVARCHAR(50)      
 DECLARE @lvcVAL_SECOND_CONST_VAL NVARCHAR(50)      
 DECLARE @lvcVAL_FIRST_CONST_COL_TGT NVARCHAR(50) --1.12      
 DECLARE @lvcVAL_FIRST_CONST_VAL_TGT NVARCHAR(50) --1.12      
 DECLARE @lvcVAL_SECOND_CONST_COL_TGT NVARCHAR(50) --1.12      
 DECLARE @lvcVAL_SECOND_CONST_VAL_TGT NVARCHAR(50) --1.12      
 DECLARE @lvcSEVERITY NVARCHAR(1)      
 DECLARE @lvcVAL_RULE_TABLE NVARCHAR(50) --1.13      
  -- variables for table purge cursor       
 DECLARE @lvcTABLE_NAME NVARCHAR(50)      
 -- variables for rate date/time cursor       
 DECLARE @ldtmRATE_DTM DATETIME      
 --DECLARE @lbNewDateFound      BIT       
 -- variables used for table names       
 DECLARE @lvcSrcQualifier NVARCHAR(100)      
 DECLARE @lvcTgtQualifier NVARCHAR(100)      
 DECLARE @lvcTempQualifier NVARCHAR(100)      
 DECLARE @lvcSrcLink NVARCHAR(100) --1.11      
 DECLARE @lvcTgtLink NVARCHAR(100) --1.11      
 DECLARE @lvcT1SrcName NVARCHAR(100)      
 DECLARE @lvcT1TgtName NVARCHAR(100)      
 DECLARE @lvcT1SrcLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT1TgtLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT1ExtName NVARCHAR(100)      
 DECLARE @lvcT1BakName NVARCHAR(100)      
 DECLARE @lchT1Audited CHAR(1) --1.1       
 DECLARE @lvcT2SrcName NVARCHAR(100)      
 DECLARE @lvcT2TgtName NVARCHAR(100)      
 DECLARE @lvcT2SrcLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT2TgtLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT2ExtName NVARCHAR(100)      
 DECLARE @lvcT2BakName NVARCHAR(100)      
 DECLARE @lchT2Audited CHAR(1) --1.1       
 DECLARE @lvcT3SrcName NVARCHAR(100)      
 DECLARE @lvcT3TgtName NVARCHAR(100)      
 DECLARE @lvcT3SrcLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT3TgtLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT3ExtName NVARCHAR(100)      
 DECLARE @lvcT3BakName NVARCHAR(100)      
 DECLARE @lchT3Audited CHAR(1) --1.1       
 DECLARE @lvcT4SrcName NVARCHAR(100)      
 DECLARE @lvcT4TgtName NVARCHAR(100)      
 DECLARE @lvcT4SrcLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT4TgtLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT4ExtName NVARCHAR(100)      
 DECLARE @lvcT4BakName NVARCHAR(100)      
 DECLARE @lchT4Audited CHAR(1) --1.1       
 DECLARE @lvcT5SrcName NVARCHAR(100)      
 DECLARE @lvcT5TgtName NVARCHAR(100)      
 DECLARE @lvcT5SrcLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT5TgtLinkName NVARCHAR(100) --1.11      
 DECLARE @lvcT5ExtName NVARCHAR(100)      
 DECLARE @lvcT5BakName NVARCHAR(100)      
 DECLARE @lchT5Audited CHAR(1) --1.1       
 DECLARE @lvcAtxrSrcName NVARCHAR(100)      
 DECLARE @lvcAtxrTgtName NVARCHAR(100)      
 DECLARE @lvcAtxrExtName NVARCHAR(100)      
 DECLARE @lvcAtxrBakName NVARCHAR(100)      
 DECLARE @lvcAtxrXrefName NVARCHAR(100)      
 DECLARE @lvcAtntSrcName NVARCHAR(100)      
 DECLARE @lvcAtntTgtName NVARCHAR(100)      
 DECLARE @lvcAtntExtName NVARCHAR(100)      
 DECLARE @lvcAtntBakName NVARCHAR(100)      
 DECLARE @lvcAtndSrcName NVARCHAR(100)      
 DECLARE @lvcAtndTgtName NVARCHAR(100)      
 DECLARE @lvcAtndExtName NVARCHAR(100)      
 DECLARE @lvcAtndBakName NVARCHAR(100)      
 DECLARE @lvcPfxSrcName NVARCHAR(100)      
 DECLARE @lvcPfxTgtName NVARCHAR(100)      
 DECLARE @lvcPfxExtName NVARCHAR(100)      
 DECLARE @lvcPfxBakName NVARCHAR(100)      
 DECLARE @lvcValCtName NVARCHAR(100)      
 DECLARE @lvcRateDtmName NVARCHAR(100)      
 DECLARE @lvcRateCkName NVARCHAR(100)      
 DECLARE @lvcTgtTbtbTable NVARCHAR(100)      
 --1.1       
 DECLARE @lvcAtufSrcName NVARCHAR(100) --1.6      
 DECLARE @lvcAtufTgtName NVARCHAR(100) --1.6      
 DECLARE @lvcAtufExtName NVARCHAR(100) --1.6      
 DECLARE @lvcAtufBakName NVARCHAR(100) --1.6      
  --variable used to determine whether auditing is turned on.  --1.1       
 DECLARE @lnRetCd INT --1.1       
 DECLARE @lnmTxnId NUMERIC(10, 0) --1.1       
 DECLARE @lchAuditFlag CHAR(1) --1.1       
  --DECLARE @lnAuditInd         INT                              --1.1       
 DECLARE @lvcStoredProcName VARCHAR(100) --1.1       
 DECLARE @lvcUserName VARCHAR(255) --1.4       
  -- variables used for record counts       
 DECLARE @lnT1Ext INT      
 DECLARE @lnT2Ext INT      
 DECLARE @lnT3Ext INT      
 DECLARE @lnT4Ext INT      
 DECLARE @lnT5Ext INT      
 DECLARE @lnAtxr1Ext INT      
 DECLARE @lnAtxr2Ext INT      
 DECLARE @lnT1Bak INT      
 DECLARE @lnT2Bak INT      
 DECLARE @lnT3Bak INT      
 DECLARE @lnT4Bak INT      
 DECLARE @lnT5Bak INT
 DECLARE @lnPfxBak INT      
 DECLARE @lnAtxr1Bak INT      
 DECLARE @lnAtxr2Bak INT      
 DECLARE @lnAtntBak INT      
 DECLARE @lnAtndBak INT      
 DECLARE @lnAtufBak INT --1.6      
 DECLARE @lnT1Del INT      
 DECLARE @lnT2Del INT      
 DECLARE @lnT3Del INT      
 DECLARE @lnT4Del INT      
 DECLARE @lnT5Del INT      
 DECLARE @lnValCt INT
 DECLARE @lnValdtnCt INT      
 DECLARE @lnDelCt INT --1.1       
 DECLARE @lvcDelCt VARCHAR(15) --1.1       
  -- variables used for tracking duration on requests       
 DECLARE @ldtmBeginDtm DATETIME      
 DECLARE @ldtmEndDtm DATETIME      
  -- variable used for re-assigning date/time stamps on rate moves       
 DECLARE @ldtmCheckDtm DATETIME      
  -- variable used for tracking status of request being processed       
 DECLARE @lchStatus CHAR(2)      
 DECLARE @lchStatusAftUpd CHAR(2) --1.46      
  -- variables used for validation rule status       
 DECLARE @lvcFatalError VARCHAR(1)      
 DECLARE @lvcOtherError VARCHAR(1)      
  -- variables used for insert error checking      
 DECLARE @lnInsertError INT      
 DECLARE @lvcInsertMessage VARCHAR(4000)      
 DECLARE @lnBulkCopyError INT --1.13      
 DECLARE @lnBulkCopyErrorMessage NVARCHAR(1000) --1.13      
 DECLARE @lvcParmDefinition NVARCHAR(1000) --1.13  
 DECLARE @lnLogMsg NVARCHAR(1000)    
  --variables used for general error checking      
 DECLARE @lnGeneralError INT --1.13      
 DECLARE @lvcGeneralErrorMessage VARCHAR(4000) --1.13      
  --variables used for full table move      
 DECLARE @lchRequestFullTableMove CHAR(1) --1.14      
 DECLARE @lchRequestFullTableTruncate CHAR(1) -- 6/17/2016      
  -- variables used for cursor to get new source IDs for notes       
 DECLARE @ldtmOldAtxr DATETIME      
 DECLARE @ldtmNewAtxr DATETIME      
 DECLARE @ldtmNewDest DATETIME      
 DECLARE @ldtmLastAtxr DATETIME      
 DECLARE @ldtmLastAtxrNew DATETIME      
 DECLARE @ldtmATXR_SOURCE_ID DATETIME      
 DECLARE @ldtmATXR_DEST_ID DATETIME      
 DECLARE @lchATSY_ID CHAR(4)      
 DECLARE @lvcProc NVARCHAR(100)      
 DECLARE @lvcDateString VARCHAR(30)      
 DECLARE @BPAIndicator VARCHAR(10) -- Added on 9/05/2017.  -       
     
 --DECLARE @lvcSkip_Audit CHAR(1) -- Added on 03/21/2018. - SKIP_AUDIT                              
 --DECLARE @lvcDisable_fct_Trigger CHAR(1) -- Added on 09/04/2018.  - FOR DISABLE TRIGGER      
 DECLARE @lvcEnable_Audit CHAR(1) -- Added on 02/05/2021. - Enable Audit    
 DECLARE @lvcEnable_fct_Trigger CHAR(1) -- Added on 02/05/2021. - For Enable Trigger    
    
 DECLARE @lvcSRC_ENVIRONMENT_ID VARCHAR(10)      
 DECLARE @lvcPREFIX_TBL_NAME_ORGIN VARCHAR(50)      
 --DECLARE @lvcSkipValidation CHAR(1) --For Getting same version flag from Configuration master table - For BCN issue      
 DECLARE @lvcEnableValidation CHAR(1)
 DECLARE @lvAllowCrossVerMigration CHAR(1)      
       
 DECLARE @noOfInsertRow INT       
 DECLARE @RETURN_VALUE  INT      
 DECLARE @recordsInserted INT      
 DECLARE @lvSqlErrOutQry VARCHAR(8000)      
 DECLARE @lvcBulkSrcQualifier NVARCHAR(100)      
 DECLARE @lvcBulkTgtQualifier NVARCHAR(100)      
 DECLARE @ResultColumnlist NVARCHAR(4000)       
 DECLARE @alterrequest_add NVARCHAR(1000)       
 --DECLARE @lchSkipAudit CHAR(1)       
 Declare @lchEnableAudit CHAR(1)    
 DECLARE @lvcCMUDatabaseName VARCHAR(120)      
 DECLARE @lvcCMUSchemaName VARCHAR(100)      
 DECLARE @lvcCMUDatabaseVersion VARCHAR(15)          
      
 DECLARE @lvcRowNumber NVARCHAR(150)   
 DECLARE @lvcEnableLog CHAR(1)  --1.59 
      
       
  /**/      
      
 /* BEGIN MAIN BODY OF PROCEDURE*/      
 /**/      
 BEGIN TRY      
  PRINT '*****************************************************************************'      
  PRINT 'Re Enable facets triggers before migration process - START'      
      
  EXECUTE @lnRetCd = dbo.tzg_dmu_re_enable_facets_triggers      
      
  PRINT 'Re Enable facets triggers before migration process - END'      
  PRINT '*****************************************************************************'      
  SET @lvcDateString = CONVERT(VARCHAR(30), GETDATE(), 109)      
        
  SELECT @lvcMIG_SCHEMA_NAME = env.SCHEMA_NAME FROM tzgt_dmu_environment env WHERE DATABASE_NAME = DB_NAME()      
        
  --Skip validation      
  --SELECT TOP 1  @lvcSkipValidation = [VALUE] FROM tzgt_dmu_configuration WHERE DESCRIPTION = 'Skip_validation'        

  --Enable validation
  SELECT TOP 1  @lvcEnableValidation = [VALUE] FROM tzgt_dmu_configuration WHERE DESCRIPTION = 'ENABLE_VALIDATION'        
        
  -- US#18836:Fetching  BATCH SIZE for  BULK INSERT      
  SELECT TOP 1  @noOfInsertRow= CONVERT(INT,[VALUE]) FROM tzgt_dmu_configuration WHERE [DESCRIPTION]='BATCH_SIZE'        
      
  --Allow Cross Version Migration      
  SELECT TOP 1  @lvAllowCrossVerMigration = [VALUE] FROM tzgt_dmu_configuration WHERE [DESCRIPTION] = 'ALLOW_CROSS_VERSION_MIGRATION'      
        
  SELECT TOP 1 @lvcCMUDatabaseName = ISNULL(DATABASE_NAME,' '),       
      @lvcCMUSchemaName = ISNULL(SCHEMA_NAME,' '),       
      @lvcCMUDatabaseVersion = ISNULL(DATABASE_VERSION,' ')      
    FROM tzgt_dmu_environment envCMU      
    WHERE envCMU.ENVIRONMENT_ID = 'CMU'    
	
  SELECT TOP 1 @lvcEnableLog = ISNULL(ENABLE_LOGGING, ' ') FROM tzgt_dmu_environment envCMU      
	WHERE envCMU.ENVIRONMENT_ID = @pchTgtEnvironmentID    

  PRINT '*****************************************************************************'      
  PRINT 'Starting Migration Procedure: ' + @lvcDateString + ''      
  PRINT 'Target Environment = ' + @pchTgtEnvironmentID + ''      
  PRINT 'Priority = ' + @pchPriority + ''      
      
  -- CHECK TO SEE IF MIGRATIONS ON HOLD       
  IF EXISTS (      
    SELECT '1'      
    FROM tzgt_dmu_environment env      
    WHERE @pchTgtEnvironmentID = env.ENVIRONMENT_ID      
     AND env.CURRENT_STS = '02'      
    )      
  BEGIN  
       
   PRINT ' '      
   PRINT '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'      
   PRINT 'Migrations currently ON hold for environment.'      
  
   SET @lvcDateString = CONVERT(VARCHAR(30), GETDATE(), 109)      
      
   PRINT 'Exiting Migration Procedure ' + @lvcDateString + ''      
   PRINT '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'      
      
   RETURN      
  END      
      
  -- Create cursor to loop through pending requests for specified environment       
  -- and priority.       
  DECLARE csMigrationRequest CURSOR      
  FOR      
  SELECT REQUEST_ID      
   ,rqst.REQUEST_TYPE_ID      
   ,FIRST_TBL_NAME      
   ,ISNULL(SECOND_TBL_NAME, ' ')  AS SECOND_TBL_NAME      
   ,ISNULL(THIRD_TBL_NAME, ' ')  AS THIRD_TBL_NAME      
   ,ISNULL(FOURTH_TBL_NAME, ' ')  AS FOURTH_TBL_NAME      
   ,ISNULL(FIFTH_TBL_NAME, ' ')  AS FIFTH_TBL_NAME      
   ,ISNULL(FIRST_COL_NAME, ' ')  AS FIRST_COL_NAME      
   ,ISNULL(FIRST_COL_VAL, ' ')  AS FIRST_COL_VAL      
   ,ISNULL(SECOND_COL_NAME, ' ')  AS SECOND_COL_NAME      
   ,ISNULL(SECOND_COL_VAL, ' ')  AS SECOND_COL_VAL      
   ,ISNULL(THIRD_COL_NAME, ' ')  AS THIRD_COL_NAME      
   ,ISNULL(THIRD_COL_VAL, ' ')  AS THIRD_COL_VAL      
   ,ISNULL(FOURTH_COL_NAME, ' ')  AS FOURTH_COL_NAME      
   ,ISNULL(FOURTH_COL_VAL, ' ')  AS FOURTH_COL_VAL      
   ,ISNULL(FIFTH_COL_NAME, ' ')  AS FIFTH_COL_NAME      
   ,ISNULL(FIFTH_COL_VAL, ' ')  AS FIFTH_COL_VAL      
   ,ISNULL(FIRST_CONST_COL, ' ')  AS FIRST_CONST_COL      
   ,ISNULL(FIRST_CONST_VAL, ' ')  AS FIRST_CONST_VAL      
   ,ISNULL(SECOND_CONST_COL, ' ')  AS SECOND_CONST_COL      
   ,ISNULL(SECOND_CONST_VAL, ' ')  AS SECOND_CONST_VAL      
   ,ISNULL(PREFIX_TBL_NAME, ' ')  AS PREFIX_TBL_NAME      
   ,ISNULL(PREFIX_TYPE, ' ')   AS PREFIX_TYPE      
   ,ISNULL(MOVE_NOTES, 'N')   AS MOVE_NOTES
   ,ISNULL(TGT_BACKUP_REQ, 'Y') AS TGT_BACKUP_REQ    
   ,ISNULL(MOVE_USR_FLD, 'N')   AS MOVE_USR_FLD      
   ,ISNULL(ALLOW_DELETE, 'N')   AS ALLOW_DELETE      
   ,ISNULL(CHECK_VAL_CT, 'N')   AS CHECK_VAL_CT      
   ,ISNULL(REQUEST_VAL_CT, 0)   AS REQUEST_VAL_CT      
   ,e1.SERVER_NAME     AS SRC_SERVER_NAME      
   ,e1.DATABASE_NAME     AS SRC_DATABASE_NAME      
   ,e1.SCHEMA_NAME     AS SRC_SCHEMA_NAME      
   ,e1.DATABASE_VERSION   AS SRC_DATABASE_VERSION      
   ,e2.SERVER_NAME     AS TGT_SERVER_NAME      
   ,e2.DATABASE_NAME     AS TGT_DATABASE_NAME      
   ,e2.SCHEMA_NAME     AS TGT_SCHEMA_NAME      
   ,e2.DATABASE_VERSION   AS TGT_DATABASE_VERSION      
   ,e2.BULK_COPY      AS TGT_BULK_COPY      
   ,      
   ----------------------begin v1.11------------------------------------------------      
   (      
    SELECT SERVER_NAME      
    FROM tzgt_dmu_environment eCMU      
    WHERE eCMU.ENVIRONMENT_ID = 'CMU'      
    )        AS CMU_SERVER_NAME      
   ----------------------end v1.11------------------------------------------------      
   ,      
   REQUEST_STS     AS REQUEST_STS --1.15      
   ,e2.FULL_TABLE_TRUNCATE  AS FULL_TABLE_TRUNCATE      
   ,type.BpaTable     AS BpaTable -- 05/09/2017 - BPA Logic       
       
   --,e2.SKIP_AUDIT     AS TGT_ENVIRONMENT_SKIP_AUDIT -- Added on 03/21/2018        
   --,e2.DISABLE_FACETS_TRIGGER  AS DISABLE_FACETS_TRIGGER -- Added on 03/21/2018       
   ,e2.ENABLE_AUDIT AS TGT_ENVIRONMENT_ENABLE_AUDIT --Added on 02/05/2021    
   ,e2.ENABLE_FACETS_TRIGGER AS  ENABLE_FACETS_TRIGGER -- Added on 02/05/2021    
       
   ,rqst.SRC_ENVIRONMENT_ID  AS SRC_ENVIRONMENT_ID      
   ,class.REQUEST_CLASS_ID  AS REQUEST_CLASS_ID      
   ,class.ACTIVE     AS CLASS_STATUS      
   ,type.ACTIVE     AS TYPE_STATUS      
  FROM tzgt_dmu_migration_request rqst      
   INNER JOIN tzgt_dmu_environment e1 ON rqst.SRC_ENVIRONMENT_ID = e1.ENVIRONMENT_ID      
   INNER JOIN tzgt_dmu_environment e2 ON rqst.TGT_ENVIRONMENT_ID = e2.ENVIRONMENT_ID      
   INNER JOIN tzgt_dmu_request_type type ON rqst.REQUEST_TYPE_ID = type.REQUEST_TYPE_ID      
   INNER JOIN tzgt_dmu_request_class class on type.REQUEST_CLASS_ID = class.REQUEST_CLASS_ID      
   WHERE (rqst.REQUEST_STS = '02'      
     OR rqst.REQUEST_STS = '07'      
     OR rqst.REQUEST_STS = '09'      
     ) --1.15      
   AND rqst.TGT_ENVIRONMENT_ID = @pchTgtEnvironmentID      
   AND rqst.MOVE_TGT_DT <= GETDATE()      
   AND (rqst.REQUEST_PRIORITY = 'I'      
     OR (@pchPriority = 'D'      
     AND rqst.REQUEST_PRIORITY IN ('D','I')      
     )      
      OR (@pchPriority = 'W')      
    )      
  ORDER BY REQUEST_ID      
      
  -- Open cusror for processing --       
  OPEN csMigrationRequest      
      
  -- Fetch First Request --       
  FETCH csMigrationRequest      
  INTO @lnREQUEST_ID      
   ,@lvcREQUEST_TYPE_ID      
   ,@lvcFIRST_TBL_NAME      
   ,@lvcSECOND_TBL_NAME      
   ,@lvcTHIRD_TBL_NAME      
   ,@lvcFOURTH_TBL_NAME      
   ,@lvcFIFTH_TBL_NAME      
   ,@lvcFIRST_COL_NAME      
   ,@lvcFIRST_COL_VAL      
   ,@lvcSECOND_COL_NAME      
   ,@lvcSECOND_COL_VAL      
   ,@lvcTHIRD_COL_NAME      
   ,@lvcTHIRD_COL_VAL      
   ,@lvcFOURTH_COL_NAME      
   ,@lvcFOURTH_COL_VAL      
   ,@lvcFIFTH_COL_NAME      
   ,@lvcFIFTH_COL_VAL      
   ,@lvcFIRST_CONST_COL      
   ,@lvcFIRST_CONST_VAL      
   ,@lvcSECOND_CONST_COL      
   ,@lvcSECOND_CONST_VAL      
   ,@lvcPREFIX_TBL_NAME      
   ,@lvcPREFIX_TYPE      
   ,@lchMOVE_NOTES  
   ,@lchTGT_BACKUP_REQ    
   ,@lchMOVE_USR_FLD      
   ,@lchALLOW_DELETE --1.6      
   ,@lchCHECK_VAL_CT      
   ,@lnREQUEST_VAL_CT      
   ,@lvcSRC_SERVER_NAME      
   ,@lvcSRC_DATABASE_NAME      
   ,@lvcSRC_SCHEMA_NAME      
   ,@lvcSRC_DATABASE_VERSION      
   ,@lvcTGT_SERVER_NAME      
   ,@lvcTGT_DATABASE_NAME      
   ,@lvcTGT_SCHEMA_NAME      
   ,@lvcTGT_DATABASE_VERSION      
   ,@lchTGT_BULK_COPY --1.12        
   ,@lvcCMU_SERVER_NAME --1.11      
   ,@lvcREQUEST_STS      
   ,@lchRequestFullTableTruncate -- Added on 6/20/2016.        
   ,@BPAIndicator -- Added on 9/05/2017. For BPA Logic       
   --,@lvcSkip_Audit -- Added on 03/21/2018.  - FOR SKIP_AUDIT        
   --,@lvcDisable_fct_Trigger     
   ,@lvcEnable_Audit --Added on 02/05/2021 For Enable Audit    
   ,@lvcEnable_fct_Trigger--Added on 02/05/2021 For Enable Trigger    
   ,@lvcSRC_ENVIRONMENT_ID      
   ,@lvcREQUEST_CLASS_ID      
   ,@lvcCLASS_STATUS      
   ,@lvcTYPE_STATUS      
  --       
  -- Begin main loop to process each request       
  --       
  WHILE @@FETCH_STATUS = 0      
  BEGIN      
   BEGIN TRY --devFix1691      
    --SET @lchSkipAudit = @lvcSkip_Audit --SKIP_AUDIT      
 SET @lchEnableAudit = @lvcEnable_Audit --ENABLE_AUDIT             
    SET @ldtmBeginDtm = GETDATE()      
    SET @lvcDateString = CONVERT(VARCHAR(30), @ldtmBeginDtm, 109)      
    /* clear record counters*/      
    SET @lnT1Ext = 0      
    SET @lnT2Ext = 0      
    SET @lnT3Ext = 0      
    SET @lnT4Ext = 0      
    SET @lnT5Ext = 0      
    SET @lnAtxr1Ext = 0      
    SET @lnAtxr2Ext = 0      
    SET @lnT1Del = 0      
    SET @lnT2Del = 0      
    SET @lnT3Del = 0      
    SET @lnT4Del = 0      
    SET @lnT5Del = 0      
    SET @lnT1Bak = 0      
    SET @lnT2Bak = 0      
    SET @lnT3Bak = 0      
    SET @lnT4Bak = 0      
    SET @lnT5Bak = 0      
    SET @lnAtxr1Bak = 0      
    SET @lnAtxr2Bak = 0      
    SET @lnPfxBak = 0      
    SET @lnAtntBak = 0      
    SET @lnAtndBak = 0      
    SET @lnAtufBak = 0 --1.6      
    SET @lnValCt = 0  
	SET @lnValdtnCt  = 0   
    SET @lchT1Audited = 'N'      
    SET @lchT2Audited = 'N'      
    SET @lchT3Audited = 'N'      
    SET @lchT4Audited = 'N'      
    SET @lchT5Audited = 'N' --1.1      
    SET @lchAuditFlag = 'N'      
      
    PRINT ' '      
    PRINT '---------------------------------------------------------------'      
    PRINT 'Start processing on request ID #:' + CONVERT(VARCHAR(20), @lnREQUEST_ID)       
    PRINT 'Start processing on request Type ID #:' + CONVERT(VARCHAR(20), @lvcREQUEST_TYPE_ID)      
    PRINT 'Begin at: ' + @lvcDateString + ''      
              
    -- To Update the Start Time and Completion Time              
    UPDATE tzgt_dmu_migration_request set START_TIME= GETDATE()  WHERE REQUEST_ID = @lnREQUEST_ID      
      
    --Skip Inactive Request Class requests -1.37 Start      
    IF (@lvcCLASS_STATUS = 'N' OR @lvcTYPE_STATUS = 'N')      
    BEGIN      
    SET @lchStatus = '06'      
      
     INSERT INTO tzgt_dmu_message_log      
     SELECT @lnREQUEST_ID AS REQUEST_ID      
      ,'F' AS MESSAGE_TYPE      
      ,'Request Class or Type is inactive' AS MESSAGE_TEXT      
      ,GETDATE() AS DATETIME      
      
     GOTO UPDATE_AND_CONTINUE      
    END      
      
    --Skip Inactive Request Class requests -1.37 End      
      
    SELECT @bitSRC_REMOTE_SERVER = is_linked FROM sys.servers WHERE name = @lvcSRC_SERVER_NAME      
      
    SELECT @bitTGT_REMOTE_SERVER = is_linked FROM sys.servers WHERE name = @lvcTGT_SERVER_NAME      
      
    SELECT @lvcSRC_SERVER_NAME = dbo.tzgf_dmu_obj_format(@lvcSRC_SERVER_NAME);      
      
    SELECT @lvcSRC_DATABASE_NAME = dbo.tzgf_dmu_obj_format(@lvcSRC_DATABASE_NAME);      
      
    SELECT @lvcSRC_SCHEMA_NAME = dbo.tzgf_dmu_obj_format(@lvcSRC_SCHEMA_NAME);      
      
    SELECT @lvcTGT_SERVER_NAME = dbo.tzgf_dmu_obj_format(@lvcTGT_SERVER_NAME);      
      
    SELECT @lvcTGT_DATABASE_NAME = dbo.tzgf_dmu_obj_format(@lvcTGT_DATABASE_NAME);      
      
    SELECT @lvcTGT_SCHEMA_NAME = dbo.tzgf_dmu_obj_format(@lvcTGT_SCHEMA_NAME);      
    
	IF @lvcEnableLog = 'Y' 
	BEGIN
	      
    PRINT ' '      
    --PRINT 'Skip validation = ' + @lvcSkipValidation       
	PRINT 'Enable validation='+ @lvcEnableValidation
    PRINT 'Batch Size = ' + CONVERT(VARCHAR(20),@noOfInsertRow)       
    PRINT 'Allow Cross Version Migration = ' + @lvAllowCrossVerMigration       
    PRINT 'CMU Database Version = ' + @lvcCMUDatabaseVersion       
    PRINT 'CMU Server Name = ' + @lvcCMU_SERVER_NAME       
    PRINT 'CMU Database Name = ' + @lvcCMUDatabaseName       
    PRINT 'CMU Schema Name = ' + @lvcCMUSchemaName               
    PRINT 'Source Database Version = ' + @lvcSRC_DATABASE_VERSION      
    PRINT 'Target Database Version = ' + @lvcTGT_DATABASE_VERSION      
    PRINT 'Source Server Name = ' + @lvcSRC_SERVER_NAME      
    PRINT 'Source Database Name = ' + @lvcSRC_DATABASE_NAME      
    PRINT 'Source Schema Name = ' + @lvcSRC_SCHEMA_NAME      
    PRINT 'Target Server Name = ' + @lvcTGT_SERVER_NAME      
    PRINT 'Target Database Name = ' + @lvcTGT_DATABASE_NAME      
    PRINT 'Target Schema Name = ' + @lvcTGT_SCHEMA_NAME      
    PRINT 'Request Type Move Notes = ' + @lchMOVE_NOTES   
	PRINT 'Target Backup Required = ' + @lchTGT_BACKUP_REQ     
    PRINT 'Request Type Move User Field = ' + @lchMOVE_USR_FLD       
    PRINT 'Request Type Allow Delete = ' + @lchALLOW_DELETE        
    PRINT 'Request Type Bulk Copy Option for Target Env = ' + @lchTGT_BULK_COPY       
    PRINT 'Request Type Truncate or Delete option = ' + @lchRequestFullTableTruncate        
    PRINT 'Request Type BPA Indicator = ' + @BPAIndicator        
    --PRINT 'Request Type Skip Audit = ' + @lvcSkip_Audit         
    --PRINT 'Request Type Disable Trigger = ' + @lvcDisable_fct_Trigger       
	PRINT 'Request Type Enable Audit = ' + @lvcEnable_Audit         
    PRINT 'Request Type Enable Trigger = ' + @lvcEnable_fct_Trigger       
    
    PRINT '*****************************************************************************'      
    PRINT ' '    
	  
    END
	      
    /*Validate migration request with source and target environment version*/      
    IF @lvAllowCrossVerMigration = 'N'       
    BEGIN       
     IF @lvcSRC_DATABASE_VERSION <> @lvcTGT_DATABASE_VERSION       
     BEGIN      
      SET @lchStatus = '06'      
      INSERT INTO dbo.tzgt_dmu_message_log VALUES (@lnREQUEST_ID, 'F','SQL Error#: The cross version migration is not supported for the provided target environment'      
      ,GETDATE ())      
      GOTO UPDATE_AND_CONTINUE      
     END      
    END   
	
	IF (@lvcREQUEST_STS = '07' OR @lvcREQUEST_STS = '08' OR @lvcREQUEST_STS = '09' OR @lvcREQUEST_STS = '10')
			BEGIN
		        IF (@lvcREQUEST_TYPE_ID = '0000000134' OR @lvcREQUEST_TYPE_ID = 'BPA0000017' OR @lvcREQUEST_TYPE_ID = 'BPA0000018' OR @lvcREQUEST_TYPE_ID = 'NWX0000051' OR @lvcREQUEST_TYPE_ID = 'NWX0000052' OR @lvcREQUEST_TYPE_ID = 'WFL0000021')
			    BEGIN
			        SET @lchStatus = '06'
			        PRINT 'Error# :  Request Type ' + @lvcREQUEST_TYPE_ID + ' doesnot support Simulated Migration'

					INSERT INTO dbo.tzgt_dmu_message_log 
					VALUES (@lnREQUEST_ID, 'F',
					'SQL Error#:  Request Type ' + @lvcREQUEST_TYPE_ID + ' doesnot support Simulated Migration'
					,GETDATE ())
					GOTO UPDATE_AND_CONTINUE
			    END
			END 

            IF (@lvcREQUEST_STS = '07' OR @lvcREQUEST_STS = '08' OR @lvcREQUEST_STS = '09' OR @lvcREQUEST_STS = '10')
			BEGIN
		        IF @lchTGT_BACKUP_REQ = 'N'
			    BEGIN
			        SET @lchStatus = '06'
			        PRINT 'Error# :  Simulation Migration is not allowed when Target Backup required is set to NO'

					INSERT INTO dbo.tzgt_dmu_message_log 
					VALUES (@lnREQUEST_ID, 'F',
					'SQL Error#:  Simulation Migration is not allowed when Target Backup required is set to NO'
					,GETDATE ())
					GOTO UPDATE_AND_CONTINUE
			    END
			END
          
    IF (@BPAIndicator = 'Y')      
    BEGIN      
     PRINT 'BPA Logic starts'      
     IF NOT EXISTS (      
       SELECT 1      
       FROM tzgt_dmu_migration_request      
       WHERE REQUEST_STS = '11'      
        AND REQUEST_ID = @lnREQUEST_ID      
       )      
     BEGIN      
      --locking the current REQUEST_ID          
      UPDATE tzgt_dmu_migration_request SET REQUEST_STS = '11' WHERE REQUEST_ID = @lnREQUEST_ID      
      
      PRINT 'BPA Indicator available for the Request Type ID#:'  + CONVERT(VARCHAR(20), @lvcREQUEST_TYPE_ID)      
      
      IF (@lvcFIRST_TBL_NAME = 'BPA_RLGD_RUL_GRP_D')      
      BEGIN  
        
	IF @lvcEnableLog = 'Y' 
	BEGIN     
       PRINT '**************************************************************'      
       PRINT 'BPA - Prefix SP Calling section - Starts'                 
       PRINT 'BPA First Table Name = ' + @lvcFIRST_TBL_NAME      
       PRINT 'First Column Value Rule Group ID(RLGD_RUL_GRP_ID) = ' + @lvcFIRST_COL_VAL      
       PRINT 'Second Column Value Rule Type(RLTD_RULE_TYPE) = ' + @lvcSECOND_COL_VAL      
       PRINT 'Third Column Value Qualifier Type(QLTD_QUAL_TYPE) = ' + @lvcTHIRD_COL_VAL 
	   PRINT 'Fourth Column Value Base Service ID(SHDR_ID) = '+ @lvcFOURTH_COL_VAL           
       PRINT ' '      
    END
	  
       DECLARE @OUTRESULT_PREFIX CHAR(1)      
       DECLARE @OUTRESULT_PFX_ADDCNT INT      
       DECLARE @OUTRESULT_PFX_DELCNT INT      
      
       EXEC tzg_dmu_BPA_mig_ByPrefix @lnREQUEST_ID     
        ,@lvcREQUEST_TYPE_ID
        ,@lvcFIRST_TBL_NAME      
        ,@lvcFIRST_COL_VAL      
        ,@lvcSECOND_COL_VAL      
        ,@lvcTHIRD_COL_VAL 
		,@lvcFOURTH_COL_VAL     
        ,@lvcSRC_SERVER_NAME      
        ,@lvcSRC_DATABASE_NAME      
        ,@lvcSRC_SCHEMA_NAME      
        ,@lvcTGT_SERVER_NAME      
        ,@lvcTGT_DATABASE_NAME      
        ,@lvcTGT_SCHEMA_NAME      
        ,@OUTRESULT_PREFIX OUT      
        ,@OUTRESULT_PFX_ADDCNT OUT      
        ,@OUTRESULT_PFX_DELCNT OUT      
      
       SELECT @OUTRESULT_PREFIX      
      
       SELECT @lnT1Ext = @OUTRESULT_PFX_ADDCNT      
      
       SELECT @lnT1Bak = @OUTRESULT_PFX_DELCNT      
       
	  IF @lvcEnableLog = 'Y' 
	  BEGIN
       PRINT 'SP Execution status = ' + @OUTRESULT_PREFIX      
       PRINT 'Out result Add count = ' + CONVERT(VARCHAR(10), @lnT1Ext)      
       PRINT 'Out result Delete count = ' + CONVERT(VARCHAR(10), @lnT1Bak)      
       PRINT 'BPA - Prefix SP Calling section - Ends'      
       PRINT '**************************************************************'      
      END

       IF (@OUTRESULT_PREFIX = 'E')      
       BEGIN      
        SET @lchStatus = '06'      
       END      
       ELSE      
       BEGIN     
	   IF (@OUTRESULT_PREFIX = 'S')
	   BEGIN
		SET @lchStatus = '03'
	   END
	   ELSE
	   IF (@OUTRESULT_PREFIX = 'V')
	   BEGIN
		SET @lchStatus = '05'
	   END
	   ELSE 
        SET @lchStatus = '03'      
       END      
      
       GOTO UPDATE_AND_CONTINUE      
      
       PRINT 'FETCH next migration request to process'      
      END      
      
      IF (@lvcFIRST_TBL_NAME = 'BPA_QLGR_QGRP_D')      
      BEGIN      
	  
	  IF @lvcEnableLog = 'Y' 
	  BEGIN

       PRINT '**************************************************************'      
       PRINT 'BPA - Qualifier SP Calling section - Starts'      
       PRINT 'BPA First Table name = ' + @lvcFIRST_TBL_NAME             
       PRINT 'First Column Value Qualifier GroupDesc (QLGR_GRP_DESC) = ' + @lvcFIRST_COL_VAL      
       PRINT 'Second Column Value Qualifier Type( QLTD_QUAL_TYPE) = ' + @lvcSECOND_COL_VAL      
       PRINT 'Third Column Value Rule type (RLTD_RULE_TYPE) = ' + @lvcTHIRD_COL_VAL      
       PRINT ' '  
	   
	  END    
             
       DECLARE @OUTRESULT_QGROUP CHAR(1)      
       DECLARE @OUTRESULT_QGP_ADDCNT INT      
       DECLARE @OUTRESULT_QGP_DELCNT INT      
       DECLARE @OUTRESULT_QGP_ACTCNT INT      
      
       EXEC tzg_dmu_BPA_mig_ByQualifierGrp @lvcFIRST_COL_VAL      
        ,@lvcSECOND_COL_VAL      
        ,@lvcTHIRD_COL_VAL      
        ,@lvcSRC_SERVER_NAME      
        ,@lvcSRC_DATABASE_NAME      
        ,@lvcSRC_SCHEMA_NAME      
        ,@lvcTGT_SERVER_NAME      
        ,@lvcTGT_DATABASE_NAME      
        ,@lvcTGT_SCHEMA_NAME      
        ,@lnREQUEST_ID      
        ,@lvcREQUEST_TYPE_ID       
        ,@OUTRESULT_QGROUP OUT      
        ,@OUTRESULT_QGP_ADDCNT OUT      
        ,@OUTRESULT_QGP_DELCNT OUT      
        ,@OUTRESULT_QGP_ACTCNT OUT      
      
       SELECT @OUTRESULT_QGROUP      
      
       SELECT @lnT1Ext = @OUTRESULT_QGP_ADDCNT      
      
       SELECT @lnT1Bak = @OUTRESULT_QGP_DELCNT      
      
       SELECT @lnValCt = @OUTRESULT_QGP_ACTCNT      
      
	  IF @lvcEnableLog = 'Y' 
	  BEGIN
       PRINT 'SP Execution status = ' + @OUTRESULT_QGROUP      
       PRINT 'Out result Add count = ' + CONVERT(VARCHAR(10), @lnT1Ext)      
       PRINT 'Out result Delete count = ' + CONVERT(VARCHAR(10), @lnT1Bak)      
       PRINT 'Out result Actual count = ' + CONVERT(VARCHAR(10), @lnValCt)      
       PRINT 'BPA - Qualifier Group SP Calling section - Ends'      
       PRINT '**************************************************************'      
      END
	         
        IF (@OUTRESULT_QGROUP = 'E')      
       BEGIN      
        SET @lchStatus = '06'      
       END      
       ELSE      
       BEGIN     
	   IF (@OUTRESULT_QGROUP = 'S')
	   BEGIN
		SET @lchStatus = '03'
	   END
	   ELSE
	   IF (@OUTRESULT_QGROUP = 'V')
	   BEGIN
		SET @lchStatus = '05'
	   END
	   ELSE 
        SET @lchStatus = '03'      
       END       
      
       GOTO UPDATE_AND_CONTINUE      
      
       --RETURN;      
       PRINT 'FETCH next migration request to process'      
      END      
     END      
     ELSE      
     BEGIN      
      GOTO BPA_FETCH_NXT_RECORD      
     END      
       --IF ELSE REQUEST_STS='11' CONDITION END      
    END      
      
    -- Drop any tables that may have been created by prior run for same request ID      
    IF (@lvcREQUEST_STS <> '09') --1.15      
    BEGIN      
     DECLARE csTablePurge CURSOR      
     FOR      
     SELECT name FROM sysobjects      
        WHERE name LIKE 'tzgt_dmut_' + CONVERT(VARCHAR(20), @lnREQUEST_ID) + '_%'      
        ORDER BY name      
      
     OPEN csTablePurge      
      
     FETCH csTablePurge      
     INTO @lvcTABLE_NAME      
      
     PRINT ' '      
      
     WHILE @@FETCH_STATUS = 0      
     BEGIN      
      SET @lvcSqlString = N'DROP TABLE ' + @lvcTABLE_NAME      
      
      PRINT @lvcSqlString      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
      
      ----------------------end v1.13--------------------------------------------------      
      FETCH csTablePurge      
      INTO @lvcTABLE_NAME      
     END      
      
     DEALLOCATE csTablePurge      
      
     /*clear previous work from these work tables for this request ID*/      
           
     DELETE FROM tzgt_dmu_rate_keys WHERE REQUEST_ID = @lnREQUEST_ID      
      
     /*1.1*/      
     DELETE FROM tzgt_dmu_pdrt_ck_keys WHERE REQUEST_ID = @lnREQUEST_ID        
      
     /*1.1*/      
     DELETE FROM tzgt_dmu_note_keys WHERE REQUEST_ID = @lnREQUEST_ID       
      
     /*1.1*/      
     DELETE FROM tzgt_dmu_message_log WHERE REQUEST_ID = @lnREQUEST_ID      
      
     /* 1.6.1 */      
     DELETE FROM tzgt_dmu_atxr_stage WHERE REQUEST_ID = @lnREQUEST_ID      
      
     /* 1.6.1 */      
     DELETE FROM tzgt_dmu_atuf_stage WHERE REQUEST_ID = @lnREQUEST_ID      
    END      
          
    PRINT ' '      
      
    --============================MV TABLE STRUCTURE VALIDATION=============1.23===================================================xxx      
    --IF @lvcSkipValidation <> 'Y'      
	IF @lvcEnableValidation <> 'N'      
    BEGIN      
     IF (OBJECT_ID('tempdb..#tzgt_dmu_ResultSetTableNW') IS NOT NULL)      
     BEGIN      
      DROP TABLE #tzgt_dmu_ResultSetTableNW      
     END      
      
     CREATE TABLE #tzgt_dmu_ResultSetTableNW       
     (      
       ID INT IDENTITY(1, 1)      
      ,RequestTypeId VARCHAR(10)      
      ,SrcEnvirmntId VARCHAR(10)      
      ,TrgEnvirmntId VARCHAR(10)      
      ,ErrorMsg VARCHAR(1500)      
      ,ErrorType CHAR(1)      
      ,ColumnList VARCHAR(4000)      
      ,TableName VARCHAR(100)      
     );      
      
     DECLARE @ErrorType CHAR(1)      
     DECLARE @ErrorMsg VARCHAR(1500)      
     DECLARE @IsValiadationErr CHAR(1)      
     DECLARE @ColumnList VARCHAR(4000)      
     DECLARE @TblCntIniVal INT = 1      
     DECLARE @TblCnt INT      
     
	 IF @lvcEnableLog = 'Y' 
	 BEGIN 
		PRINT ' '      
		PRINT 'Starting Checks For Req type Batch Validation: ' + CONVERT(VARCHAR(20), @lnREQUEST_ID) + ' at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     END

	 INSERT INTO #tzgt_dmu_ResultSetTableNW      
     EXECUTE tzg_dmu_Reqtyp_BatchValidation       
        @lvcREQUEST_TYPE_ID      
       ,@lvcSRC_ENVIRONMENT_ID      
       ,@pchTgtEnvironmentID      
       ,'Y'      
      
     IF @lvcEnableLog = 'Y' 
     BEGIN      
		PRINT 'Ending Checks For Req type Batch Validation: ' + CONVERT(VARCHAR(20), @lnREQUEST_ID) + ' at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
		PRINT ' '      
     END
	       
     SELECT @TblCnt = COUNT(ID) FROM #tzgt_dmu_ResultSetTableNW      
      
     SELECT * FROM #tzgt_dmu_ResultSetTableNW      
      
     IF @TblCnt > 0      
     BEGIN      
      WHILE @TblCntIniVal <= @TblCnt      
      BEGIN      
       SELECT @ErrorType = ErrorType FROM #tzgt_dmu_ResultSetTableNW      
         WHERE ID = @TblCntIniVal      
      
       SELECT @ErrorMsg = ErrorMsg FROM #tzgt_dmu_ResultSetTableNW      
         WHERE ID = @TblCntIniVal      
      
       IF @ErrorType = 'E'      
       BEGIN      
        SET @IsValiadationErr = 'Y'      
        SET @lchStatus = '06'      
      
        PRINT 'There is error occured in source or target table structure or schema'      
        PRINT @ErrorMsg      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,SUBSTRING(@ErrorMsg, 1, 225)      
          ,GETDATE()      
           )      
       END      
       SET @TblCntIniVal = @TblCntIniVal + 1;      
      END      
      
      -- DELETE FROM @ltv_DatalenDiff      
      IF @IsValiadationErr = 'Y'      
      BEGIN      
        PRINT @IsValiadationErr      
      
        SET @IsValiadationErr = 'N'      
      
        GOTO UPDATE_AND_CONTINUE      
      END      
     END      
    END      
    --============================ MV TABLE STRUCTURE VALIDATION==========1.23======================================================      
    ----------------------begin v1.14------------------------------------------------ // Check for full table move.      
    IF (      
      LTRIM(RTRIM(@lvcFIRST_COL_VAL)) = ''      
      OR LTRIM(RTRIM(@lvcFIRST_COL_VAL)) = '%'      
      )      
     AND (      
      LTRIM(RTRIM(@lvcSECOND_COL_VAL)) = ''      
      OR LTRIM(RTRIM(@lvcSECOND_COL_VAL)) = '%'      
      )      
     AND (      
      LTRIM(RTRIM(@lvcTHIRD_COL_VAL)) = ''      
      OR LTRIM(RTRIM(@lvcTHIRD_COL_VAL)) = '%'      
      )      
     AND (      
      LTRIM(RTRIM(@lvcFOURTH_COL_VAL)) = ''      
      OR LTRIM(RTRIM(@lvcFOURTH_COL_VAL)) = '%'      
      )      
     AND (      
      LTRIM(RTRIM(@lvcFIFTH_COL_VAL)) = ''      
      OR LTRIM(RTRIM(@lvcFIFTH_COL_VAL)) = '%'      
      )      
     AND (      
      LTRIM(RTRIM(@lvcFIRST_CONST_VAL)) = ''      
      OR LTRIM(RTRIM(@lvcFIRST_CONST_VAL)) = '%'      
      )      
     AND (      
      LTRIM(RTRIM(@lvcSECOND_CONST_VAL)) = ''      
      OR LTRIM(RTRIM(@lvcSECOND_CONST_VAL)) = '%'      
      )      
    BEGIN      
     SET @lchRequestFullTableMove = 'Y'      
    END      
    ELSE      
    BEGIN      
     SET @lchRequestFullTableMove = 'N'      
    END      
      
    ----------------------end v1.14--------------------------------------------------      
    /*1.4, ensure this flag is initialized for each request*/      
    /* reset status tracking variable*/      
    IF (@lvcREQUEST_STS = '02')      
     SET @lchStatus = '03'      
    ELSE      
     SET @lchStatus = '08' --1.15      
      
    /* this is normal success code, will be overridden by other steps if needed*/      
    /**/      
    /*  Set all table names for use in later steps*/      
    /*  The source qualifiers section will vary signicantly by*/      
    /*  database platform.*/      
    /**/      
    --SET @lvcSrcQualifier = '"' + @lvcSRC_SERVER_NAME + N'".' + @lvcSRC_DATABASE_NAME + '.' + @lvcSRC_SCHEMA_NAME + '.'      
    SET @lvcSrcQualifier = @lvcSRC_SERVER_NAME + N'.' + @lvcSRC_DATABASE_NAME + '.' + @lvcSRC_SCHEMA_NAME + '.'      
    SET @lvcTgtQualifier = @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.'      
    --1.11            
    SET @lvcSrcLink = @lvcSRC_DATABASE_NAME + N'.' + @lvcSRC_SCHEMA_NAME + '.'      
    SET @lvcTgtLink = @lvcTGT_DATABASE_NAME + N'.' + @lvcTGT_SCHEMA_NAME + '.'      
    --      
    SET @lvcTempQualifier = @lvcMIG_SCHEMA_NAME + N'.tzgt_dmut_' + CONVERT(NVARCHAR(10), @lnREQUEST_ID)      
    ----------------------begin v1.11------------------------------------------------      
    --Determine if Server is Remote Server.        
    --Exclude Migration Requests from OpenQuery that have CK's to keep old syntax for joining tables across Linked Servers      
    SET @lvcT1SrcLinkName = @lvcSrcLink + @lvcFIRST_TBL_NAME      
    SET @lvcT1SrcName = @lvcSrcQualifier + @lvcFIRST_TBL_NAME      
    SET @lvcT1TgtLinkName = @lvcTgtLink + @lvcFIRST_TBL_NAME      
    SET @lvcT1TgtName = @lvcTgtQualifier + @lvcFIRST_TBL_NAME      
      
    --US#18836:Assign Server and database name        
    SET @lvcBulkSrcQualifier = @lvcSRC_SERVER_NAME + N'.' + @lvcSRC_DATABASE_NAME + '.'       
SET @lvcBulkTgtQualifier = @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.'       
      
    SELECT @lvcCMU_DATABASE_NAME = DB_NAME()      
      
    ---------------------end v1.11------------------------------------------------      
    --Check whether user has overridden the default behavior of turning off Facets      --1.4       
    -- auditing for the duration of this request.                                       --1.4       
       
   -- IF @lchSkipAudit = 'Y' --1.4       
   IF @lchEnableAudit = 'N'    
    BEGIN      
     IF @lvcFIRST_TBL_NAME <> ' '      
      --AND @lvcDisable_fct_Trigger = 'Y'      
   AND @lvcEnable_fct_Trigger = 'N'    
     BEGIN      
      PRINT ' '      
      PRINT 'FIRST TABLE TRIGGER DISABLE - START'      
      PRINT 'TABLE NAME: ' + @lvcFIRST_TBL_NAME      
      
      SET @lvcSqlString = ''      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_disable_trigger @lvcFIRST_TBL_NAME'      
      SET @lvcParmDefinition = N'@lvcFIRST_TBL_NAME NVARCHAR(100)'      
      
      PRINT @lvcSqlString      
      
      EXECUTE sp_executesql @lvcSqlString      
       ,@lvcParmDefinition      
       ,@lvcFIRST_TBL_NAME      
      
      --Script to maintaine the disable table triggers informations in CMU table - tzgt_dmu_facet_disabletrigger      
      IF EXISTS (      
        SELECT *      
        FROM sys.objects      
        WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
        )      
      BEGIN      
       INSERT INTO dbo.tzgt_dmu_facet_disabletrigger      
       VALUES (      
        @lvcTGT_SERVER_NAME      
        ,@lvcTGT_DATABASE_NAME      
        ,@lvcTGT_SCHEMA_NAME      
        ,@lvcFIRST_TBL_NAME   
        ,'DISABLED'      
        ,@lnREQUEST_ID      
        ,GETDATE()      
        )      
      END      
      ELSE      
      BEGIN      
       PRINT 'TABLE (tzgt_dmu_facet_disabletrigger) NOT PRESENT TO LOG ENABLE/DISABLE DETAILS'      
      END      
      
      --select * from dbo.tzgt_dmu_facet_disabletrigger       
      PRINT 'FIRST TABLE TRIGGER DISABLE - END'      
     END      
      
     /*1.4*/      
     /*Determine if Auditing is turned on for the target environment*/      
     /*Build string variable containing full name of contrived key proc.*/      
     SET @lvcStoredProcName = @lvcTgtQualifier + 'CERSP_TXN1_GET_TXN1_ID'      
      
     --Execute proc in target environment       
     EXECUTE @lnRetCd = @lvcStoredProcName @lnmTxnId OUT      
      ,@lchAuditFlag OUT      
      ,@lvcUserName OUT      
      
     --1.4       
     -- If auditing is turned on for target environment      
     IF @lchAuditFlag = 'Y'      
     BEGIN      
      SET @lvcTgtTbtbTable = @lvcTgtQualifier + N'CER_TBTB_INDICATOR'      
      
      --Turn off auditing for this table.       
      PRINT 'TURN OFF AUDIT PROCEDURE CALLED - tzg_dmu_set_audit - START'      
      
      EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'OFF'      
       ,@lvcFIRST_TBL_NAME      
       ,@lvcTgtTbtbTable      
       ,@lchT1Audited OUT      
      
      PRINT 'TURN OFF AUDIT PROCEDURE CALLED - tzg_dmu_set_audit - END'      
      PRINT ' '      
     END      
    END      
      
    /*1.4*/      
    /*------------end v1.1----------------------------------------------------------*/      
    SET @lvcT1ExtName = @lvcTempQualifier + '_t1_add'      
    SET @lvcT1BakName = @lvcTempQualifier + '_t1_bak'      
    SET @lvcValCtName = @lvcTempQualifier + '_val_ct'      
      
    -- Conditionally populate 2nd thru 5th table names if they have been       
    -- specified in the request.       
    IF @lvcSECOND_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
      
     --IF @lvcDisable_fct_Trigger = 'Y'      
     -- AND @lchSkipAudit = 'Y'    
  IF @lvcEnable_fct_Trigger = 'N'      
      AND @lchEnableAudit = 'N'      
     BEGIN      
      PRINT 'SECOND TABLE TRIGGER DISABLE - START'      
      PRINT 'TABLE NAME: ' + @lvcSECOND_TBL_NAME      
      
      SET @lvcSqlString = ''      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_disable_trigger @lvcSECOND_TBL_NAME'      
 SET @lvcParmDefinition = N'@lvcSECOND_TBL_NAME NVARCHAR(100)'      
      
      PRINT @lvcSqlString      
      
      EXECUTE sp_executesql @lvcSqlString      
       ,@lvcParmDefinition      
       ,@lvcSECOND_TBL_NAME      
      
      --LOG ENABLE/DISABLE TRIGGER DETAILS - START      
      IF EXISTS (      
        SELECT *      
        FROM sys.objects      
        WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
        )      
      BEGIN      
       INSERT INTO dbo.tzgt_dmu_facet_disabletrigger      
       VALUES (      
        @lvcTGT_SERVER_NAME      
        ,@lvcTGT_DATABASE_NAME      
        ,@lvcTGT_SCHEMA_NAME      
        ,@lvcSECOND_TBL_NAME      
        ,'DISABLED'      
        ,@lnREQUEST_ID      
        ,GETDATE()      
        )      
      END      
      ELSE      
      BEGIN      
       PRINT 'TABLE (tzgt_dmu_facet_disabletrigger) NOT PRESENT TO LOG ENABLE/DISABLE TRIGGER DETAILS'      
      END      
      
      --LOG ENABLE/DISABLE TRIGGER DETAILS - END      
      PRINT 'SECOND TABLE TRIGGER DISABLE - END'      
     END      
      
     SET @lvcT2SrcLinkName = @lvcSrcLink + @lvcSECOND_TBL_NAME --1.11      
     SET @lvcT2SrcName = @lvcSrcQualifier + @lvcSECOND_TBL_NAME      
     SET @lvcT2TgtLinkName = @lvcTgtLink + @lvcSECOND_TBL_NAME --1.11      
     SET @lvcT2TgtName = @lvcTgtQualifier + @lvcSECOND_TBL_NAME      
     SET @lvcT2ExtName = @lvcTempQualifier + '_t2_add'      
     SET @lvcT2BakName = @lvcTempQualifier + '_t2_bak'      
      
     IF @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'           BEGIN      
      SET @lvcRateCkName = @lvcTempQualifier + N'_rate_ck'      
     END      
      
     IF @lchAuditFlag = 'Y'      
     BEGIN      
      EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'OFF'      
       ,@lvcSECOND_TBL_NAME      
       ,@lvcTgtTbtbTable      
       ,@lchT2Audited OUT      
     END      
      
     PRINT ' '      
    END      
      
    IF @lvcTHIRD_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
      
     --IF @lvcDisable_fct_Trigger = 'Y'      
     -- AND @lchSkipAudit = 'Y'    
  IF @lvcEnable_fct_Trigger = 'N'      
      AND @lchEnableAudit = 'N'        
     BEGIN      
      PRINT 'THIRD TABLE TRIGGER DISABLE - START'      
      PRINT 'TABLE NAME: ' + @lvcTHIRD_TBL_NAME      
      
      SET @lvcSqlString = ''      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_disable_trigger @lvcTHIRD_TBL_NAME'      
      SET @lvcParmDefinition = N'@lvcTHIRD_TBL_NAME NVARCHAR(100)'      
      
      PRINT @lvcSqlString      
      
      EXECUTE sp_executesql @lvcSqlString      
       ,@lvcParmDefinition      
       ,@lvcTHIRD_TBL_NAME      
      
      --LOG ENABLE/DISABLE TRIGGER DETAILS - START      
      IF EXISTS (      
        SELECT *      
        FROM sys.objects      
        WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
        )      
      BEGIN      
       INSERT INTO dbo.tzgt_dmu_facet_disabletrigger      
       VALUES (      
        @lvcTGT_SERVER_NAME      
        ,@lvcTGT_DATABASE_NAME      
        ,@lvcTGT_SCHEMA_NAME      
        ,@lvcTHIRD_TBL_NAME      
        ,'DISABLED'      
        ,@lnREQUEST_ID      
        ,GETDATE()      
        )      
      END      
      ELSE      
      BEGIN      
       PRINT 'TABLE (tzgt_dmu_facet_disabletrigger) NOT PRESENT TO LOG ENABLE/DISABLE TRIGGER DETAILS'      
      END      
      
      --LOG ENABLE/DISABLE TRIGGER DETAILS - END      
      PRINT 'THIRD TABLE TRIGGER DISABLE - END'      
     END      
      
     SET @lvcT3SrcLinkName = @lvcSrcLink + @lvcTHIRD_TBL_NAME --1.11      
     SET @lvcT3SrcName = @lvcSrcQualifier + @lvcTHIRD_TBL_NAME      
     SET @lvcT3TgtLinkName = @lvcTgtLink + @lvcTHIRD_TBL_NAME --1.11      
     SET @lvcT3TgtName = @lvcTgtQualifier + @lvcTHIRD_TBL_NAME      
     SET @lvcT3ExtName = @lvcTempQualifier + N'_t3_add'      
     SET @lvcT3BakName = @lvcTempQualifier + N'_t3_bak'      
      
     IF @lvcTHIRD_TBL_NAME = N'CMC_PDRA_RATE_AGES'      
     BEGIN      
      SET @lvcRateDtmName = @lvcTempQualifier + N'_rate_dtm'      
     END      
      
     IF @lchAuditFlag = 'Y'      
     BEGIN      
      EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'OFF'      
       ,@lvcTHIRD_TBL_NAME      
       ,@lvcTgtTbtbTable      
       ,@lchT3Audited OUT      
     END      
      
     PRINT ' '      
    END      
      
    IF @lvcFOURTH_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
      
     --IF @lvcDisable_fct_Trigger = 'Y'      
     -- AND @lchSkipAudit = 'Y'    
  IF @lvcEnable_fct_Trigger = 'N'      
      AND @lchEnableAudit = 'N'      
     BEGIN      
      PRINT 'FOURTH TABLE TRIGGER DISABLE - START'      
      PRINT 'TABLE NAME: ' + @lvcFOURTH_TBL_NAME      
      
      SET @lvcSqlString = ''      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_disable_trigger @lvcFOURTH_TBL_NAME'      
      SET @lvcParmDefinition = N'@lvcFOURTH_TBL_NAME NVARCHAR(100)'      
      
      PRINT @lvcSqlString      
      
      EXECUTE sp_executesql @lvcSqlString      
       ,@lvcParmDefinition      
       ,@lvcFOURTH_TBL_NAME      
      
      --LOG ENABLE/DISABLE TRIGGER DETAILS - START      
      IF EXISTS (      
        SELECT *      
        FROM sys.objects      
        WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
        )      
      BEGIN      
       INSERT INTO dbo.tzgt_dmu_facet_disabletrigger      
       VALUES (      
        @lvcTGT_SERVER_NAME      
        ,@lvcTGT_DATABASE_NAME      
        ,@lvcTGT_SCHEMA_NAME      
        ,@lvcFOURTH_TBL_NAME      
        ,'DISABLED'      
        ,@lnREQUEST_ID      
        ,GETDATE()      
        )      
      END      
      ELSE      
      BEGIN      
       PRINT 'TABLE (tzgt_dmu_facet_disabletrigger) NOT PRESENT TO LOG ENABLE/DISABLE TRIGGER DETAILS'      
      END      
      
      --LOG ENABLE/DISABLE TRIGGER DETAILS - END      
      PRINT 'FOURTH TABLE TRIGGER DISABLE - END'      
     END      
      
     SET @lvcT4SrcLinkName = @lvcSrcLink + @lvcFOURTH_TBL_NAME --1.11      
     SET @lvcT4SrcName = @lvcSrcQualifier + @lvcFOURTH_TBL_NAME      
     SET @lvcT4TgtLinkName = @lvcTgtLink + @lvcFOURTH_TBL_NAME --1.11      
     SET @lvcT4TgtName = @lvcTgtQualifier + @lvcFOURTH_TBL_NAME      
     SET @lvcT4ExtName = @lvcTempQualifier + N'_t4_add'      
     SET @lvcT4BakName = @lvcTempQualifier + N'_t4_bak'      
      
     IF @lchAuditFlag = 'Y'      
     BEGIN      
      EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'OFF'      
       ,@lvcFOURTH_TBL_NAME      
       ,@lvcTgtTbtbTable      
       ,@lchT4Audited OUT      
     END      
      
     PRINT ' '      
    END      
      
    IF @lvcFIFTH_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
      
     --IF @lvcDisable_fct_Trigger = 'Y'      
     -- AND @lchSkipAudit = 'Y'    
   IF @lvcEnable_fct_Trigger = 'N'      
      AND @lchEnableAudit = 'N'       
     BEGIN      
      PRINT 'FIFTH TABLE TRIGGER DISABLE - START'      
      PRINT 'TABLE NAME: ' + @lvcFIFTH_TBL_NAME      
      
      SET @lvcSqlString = ''      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_disable_trigger @lvcFIFTH_TBL_NAME'      
      SET @lvcParmDefinition = N'@lvcFIFTH_TBL_NAME NVARCHAR(100)'      
      
      PRINT @lvcSqlString      
      
      EXECUTE sp_executesql @lvcSqlString      
       ,@lvcParmDefinition      
       ,@lvcFIFTH_TBL_NAME      
      
      --LOG ENABLE/DISABLE TRIGGER DETAILS - START      
      IF EXISTS (      
        SELECT *      
        FROM sys.objects      
        WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
        )      
      BEGIN      
       INSERT INTO dbo.tzgt_dmu_facet_disabletrigger      
       VALUES (      
        @lvcTGT_SERVER_NAME      
        ,@lvcTGT_DATABASE_NAME      
        ,@lvcTGT_SCHEMA_NAME      
        ,@lvcFIFTH_TBL_NAME      
        ,'DISABLED'      
        ,@lnREQUEST_ID      
        ,GETDATE()      
        )      
      END      
      ELSE      
      BEGIN      
       PRINT 'TABLE (tzgt_dmu_facet_disabletrigger) NOT PRESENT TO LOG ENABLE/DISABLE TRIGGER DETAILS'      
      END      
      
      --LOG ENABLE/DISABLE TRIGGER DETAILS - END      
      PRINT 'FIFTH TABLE TRIGGER DISABLE - END'      
     END      
      
     SET @lvcT5SrcLinkName = @lvcSrcLink + @lvcFIFTH_TBL_NAME --1.11      
     SET @lvcT5SrcName = @lvcSrcQualifier + @lvcFIFTH_TBL_NAME      
     SET @lvcT5TgtLinkName = @lvcTgtLink + @lvcFIFTH_TBL_NAME --1.11      
     SET @lvcT5TgtName = @lvcTgtQualifier + @lvcFIFTH_TBL_NAME      
     SET @lvcT5ExtName = @lvcTempQualifier + N'_t5_add'      
     SET @lvcT5BakName = @lvcTempQualifier + N'_t5_bak'      
      
     IF @lchAuditFlag = 'Y'      
     BEGIN      
      EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'OFF'      
       ,@lvcFIFTH_TBL_NAME      
       ,@lvcTgtTbtbTable      
       ,@lchT5Audited OUT      
     END      
      
     PRINT ' '      
    END      
      
    ----------------------begin v1.6------------------------------------------------      
    -- If the migration type requires that note attachments or user field      
    -- be moved along with configuration data, then set up those table names, too.      
    IF @lchMOVE_NOTES = 'Y'      
     OR @lchMOVE_USR_FLD = 'Y'      
    BEGIN      
     SET @lvcAtxrSrcName = @lvcSrcQualifier + N'CER_ATXR_ATTACH_U'      
     SET @lvcAtxrTgtName = @lvcTgtQualifier + N'CER_ATXR_ATTACH_U'      
     SET @lvcAtxrExtName = @lvcTempQualifier + N'_atxr_add'      
     SET @lvcAtxrBakName = @lvcTempQualifier + N'_atxr_bak'      
     SET @lvcAtxrXrefName = @lvcTempQualifier + N'_atxr_xref'      
    END      
      
    -- If the migration type requires that note attachments be moved       
    -- along with configuration data, then set up those table names, too.       
    IF @lchMOVE_NOTES = 'Y'      
    BEGIN      
     SET @lvcAtntSrcName = @lvcSrcQualifier + N'CER_ATNT_NOTE_D'      
     SET @lvcAtntTgtName = @lvcTgtQualifier + N'CER_ATNT_NOTE_D'      
     SET @lvcAtntExtName = @lvcTempQualifier + N'_atnt_add'      
     SET @lvcAtntBakName = @lvcTempQualifier + N'_atnt_bak'      
     SET @lvcAtndSrcName = @lvcSrcQualifier + N'CER_ATND_NOTE_C'      
     SET @lvcAtndTgtName = @lvcTgtQualifier + N'CER_ATND_NOTE_C'      
     SET @lvcAtndExtName = @lvcTempQualifier + N'_atnd_add'      
     SET @lvcAtndBakName = @lvcTempQualifier + N'_atnd_bak'      
    END      
      
    -- If the migration type requires that user field be moved along       
    -- with configuration data, then set up those table names, too.      
    IF @lchMOVE_USR_FLD = 'Y'      
    BEGIN      
     SET @lvcAtufSrcName = @lvcSrcQualifier + N'CER_ATUF_USERFLD_D'      
     SET @lvcAtufTgtName = @lvcTgtQualifier + N'CER_ATUF_USERFLD_D'      
     SET @lvcAtufExtName = @lvcTempQualifier + N'_atuf_add'      
     SET @lvcAtufBakName = @lvcTempQualifier + N'_atuf_bak'      
    END      
      
    ----------------------end v1.6--------------------------------------------------      
    -- If the migration type requires prefixes to be moved, then populate       
    -- those table names.       
    IF @lvcPREFIX_TBL_NAME <> ' '      
    BEGIN      
     IF @lvcPREFIX_TBL_NAME = 'PDPX'      
     BEGIN      
      SET @lvcPfxSrcName = @lvcSrcQualifier + N'CMC_PDPX_DESC'      
      SET @lvcPfxTgtName = @lvcTgtQualifier + N'CMC_PDPX_DESC'      
     END      
      
     IF @lvcPREFIX_TBL_NAME = 'ITPX'      
     BEGIN      
      SET @lvcPfxSrcName = @lvcSrcQualifier + N'CMC_ITPX_DESC'      
      SET @lvcPfxTgtName = @lvcTgtQualifier + N'CMC_ITPX_DESC'      
     END      
      
     SET @lvcPfxExtName = @lvcTempQualifier + N'_pfx_add'      
     SET @lvcPfxBakName = @lvcTempQualifier + N'_pfx_bak'      
    END      
      
    /*- Replace comma with quote comma quote*/      
    SET @lvcFIRST_COL_VAL = REPLACE(@lvcFIRST_COL_VAL, ',', ''',''')      
    SET @lvcSECOND_COL_VAL = REPLACE(@lvcSECOND_COL_VAL, ',', ''',''')      
    SET @lvcTHIRD_COL_VAL = REPLACE(@lvcTHIRD_COL_VAL, ',', ''',''')      
    SET @lvcFOURTH_COL_VAL = REPLACE(@lvcFOURTH_COL_VAL, ',', ''',''')      
    SET @lvcFIFTH_COL_VAL = REPLACE(@lvcFIFTH_COL_VAL, ',', ''',''')      
    /*---------Begin 1.1------------------------------------------------------------*/      
    /*- Replace % with %%, this will prevent errors with PRINT statements*/      
    SET @lvcFIRST_COL_VAL = REPLACE(@lvcFIRST_COL_VAL, '%', '%%')      
    SET @lvcSECOND_COL_VAL = REPLACE(@lvcSECOND_COL_VAL, '%', '%%')      
    SET @lvcTHIRD_COL_VAL = REPLACE(@lvcTHIRD_COL_VAL, '%', '%%')      
    SET @lvcFOURTH_COL_VAL = REPLACE(@lvcFOURTH_COL_VAL, '%', '%%')      
    SET @lvcFIFTH_COL_VAL = REPLACE(@lvcFIFTH_COL_VAL, '%', '%%')      
    /*---------End 1.1--------------------------------------------------------------*/      
    /* reset where clause used for SQL*/      
    SET @lvcWhereString = ' '      
      
    -- Begin formatting extraction criteria in WHERE clauses, depending       
    -- on whether or not a wildcard search was supplied by the requestor.       
    IF @lvcFIRST_COL_VAL <> ' '      
    BEGIN      
     IF CHARINDEX('%', @lvcFIRST_COL_VAL) = 0      
     BEGIN      
      SET @lvcWhereString = N' WHERE ' + @lvcFIRST_COL_NAME + N' IN (''' + @lvcFIRST_COL_VAL + N''')'      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = N' WHERE ' + @lvcFIRST_COL_NAME + N' LIKE ''' + @lvcFIRST_COL_VAL + N''''      
     END      
    END      
      
    IF @lvcSECOND_COL_VAL <> ' '      
    BEGIN      
     IF @lvcWhereString <> ' '      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + N' AND '      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = N' WHERE '      
     END      
      
     IF CHARINDEX('%', @lvcSECOND_COL_VAL) = 0      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + @lvcSECOND_COL_NAME + N' IN (''' + @lvcSECOND_COL_VAL + N''')'      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + @lvcSECOND_COL_NAME + N' LIKE ''' + @lvcSECOND_COL_VAL + N''''      
     END      
    END      
      
    IF @lvcTHIRD_COL_VAL <> ' '      
    BEGIN      
     IF @lvcWhereString <> ' '      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + N' AND '      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = N' WHERE '      
     END      
      
     IF CHARINDEX('%', @lvcTHIRD_COL_VAL) = 0      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + @lvcTHIRD_COL_NAME + N' IN (''' + @lvcTHIRD_COL_VAL + N''')'      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + @lvcTHIRD_COL_NAME + N' LIKE ''' + @lvcTHIRD_COL_VAL + N''''      
     END      
    END      
      
    IF @lvcFOURTH_COL_VAL <> ' '      
    BEGIN      
     IF @lvcWhereString <> ' '      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + N' AND '      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = N' WHERE '      
     END      
      
     IF CHARINDEX('%', @lvcFOURTH_COL_VAL) = 0      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + @lvcFOURTH_COL_NAME + N' IN (''' + @lvcFOURTH_COL_VAL + N''')'      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + @lvcFOURTH_COL_NAME + N' LIKE ''' + @lvcFOURTH_COL_VAL + N''''      
     END      
    END      
      
    IF @lvcFIFTH_COL_VAL <> ' '      
    BEGIN      
     IF @lvcWhereString <> ' '      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + N' AND '      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = N' WHERE '      
     END      
      
     IF CHARINDEX('%', @lvcFIFTH_COL_VAL) = 0      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + @lvcFIFTH_COL_NAME + N' IN (''' + @lvcFIFTH_COL_VAL + N''')'      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + @lvcFIFTH_COL_NAME + N' LIKE ''' + @lvcFIFTH_COL_VAL + N''''      
     END      
    END      
      
    -- Add in search constants to WHERE clause.       
    IF @lvcFIRST_CONST_VAL <> ' '      
    BEGIN      
     IF @lvcWhereString <> ' '      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + N' AND '      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = N' WHERE '      
     END      
      
     SET @lvcWhereString = @lvcWhereString + @lvcFIRST_CONST_COL + N' = ''' + @lvcFIRST_CONST_VAL + N''''      
    END      
      
    IF @lvcSECOND_CONST_VAL <> ' '      
    BEGIN      
     IF @lvcWhereString <> ' '      
     BEGIN      
      SET @lvcWhereString = @lvcWhereString + N' AND '      
     END      
     ELSE      
     BEGIN      
      SET @lvcWhereString = N' WHERE '      
     END      
      
     SET @lvcWhereString = @lvcWhereString + @lvcSECOND_CONST_COL + N' = ''' + @lvcSECOND_CONST_VAL + N''''      
    END      
      
    /* Extract records from table 1*/--      
    SET @lvcLinkWhereString = REPLACE(@lvcWhereString, '''', '''''')      
      
          
    IF (@bitTGT_REMOTE_SERVER = 1 AND @lchTGT_BULK_COPY = 'Y')      
     BEGIN      
      SET @lvcRowNumber =''      
     END      
    ELSE      
     BEGIN      
      SET @lvcRowNumber =',ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS PK_ID '      
     END      
          
    ----------------------begin v1.11------------------------------------------------      
    IF @bitSRC_REMOTE_SERVER = 1      
        BEGIN     
            IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'      
                BEGIN    
                    SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT1ExtName + N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT DISTINCT NCGP.* FROM ' + @lvcT1SrcLinkName + N' NCGP INNER JOIN' + @lvcT2SrcLinkName + N' NCGV '+ N' ON NCGP.NCGP_CODE_GROUP_ID = NCGV.NCGP_CODE_GROUP_ID' + @lvcLinkWhereString + N''')'      
                END      
            ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
                BEGIN           
                    SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT1ExtName + N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT DISTINCT NSRS.* FROM ' + @lvcT1SrcLinkName + N' NSRS INNER JOIN'       
                    + @lvcT2SrcLinkName + N' NRST '+ N' ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcLinkWhereString + N''')'      
                END       
            ELSE      
                BEGIN
                    SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT1ExtName + N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT1SrcLinkName + @lvcLinkWhereString + N''')'      
                END      
        END      
    ELSE      
        BEGIN      
            IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'
                BEGIN   
                     SET @lvcSqlString =N'SELECT * ' + @lvcRowNumber + 'INTO ' + @lvcT1ExtName + N'  FROM (SELECT DISTINCT NCGP.* FROM ' + @lvcT1SrcName + N' NCGP INNER JOIN'  + @lvcT2SrcName + N' NCGV '+ N' ON NCGP.NCGP_CODE_GROUP_ID = NCGV.NCGP_CODE_GROUP_ID' + @lvcWhereString + ') NWX_NCGP_CD_GROUPT1'      
                END      
            ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
                BEGIN      
                     SET @lvcSqlString =N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT1ExtName + N' FROM (SELECT DISTINCT NSRS.* FROM ' + @lvcT1SrcName + N' NSRS INNER JOIN'  + @lvcT2SrcName + N' NRST '+ N' ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcWhereString + ') NSRS_RATE_SHTT1'      
                END      
            ELSE      
                BEGIN
                    SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT1ExtName + N' FROM ' + @lvcT1SrcName + @lvcWhereString      
                END    
        END
        
    ----------------------begin v1.15------------------------------------------------      
    IF (@lvcREQUEST_STS = '09')      
     GOTO Complete_Migration      
      
    ----------------------end v1.15--------------------------------------------------      
    PRINT ' '      
    PRINT 'Starting Table 1 Extract at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
    ----------------------end v1.11--------------------------------------------------      
    PRINT @lvcSqlString      
      
    ----------------------begin v1.13------------------------------------------------      
    BEGIN TRY      
     EXECUTE sp_executesql @lvcSqlString      
      
     SET @lnT1Ext = @@ROWCOUNT  
	 PRINT 'FIRST TABLE EXTRACT COUNT = ' + CONVERT(VARCHAR(10), @lnT1Ext) + ''
 
    END TRY      
      
    BEGIN CATCH      
     SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
     BEGIN      
      PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
      SET @lchStatus = '06'      
      
      INSERT INTO dbo.tzgt_dmu_message_log      
      VALUES (      
       @lnREQUEST_ID      
       ,'F'      
       ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
       ,GETDATE()      
       )      
     END      
    END CATCH        
    ----------------------end v1.13--------------------------------------------------      
        

    -- get table 2       
    IF @lvcSECOND_TBL_NAME <> ' '      
    BEGIN      
        IF @bitSRC_REMOTE_SERVER = 0      
            BEGIN 
                IF @lvcFIRST_TBL_NAME = N'CMC_PDRT_RATE_TBL' AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'    
                    BEGIN
                        SET @lvcSqlString = N'SELECT pdrc.* ' + @lvcRowNumber + ' INTO ' + @lvcT2ExtName + N' FROM ' + @lvcT1ExtName + N' pdrt ' + N' JOIN ' + @lvcT2SrcName + N' pdrc ' + N'ON pdrc.PDRT_CK = pdrt.PDRT_CK '      
                    END
                ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'  
                    BEGIN
                        SET @lvcSqlString =N'SELECT NCGV.* ' + @lvcRowNumber + ' INTO ' + @lvcT2ExtName+ N' FROM' + @lvcT2SrcName + N' NCGV' + N' INNER JOIN' + @lvcT1SrcName + N' NCGP'+ N' ON NCGV.NCGP_CODE_GROUP_ID  = NCGP.NCGP_CODE_GROUP_ID' + @lvcWhereString
                    END
                ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
                    BEGIN      
                        SET @lvcSqlString =N'SELECT NRST.* ' + @lvcRowNumber + ' INTO ' + @lvcT2ExtName + N' FROM ' + @lvcT2SrcName + N' NRST INNER JOIN' + @lvcT1SrcName + N' NSRS '+ N' ON NRST.NSRS_RATE_SHT_ID = NSRS.NSRS_RATE_SHT_ID' + @lvcWhereString      
                       END 
                ELSE
                    BEGIN 
                        SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + 'INTO ' + @lvcT2ExtName + N' FROM ' + @lvcT2SrcName + @lvcWhereString    
                    END

            END
        ELSE
            BEGIN
                IF @lvcFIRST_TBL_NAME = N'CMC_PDRT_RATE_TBL' AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'    
                    BEGIN
                       SET @lvcSqlString = N'SELECT PDRC.* ' + @lvcRowNumber + ' INTO ' + @lvcT2ExtName + N' FROM ' +@lvcT1ExtName + ' AS PDRT  INNER JOIN  OPENQUERY (' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT2SrcLinkName + N''') AS PDRC ON PDRC.PDRT_CK = PDRT.PDRT_CK '         
                    END
                ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'  
                    BEGIN
                        SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT2ExtName+ N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT NCGV.* FROM ' + @lvcT2SrcLinkName + N' NCGV' + N' INNER JOIN'  + @lvcT1SrcLinkName + N' NCGP'+ N' ON NCGV.NCGP_CODE_GROUP_ID  = NCGP.NCGP_CODE_GROUP_ID' + @lvcLinkWhereString + N''')'
                    END
                ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
                    BEGIN      
                        SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT2ExtName+ N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT NRST.* FROM ' + @lvcT2SrcLinkName + N' NRST' + N' INNER JOIN' + @lvcT1SrcLinkName + N'NSRS'+ N' ON NRST.NSRS_RATE_SHT_ID  = NSRS.NSRS_RATE_SHT_ID' + @lvcLinkWhereString + N''')'  
                    END 
                ELSE
                    BEGIN      
                        SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + 'INTO ' + @lvcT2ExtName + N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT2SrcLinkName + @lvcLinkWhereString + N''')'      
                    END
            END
      
     PRINT ' '      
     PRINT 'Starting Table 2 Extract at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     ----------------------end v1.11--------------------------------------------------      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      SET @lnT2Ext = @@ROWCOUNT  
	   PRINT 'SECOND TABLE EXTRACT COUNT = ' + CONVERT(VARCHAR(10), @lnT2Ext) + ''
   
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------                          
    END      
      
    -- get table 3       
    IF @lvcTHIRD_TBL_NAME <> ' '      
    BEGIN      
     -- check for rate tables that require special logic due to date/time key       
     IF @bitSRC_REMOTE_SERVER = 0  
        BEGIN
            IF @lvcTHIRD_TBL_NAME = N'CMC_PDRA_RATE_AGES' AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'   
                BEGIN
                    SET @lvcSqlString = N'SELECT pdra.* ' + @lvcRowNumber + ' INTO ' + @lvcT3ExtName + N' FROM ' + @lvcT2ExtName + N' pdrc ' + N'INNER JOIN ' + @lvcT3SrcName + N' pdra ' + N'ON pdrc.PDRA_REF_DTM = pdra.PDRA_REF_DTM '      
                END
            ELSE      
                BEGIN
                    SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT3ExtName + N' FROM ' + @lvcT3SrcName + @lvcWhereString
                END
        END
     ELSE 
        BEGIN
            IF @lvcTHIRD_TBL_NAME = N'CMC_PDRA_RATE_AGES' AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'      
                 BEGIN      
                    SET @lvcSqlString = N'SELECT PDRA.* ' + @lvcRowNumber + ' INTO ' + @lvcT3ExtName + N' FROM '+ @lvcT2ExtName + ' AS PDRC INNER JOIN  OPENQUERY (' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT3SrcLinkName + N''') AS PDRA ON PDRC.PDRA_REF_DTM = PDRA.PDRA_REF_DTM  '
                 END      
            ELSE      
                 BEGIN      
                    SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT3ExtName + N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT3SrcLinkName + @lvcLinkWhereString + N''')'      
                 END 
        END
      
     PRINT ' '      
     PRINT 'Starting Table 3 Extract at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     ----------------------end v1.11--------------------------------------------------      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnT3Ext = @@ROWCOUNT
	   PRINT 'THIRD TABLE EXTRACT COUNT = ' + CONVERT(VARCHAR(10), @lnT3Ext) + ''
        
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------                           
    END      
      
    -- get table 4       
    IF @lvcFOURTH_TBL_NAME <> ' '      
    BEGIN      
     ----------------------begin v1.11------------------------------------------------      
     IF @bitSRC_REMOTE_SERVER = 1      
        BEGIN      
            IF @lvcFOURTH_TBL_NAME = N'NWX_WQRU_QUEUE_RUL' AND @lvcFIRST_TBL_NAME = N'NWX_WQDF_QUEUE_DEF'      
                BEGIN   
                    SET @lvcSqlString = N'SELECT WQRU.* ' + @lvcRowNumber + ' INTO ' + @lvcT4ExtName + N' FROM OPENQUERY (' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT1SrcLinkName + N''') AS WQDF      
                    INNER JOIN  OPENQUERY (' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT4SrcLinkName + N''') AS WQRU ON WQDF.WQDF_QUEUE_ID = WQRU.WQFD_QUEUE_ID  '      
                END      
            ELSE 
                BEGIN
                    SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT4ExtName + N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT4SrcLinkName + @lvcLinkWhereString + N''')'      
                END
        END      
     ELSE      
       BEGIN      
           IF @lvcFOURTH_TBL_NAME = N'NWX_WQRU_QUEUE_RUL' AND @lvcFIRST_TBL_NAME = N'NWX_WQDF_QUEUE_DEF'      
                BEGIN    
                    SET @lvcSqlString = N'SELECT wqru.* ' + @lvcRowNumber + ' INTO ' + @lvcT4ExtName + N' FROM ' + @lvcT1ExtName + N' wqdf ' + N'INNER JOIN ' + @lvcT4SrcName + N' wqru ' + N'ON wqdf.WQDF_QUEUE_ID = wqru.WQFD_QUEUE_ID '      
                END       
           ELSE 
                BEGIN
                    SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT4ExtName + N' FROM ' + @lvcT4SrcName + @lvcWhereString      
                END
       END      
      
     PRINT ' '      
     PRINT 'Starting Table 4 Extract at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     ----------------------end v1.11--------------------------------------------------      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnT4Ext = @@ROWCOUNT 
	   PRINT 'FOURTH TABLE EXTRACT COUNT = '+ CONVERT(VARCHAR(10), @lnT4Ext) + '' 
	       
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------      
    END      
      
    -- get table 5       
    IF @lvcFIFTH_TBL_NAME <> ' '      
    BEGIN      
     ----------------------begin v1.11------------------------------------------------      
     IF @bitSRC_REMOTE_SERVER = 1      
     BEGIN      
      SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT5ExtName + N' FROM OPENQUERY(' + @lvcSRC_SERVER_NAME + N',''SELECT * FROM ' + @lvcT5SrcLinkName + @lvcLinkWhereString + N''')'      
     END      
     ELSE      
      SET @lvcSqlString = N'SELECT * ' + @lvcRowNumber + ' INTO ' + @lvcT5ExtName + N' FROM ' + @lvcT5SrcName + @lvcWhereString      
      
     PRINT ' '      
     PRINT 'Starting Table 5 Extract at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     ----------------------end v1.11--------------------------------------------------      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnT5Ext = @@ROWCOUNT 
	   PRINT 'FIFTH TABLE EXTRACT COUNT = ' + CONVERT(VARCHAR(10), @lnT5Ext) + ''
      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------                          
    END      
      
    -- IF the migration type requires a check of the number of values and       
    -- the requestor did not specify a wildcard search, then verify that       
    -- the expected number of records is found in the source table.       
    IF @lchCHECK_VAL_CT = 'Y'      
     AND CHARINDEX('%', @lvcFIRST_COL_VAL) = 0      
    BEGIN      
     SET @lvcSqlString = N'SELECT ' + @lvcFIRST_COL_NAME + N' INTO ' + @lvcValCtName + N' FROM ' + @lvcT1ExtName + @lvcWhereString      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     EXECUTE sp_executesql @lvcSqlString      
	  
	  SET @lnValCt = @@ROWCOUNT 
      
     -- Capture no. of rows affected       
     -- if counts did not match, log it.       
     -- IF @lnValCt <> @lnREQUEST_VAL_CT      
     -- BEGIN      
      -- INSERT INTO tzgt_dmu_message_log      
      -- SELECT @lnREQUEST_ID AS REQUEST_ID      
       -- ,'I' AS MESSAGE_TYPE      
       -- ,'VALUE COUNT DOES NOT MATCH' AS MESSAGE_TEXT      
       -- ,GETDATE() AS DATETIME      
     -- END      
    END      
      
    -- Declare cursor for validation rules that should be executed for the request type       
    DECLARE csValidation CURSOR      
    FOR      
    SELECT RULE_ID      
     ,SRC_TBL_ID      
     ,REF_TBL_NAME      
     ,ISNULL(FIRST_SRC_COL, ' ') AS FIRST_SRC_COL      
     ,ISNULL(FIRST_REF_COL, ' ') AS FIRST_REF_COL      
     ,ISNULL(SECOND_SRC_COL, ' ') AS SECOND_SRC_COL      
     ,ISNULL(SECOND_REF_COL, ' ') AS SECOND_REF_COL      
     ,ISNULL(THIRD_SRC_COL, ' ') AS THIRD_SRC_COL      
     ,ISNULL(THIRD_REF_COL, ' ') AS THIRD_REF_COL      
     ,ISNULL(FOURTH_SRC_COL, ' ') AS FOURTH_SRC_COL      
     ,ISNULL(FOURTH_REF_COL, ' ') AS FOURTH_REF_COL      
     ,ISNULL(FIFTH_SRC_COL, ' ') AS FIFTH_SRC_COL      
     ,ISNULL(FIFTH_REF_COL, ' ') AS FIFTH_REF_COL      
     ,ISNULL(FIRST_CONST_COL, ' ') AS FIRST_CONST_COL      
     ,ISNULL(FIRST_CONST_VAL, ' ') AS FIRST_CONST_VAL      
     ,ISNULL(SECOND_CONST_COL, ' ') AS SECOND_CONST_COL      
     ,ISNULL(SECOND_CONST_VAL, ' ') AS SECOND_CONST_VAL      
     ,ISNULL(TGT_FIRST_CONST_COL, ' ') AS FIRST_CONST_COL_TGT      
     ,--1.12      
     ISNULL(TGT_FIRST_CONST_VAL, ' ') AS FIRST_CONST_VAL_TGT      
     ,--1.12      
     ISNULL(TGT_SECOND_CONST_COL, ' ') AS SECOND_CONST_COL_TGT      
     ,--1.12      
     ISNULL(TGT_SECOND_CONST_VAL, ' ') AS SECOND_CONST_VAL_TGT      
     ,--1.12      
     SEVERITY      
    FROM tzgt_dmu_validation_rules val      
    WHERE val.ACTIVE = 'Y'      
     AND val.REQUEST_TYPE_ID = @lvcREQUEST_TYPE_ID      
    ORDER BY RULE_ID      
      
    -- Open CURSOR for processing --       
    OPEN csValidation      
      
    SET @lvcFatalError = 'N'      
    SET @lvcOtherError = 'N'      
      
    -- Fetch first validation rule       
    FETCH csValidation      
    INTO @lnRULE_ID      
     ,@lvcSRC_TBL_ID      
     ,@lvcREF_TBL_NAME      
     ,@lvcFIRST_SRC_COL      
     ,@lvcFIRST_REF_COL      
     ,@lvcSECOND_SRC_COL      
     ,@lvcSECOND_REF_COL      
     ,@lvcTHIRD_SRC_COL      
     ,@lvcTHIRD_REF_COL      
     ,@lvcFOURTH_SRC_COL      
     ,@lvcFOURTH_REF_COL      
     ,@lvcFIFTH_SRC_COL      
     ,@lvcFIFTH_REF_COL      
     ,@lvcVAL_FIRST_CONST_COL      
     ,@lvcVAL_FIRST_CONST_VAL      
     ,@lvcVAL_SECOND_CONST_COL      
     ,@lvcVAL_SECOND_CONST_VAL      
     ,@lvcVAL_FIRST_CONST_COL_TGT      
     ,--1.12      
     @lvcVAL_FIRST_CONST_VAL_TGT      
     ,--1.12      
     @lvcVAL_SECOND_CONST_COL_TGT      
     ,--1.12      
     @lvcVAL_SECOND_CONST_VAL_TGT      
     ,--1.12      
     @lvcSEVERITY      
      
    -- BEGIN VALIDATION RULES LOOP       
    WHILE @@FETCH_STATUS = 0      
    BEGIN      
     /* Prepare the logging INSERT statement for this rule.  This*/      
     /* statement will only insert rows in logging table if the*/      
     /* validation fails.*/      
     /**/      
     --------------------Begin 1.13 -------------------------------------------------      
     --Getting Distinct records from extract tables to minimize quantity of joins (performance)      
     SET @lvcVAL_RULE_TABLE = 'tzgt_dmut_' + CONVERT(VARCHAR(20), @lnREQUEST_ID) + '_' + CONVERT(VARCHAR(20), @lnRULE_ID) + '_vrule '      
     SET @lvcSqlString = 'SELECT DISTINCT ' + @lvcFIRST_SRC_COL      
      
     IF @lvcSECOND_SRC_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ', ' + @lvcSECOND_SRC_COL      
     END      
      
     IF @lvcTHIRD_SRC_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ', ' + @lvcTHIRD_SRC_COL      
     END      
      
     IF @lvcFOURTH_SRC_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ', ' + @lvcFOURTH_SRC_COL      
     END      
      
     IF @lvcFIFTH_SRC_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ', ' + @lvcFIFTH_SRC_COL      
     END      
      
     IF @lvcFIFTH_SRC_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ', ' + @lvcFIFTH_SRC_COL      
     END      
      
     IF @lvcVAL_FIRST_CONST_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ', ' + @lvcVAL_FIRST_CONST_COL      
     END      
      
     IF @lvcVAL_SECOND_CONST_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ', ' + @lvcVAL_SECOND_CONST_COL      
     END      
      
     SELECT @lvcSqlString = @lvcSqlString + ' INTO ' + @lvcVAL_RULE_TABLE      
      
     IF @lvcSRC_TBL_ID = 1      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ' FROM ' + @lvcT1ExtName      
     END      
      
     IF @lvcSRC_TBL_ID = 2      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ' FROM ' + @lvcT2ExtName      
     END      
      
     IF @lvcSRC_TBL_ID = 3      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ' FROM ' + @lvcT3ExtName      
     END      
      
     IF @lvcSRC_TBL_ID = 4      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ' FROM ' + @lvcT4ExtName      
     END      
      
     IF @lvcSRC_TBL_ID = 5      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ' FROM ' + @lvcT5ExtName      
     END      

     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      
     --------------------End 1.13 ---------------------------------------------------      
     SET @lvcSqlString = N'INSERT INTO tzgt_dmu_message_log SELECT DISTINCT ' + CONVERT(NVARCHAR(10), @lnREQUEST_ID) + N',''' + @lvcSEVERITY + N'''' + N',''RULE: ' + CONVERT(NVARCHAR(10), @lnRULE_ID) + ' VALIDATION FAILED;' + @lvcREF_TBL_NAME + N';' + @lvcFIRST_REF_COL + N' = '' + CONVERT(VARCHAR, a.' + @lvcFIRST_SRC_COL + N') + '';'      
      
     IF @lvcSECOND_REF_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + @lvcSECOND_REF_COL + N' = '' + CONVERT(VARCHAR, a.' + @lvcSECOND_SRC_COL + N') + '';'      
     END      
      
     IF @lvcTHIRD_REF_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + @lvcTHIRD_REF_COL + N' = '' + CONVERT(VARCHAR, a.' + @lvcTHIRD_SRC_COL + N') + '';'      
     END      
      
    IF @lvcFOURTH_REF_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + @lvcFOURTH_REF_COL + N' = '' + CONVERT(VARCHAR, a.' + @lvcFOURTH_SRC_COL + N') + '';'      
     END      
      
     IF @lvcFIFTH_REF_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + @lvcFIFTH_REF_COL + N' = '' + CONVERT(VARCHAR, a.' + @lvcFIFTH_SRC_COL + N') + '';'      
     END      
      
     SELECT @lvcSqlString = @lvcSqlString + ''',GETDATE ()  AS DateTime'      
      
     --------------------Begin 1.13 -------------------------------------------------      
     SELECT @lvcSqlString = @lvcSqlString + ' FROM ' + @lvcVAL_RULE_TABLE + ' a LEFT JOIN ' --1.13      
      
     SELECT @lvcSqlString = @lvcSqlString + @lvcTgtQualifier + @lvcREF_TBL_NAME + ' b ' --1.1      
      
     SELECT @lvcSqlString = @lvcSqlString + ' ON a.' + @lvcFIRST_SRC_COL + ' = b.' + @lvcFIRST_REF_COL      
      
     --------------------End 1.13 ---------------------------------------------------      
     --------------------Begin 1.12 --------------------------------------      
     --Add Reference Constant as a join condition      
     IF @lvcVAL_FIRST_CONST_COL_TGT <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' AND b.' + @lvcVAL_FIRST_CONST_COL_TGT + N' = ''' + @lvcVAL_FIRST_CONST_VAL_TGT + N''''      
     END      
      
     IF @lvcVAL_SECOND_CONST_COL_TGT <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' AND b.' + @lvcVAL_SECOND_CONST_COL_TGT + N' = ''' + @lvcVAL_SECOND_CONST_VAL_TGT + N''''      
     END      
      
     --------------------End 1.12  ----------------------------------------      
     IF @lvcSECOND_REF_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' AND a.' + @lvcSECOND_SRC_COL + N' = b.' + @lvcSECOND_REF_COL      
     END      
      
     IF @lvcTHIRD_REF_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' AND a.' + @lvcTHIRD_SRC_COL + N' = b.' + @lvcTHIRD_REF_COL      
     END      
      
     IF @lvcFOURTH_REF_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' AND a.' + @lvcFOURTH_SRC_COL + N' = b.' + @lvcFOURTH_REF_COL      
     END      
      
     IF @lvcFIFTH_REF_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' AND a.' + @lvcFIFTH_SRC_COL + N' = b.' + @lvcFIFTH_REF_COL      
     END      
      
     SET @lvcSqlString = @lvcSqlString + N' WHERE b.' + @lvcFIRST_REF_COL + N' IS NULL'      
      
     IF @lvcVAL_FIRST_CONST_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' AND a.' + @lvcVAL_FIRST_CONST_COL + N' = ''' + @lvcVAL_FIRST_CONST_VAL + N''''      
     END      
      
     IF @lvcVAL_SECOND_CONST_COL <> ' '      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' AND a.' + @lvcVAL_SECOND_CONST_COL + N' = ''' + @lvcVAL_SECOND_CONST_VAL + N''''      
     END      
      
     --------------------Begin 1.13 -------------------------------------------------      
     SELECT @lvcSqlString = @lvcSqlString + ' AND a.' + @lvcFIRST_SRC_COL + ' <> '' '''      
      
     IF @lvcSECOND_REF_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ' AND a.' + @lvcSECOND_SRC_COL + ' <> '' '''      
     END      
      
     IF @lvcTHIRD_REF_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ' AND a.' + @lvcTHIRD_SRC_COL + ' <> '' '''      
     END      
      
     IF @lvcFOURTH_REF_COL <> ' '      
     BEGIN      
     SELECT @lvcSqlString = @lvcSqlString + ' AND a.' + @lvcFOURTH_SRC_COL + ' <> '' '''      
     END      
      
     IF @lvcFIFTH_REF_COL <> ' '      
     BEGIN      
      SELECT @lvcSqlString = @lvcSqlString + ' AND a.' + @lvcFIFTH_SRC_COL + ' <> '' '''      
     END      
      
     --------------------End 1.13 ---------------------------------------------------      
     PRINT ' '      
     PRINT 'Starting Checks For Validation Rule: ' + CONVERT(VARCHAR(20), @lnRULE_ID) + ' at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     PRINT @lvcSqlString 
	
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString 
	 SELECT @lnValdtnCt  =  @@ROWCOUNT 
	 PRINT 'Count based on Validation Rule '+ CONVERT(VARCHAR(20), @lnRULE_ID) + ' = ' + CONVERT(VARCHAR(20), @lnValdtnCt) + ''
     --PRINT  @lnValdtnCt     
      
      IF @@ROWCOUNT <> 0      
      BEGIN      
       IF @lvcSEVERITY = 'F'      
       BEGIN      
        SET @lvcFatalError = 'Y'      
       END      
      
       IF @lvcSEVERITY = 'I'      
       BEGIN      
        SET @lvcOtherError = 'Y'      
       END      
      END      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnGeneralError = ERROR_NUMBER() ,@lvcGeneralErrorMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnGeneralError) + ' - ' + @lvcGeneralErrorMessage      
       PRINT SUBSTRING(@lvcGeneralErrorMessage, 1, 2000)      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnGeneralError) + ' - ' + SUBSTRING(@lvcGeneralErrorMessage, 1, 200)      
         ,GETDATE()      
        )      
      END      
     END CATCH      
      
     ----------------------end v1.13--------------------------------------------------      
     FETCH csValidation      
     INTO @lnRULE_ID      
      ,@lvcSRC_TBL_ID      
      ,@lvcREF_TBL_NAME      
      ,@lvcFIRST_SRC_COL      
      ,@lvcFIRST_REF_COL      
      ,@lvcSECOND_SRC_COL      
      ,@lvcSECOND_REF_COL      
      ,@lvcTHIRD_SRC_COL      
      ,@lvcTHIRD_REF_COL      
      ,@lvcFOURTH_SRC_COL      
      ,@lvcFOURTH_REF_COL      
      ,@lvcFIFTH_SRC_COL      
      ,@lvcFIFTH_REF_COL      
      ,@lvcVAL_FIRST_CONST_COL      
      ,@lvcVAL_FIRST_CONST_VAL      
      ,@lvcVAL_SECOND_CONST_COL      
      ,@lvcVAL_SECOND_CONST_VAL      
      ,@lvcVAL_FIRST_CONST_COL_TGT      
      ,--1.12      
      @lvcVAL_FIRST_CONST_VAL_TGT      
      ,--1.12      
      @lvcVAL_SECOND_CONST_COL_TGT      
      ,--1.12      
      @lvcVAL_SECOND_CONST_VAL_TGT      
      ,--1.12      
      @lvcSEVERITY      
    END      
      
    DEALLOCATE csValidation      
      
    --done with validation cursor.       
    -- Check whether validation errors occur and set status accordingly.       
    IF @lvcOtherError = 'Y'      
     AND @lvcREQUEST_STS <> '07'      
    BEGIN      
     SET @lchStatus = '04'      
    END      
      
    IF @lvcOtherError = 'Y'      
     AND @lvcREQUEST_STS = '07' --1.15      
    BEGIN      
     SET @lchStatus = '10'      
    END      
      
    IF @lvcFatalError = 'Y'      
    BEGIN      
     SET @lchStatus = '05'      
      
     INSERT INTO tzgt_dmu_message_log      
     SELECT @lnREQUEST_ID AS REQUEST_ID      
      ,'E' AS MESSAGE_TYPE      
      ,'VALIDATION RULE FAILURE(S) - REQUEST NOT EXECUTED' AS MESSAGE_TEXT      
      ,GETDATE() AS DATETIME      
      
     GOTO UPDATE_AND_CONTINUE      
    END      
      
    -- Extract prefix data if specified.       
    IF @lvcPREFIX_TBL_NAME <> ' '      
    BEGIN      
     SET @lvcSqlString = N'SELECT DISTINCT p.* INTO ' + @lvcPfxExtName + N' FROM ' + @lvcPfxSrcName + N' p ' + N'INNER JOIN ' + @lvcT1ExtName + N' t ON ' + N't.' + @lvcFIRST_COL_NAME + N' = '      
      
     IF @lvcPREFIX_TBL_NAME = 'PDPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N'p.PDBC_PFX AND p.PDBC_TYPE = ''' + @lvcPREFIX_TYPE + N''''      
     END      
      
     IF @lvcPREFIX_TBL_NAME = 'ITPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N'p.ITPC_PFX AND p.ITPC_TYPE = ''' + @lvcPREFIX_TYPE + N''''      
     END      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString    
	PRINT 'PREFIX TABLE EXTRACT COUNT = ' + CONVERT(VARCHAR(10), @@ROWCOUNT) + ''
  
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      
     ----------------------end v1.13--------------------------------------------------      
     -- get notes attached to prefixes if required.       
     --IF @lchMOVE_NOTES = 'Y'       
     IF @lchMOVE_NOTES = 'Y'      
      OR @lchMOVE_USR_FLD = 'Y' --1.6      
     BEGIN      
      SET @lvcSqlString = N'SELECT DISTINCT b.* INTO ' + @lvcAtxrExtName + --v1.8      
       N' FROM ' + @lvcPfxExtName + N' a INNER JOIN ' + @lvcAtxrSrcName + N' b ' + N'ON a.ATXR_SOURCE_ID = b.ATXR_SOURCE_ID ' + N'WHERE a.ATXR_SOURCE_ID <> ''1/1/1753'''      
      
      PRINT ' '      
      PRINT @lvcSqlString      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      
       SET @lnAtxr1Ext = @@ROWCOUNT      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
       ----------------------end v1.13--------------------------------------------------      
     END      
    END      
      
    --------------------Begin 1.6 --------------------------------------------------      
    -- get notes and/or user fields attached to base configuration table if required       
    IF @lchMOVE_NOTES = 'Y'      
     OR @lchMOVE_USR_FLD = 'Y'      
    BEGIN      
     IF @lvcPREFIX_TBL_NAME <> ' '      
     BEGIN      
      SET @lvcSqlString = N'INSERT INTO ' + @lvcAtxrExtName + N' SELECT DISTINCT b.* FROM ' --v1.8      
     END      
     ELSE      
     BEGIN      
      SET @lvcSqlString = N'SELECT DISTINCT b.* INTO ' + @lvcAtxrExtName + N' FROM ' --v1.8      
     END      
      
     SET @lvcSqlString = @lvcSqlString + @lvcT1ExtName + N' a INNER JOIN ' + @lvcAtxrSrcName + N' b ' + N'ON a.ATXR_SOURCE_ID = b.ATXR_SOURCE_ID ' + N'WHERE a.ATXR_SOURCE_ID <> ''1/1/1753'''      
      
     PRINT ' '      
     PRINT 'Starting ATXR Extract for Base Table at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnAtxr2Ext = @@ROWCOUNT -- Capture no. of rows affected      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------      
    END      
      
    -------------------End 1.6 -----------------------------------------------------      
    -- If attachments records exist, extract attachment records from attachment tables in source.      
    IF (@lnAtxr2Ext + @lnAtxr1Ext) > 0      
    BEGIN      
     -- get attachments for base configuration table if required      
     IF @lchMOVE_NOTES = 'Y'      
      OR @lchMOVE_USR_FLD = 'Y'      
     BEGIN      
      IF @lchMOVE_NOTES = 'Y'      
      BEGIN      
       SET @lvcSqlString = N'SELECT b.* INTO ' + @lvcAtntExtName + N' FROM ' + @lvcAtxrExtName + N' a INNER JOIN ' + @lvcAtntSrcName + N' b ' + N'ON a.ATSY_ID = b.ATSY_ID ' + N'AND a.ATXR_DEST_ID = b.ATXR_DEST_ID '      
      
       PRINT ' '      
       PRINT 'Starting ATNT Extract for Base Table at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
       PRINT @lvcSqlString      
      
       ----------------------begin v1.13------------------------------------------------      
       BEGIN TRY      
        EXECUTE sp_executesql @lvcSqlString      
       END TRY      
      
       BEGIN CATCH      
        SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
        BEGIN      
         PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
         SET @lchStatus = '06'      
      
         INSERT INTO dbo.tzgt_dmu_message_log      
         VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
        END      
       END CATCH      
      
       ----------------------end v1.13--------------------------------------------------      
       SET @lvcSqlString = 'SELECT b.* INTO ' + @lvcAtndExtName + ' FROM ' + @lvcAtxrExtName + N' a INNER JOIN ' + @lvcAtndSrcName + N' b ' + N'ON a.ATSY_ID = b.ATSY_ID ' + N'AND a.ATXR_DEST_ID = b.ATXR_DEST_ID '      
      
       PRINT ' '      
       PRINT 'Starting ATND Extract for Base Table at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
       PRINT @lvcSqlString      
      
       ----------------------begin v1.13------------------------------------------------      
       BEGIN TRY      
        EXECUTE sp_executesql @lvcSqlString      
       END TRY      
      
       BEGIN CATCH      
        SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
        BEGIN      
         PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
         SET @lchStatus = '06'      
      
         INSERT INTO dbo.tzgt_dmu_message_log      
         VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
        END      
       END CATCH      
        ----------------------end v1.13--------------------------------------------------      
      END      
      
      --------------------Begin 1.6 --------------------------------------------------      
      IF @lchMOVE_USR_FLD = 'Y'      
      BEGIN      
       --  extract user field data from user field tables.                  
       SET @lvcSqlString = N'SELECT b.* INTO ' + @lvcAtufExtName + N' FROM ' + @lvcAtxrExtName + N' a INNER JOIN ' + @lvcAtufSrcName + N' b ' + N'ON a.ATSY_ID = b.ATSY_ID ' + N'AND a.ATXR_DEST_ID = b.ATXR_DEST_ID '      
      
       PRINT ' '      
       PRINT 'Starting ATUF Extract for at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
       PRINT @lvcSqlString      
      
       ----------------------begin v1.13------------------------------------------------      
       BEGIN TRY      
        EXECUTE sp_executesql @lvcSqlString      
       END TRY      
      
       BEGIN CATCH      
        SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
        BEGIN      
         PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
         SET @lchStatus = '06'      
      
         INSERT INTO dbo.tzgt_dmu_message_log      
         VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
        END      
       END CATCH      
        ----------------------end v1.13--------------------------------------------------      
      END      
      
      --------------------End 1.6 --------------------------------------------------      
      /* BEGIN LOGIC TO GET NEW KEYS FOR NOTES ATTACHMENTS*/      
      /* copy keys in cross reference table*/      
      SET @lvcSqlString = N'SELECT DISTINCT ATXR_SOURCE_ID, ATXR_DEST_ID, ATSY_ID,' + N' ATXR_SOURCE_ID AS NEW_ATXR, ATXR_DEST_ID AS NEW_DEST ' + N' INTO ' + @lvcAtxrXrefName + N' FROM ' + @lvcAtxrExtName      
      
	  IF @lvcEnableLog = 'Y' 
		BEGIN
			PRINT ' '      
			PRINT @lvcSqlString
		END            
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage		
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
      
      ----------------------end v1.13--------------------------------------------------      
      /* Create index on cross reference table*/      
      SET @lvcSqlString = N'CREATE CLUSTERED INDEX idx_ATXR_' + CONVERT(VARCHAR(10), @lnREQUEST_ID) + N' ON ' + @lvcAtxrXrefName + N' (ATXR_SOURCE_ID, ATXR_DEST_ID)'      
      
      IF @lvcEnableLog = 'Y' 
		BEGIN
			PRINT ' '      
			PRINT @lvcSqlString 
		END
	       
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage		
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
      
      ----------------------end v1.13--------------------------------------------------      
      /* set name of procedure that should be called in key generation sub-proc*/      
      SET @lvcProc = N'' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + N'.' + @lvcTGT_SCHEMA_NAME + N'.CERSP_ATT0_RETURN_GEN_IDS'      
      
      -- called sub-proc to assign new keys       
      EXECUTE dbo.tzg_dmu_assign_note_keys @pnRequestId = @lnREQUEST_ID      
       ,@pvcAtxrXrefName = @lvcAtxrXrefName      
       ,@pvcStoredProcName = @lvcProc      
      
      /*1.1*/      
      IF @lchMOVE_NOTES = 'Y' --1.6      
      BEGIN --1.6      
       /* update extracted tables with new source AND new destination IDs*/      
       SET @lvcSqlString = N'UPDATE ' + @lvcAtndExtName + N' SET ATXR_DEST_ID = xref.NEW_DEST ' + N'FROM ' + @lvcAtndExtName + N' atnd INNER JOIN ' + @lvcAtxrXrefName + N' xref ' + N'ON xref.ATXR_DEST_ID = atnd.ATXR_DEST_ID' + N' AND xref.ATSY_ID = atnd.ATSY_ID ' --1.6      
      
	  IF @lvcEnableLog = 'Y' 
		BEGIN
			PRINT ' '      
			PRINT @lvcSqlString  
		END          
      
       ----------------------begin v1.13------------------------------------------------      
       BEGIN TRY      
        EXECUTE sp_executesql @lvcSqlString      
       END TRY      
      
       BEGIN CATCH      
        SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
        BEGIN      
         PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage		 
      
         SET @lchStatus = '06'      
      
         INSERT INTO dbo.tzgt_dmu_message_log      
         VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
        END      
       END CATCH      
      
       ----------------------end v1.13--------------------------------------------------      
       SET @lvcSqlString = N'UPDATE ' + @lvcAtntExtName + N' SET ATXR_DEST_ID = xref.NEW_DEST ' + N'FROM ' + @lvcAtntExtName + ' atnt INNER JOIN ' + @lvcAtxrXrefName + N' xref ' + N'ON xref.ATXR_DEST_ID = atnt.ATXR_DEST_ID' + N' AND xref.ATSY_ID = atnt.ATSY_ID ' --1.6      
      
	  IF @lvcEnableLog = 'Y' 
		BEGIN
			PRINT ' '      
			PRINT @lvcSqlString    
		END         
      
       ----------------------begin v1.13------------------------------------------------     
       BEGIN TRY      
        EXECUTE sp_executesql @lvcSqlString      
       END TRY      
      
       BEGIN CATCH      
        SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
        BEGIN 
		PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage         
      
         SET @lchStatus = '06'      
      
         INSERT INTO dbo.tzgt_dmu_message_log      
         VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
        END      
       END CATCH      
        ----------------------end v1.13--------------------------------------------------      
      END --1.6      
      
      --------------------Begin 1.6  ----------------------------------------      
      IF @lchMOVE_USR_FLD = 'Y'      
      BEGIN      
       SET @lvcSqlString = N'UPDATE ' + @lvcAtufExtName + N' SET ATXR_DEST_ID = xref.NEW_DEST ' + N'FROM ' + @lvcAtufExtName + N' atuf INNER JOIN ' + @lvcAtxrXrefName + N' xref ' + N'ON xref.ATSY_ID = atuf.ATSY_ID ' + N'AND xref.ATXR_DEST_ID = atuf.ATXR_DEST_ID '      
      
	  IF @lvcEnableLog = 'Y' 
		BEGIN
			PRINT ' '      
			PRINT @lvcSqlString 
		END           
      
       ----------------------begin v1.13------------------------------------------------      
       BEGIN TRY      
        EXECUTE sp_executesql @lvcSqlString      
       END TRY      
      
       BEGIN CATCH      
        SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
        BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage       
      
         SET @lchStatus = '06'      
      
         INSERT INTO dbo.tzgt_dmu_message_log      
         VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
        END      
       END CATCH      
        ----------------------end v1.13--------------------------------------------------      
      END      
      
      --------------------End 1.6  ----------------------------------------      
      SET @lvcSqlString = N'UPDATE ' + @lvcAtxrExtName + N' SET ATXR_SOURCE_ID = xref.NEW_ATXR, ATXR_DEST_ID = xref.NEW_DEST ' + N'FROM ' + @lvcAtxrExtName + N' atxr INNER JOIN ' + @lvcAtxrXrefName + N' xref ' + N'ON atxr.ATXR_SOURCE_ID = xref.ATXR_SOURCE_ID ' + N'AND atxr.ATXR_DEST_ID = xref.ATXR_DEST_ID ' + N'AND atxr.ATSY_ID = xref.ATSY_ID ' --1.6      
      
      IF @lvcEnableLog = 'Y' 
		BEGIN
			PRINT ' '      
			PRINT @lvcSqlString
		END      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN 
		PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage               
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
      
      ----------------------end v1.13--------------------------------------------------       
      SET @lvcSqlString = N'UPDATE ' + @lvcT1ExtName + N' SET ATXR_SOURCE_ID = xref.NEW_ATXR ' + N' FROM ' + @lvcT1ExtName + N' t1' + N' INNER JOIN ' + @lvcAtxrXrefName + N' xref ' + N' ON t1.ATXR_SOURCE_ID = xref.ATXR_SOURCE_ID '      
      
	  IF @lvcEnableLog = 'Y' 
		BEGIN
			PRINT ' '      
			PRINT @lvcSqlString 
		END           
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
    
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
      
      ----------------------end v1.13--------------------------------------------------      
      --------------------Begin 1.6  --------------------------------------      
      SET @lvcSqlString = N'UPDATE ' + @lvcT1ExtName + N' SET ATXR_SOURCE_ID = ''01/01/1753'' ' + N' WHERE ATXR_SOURCE_ID NOT IN ' + N' (SELECT DISTINCT NEW_ATXR ' + N' FROM ' + @lvcAtxrXrefName + N')'      
      
		IF @lvcEnableLog = 'Y' 
			BEGIN
				PRINT ' '      
				PRINT @lvcSqlString 
			END       
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage     
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
      
      ----------------------end v1.13--------------------------------------------------      
      --------------------End 1.6  ----------------------------------------      
      IF @lvcPREFIX_TBL_NAME <> ' '      
      BEGIN      
       SET @lvcSqlString = N'UPDATE ' + @lvcPfxExtName + N' SET ATXR_SOURCE_ID = xref.NEW_ATXR ' + N' FROM ' + @lvcPfxExtName + N' pfx ' + N' INNER JOIN ' + @lvcAtxrXrefName + N' xref ' + N' ON pfx.ATXR_SOURCE_ID = xref.ATXR_SOURCE_ID '      
      
       IF @lvcEnableLog = 'Y' 
			BEGIN
				PRINT ' '      
				PRINT @lvcSqlString 
			END       
      
       ----------------------begin v1.13------------------------------------------------      
       BEGIN TRY      
        EXECUTE sp_executesql @lvcSqlString      
       END TRY      
      
       BEGIN CATCH      
        SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
        BEGIN      
         PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage        
      
         SET @lchStatus = '06'      
      
         INSERT INTO dbo.tzgt_dmu_message_log      
         VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
        END      
       END CATCH      
      
       ----------------------end v1.13--------------------------------------------------       
       --------------------Begin 1.6  --------------------------------------      
       SET @lvcSqlString = N'UPDATE ' + @lvcPfxExtName + N' SET ATXR_SOURCE_ID = ''01/01/1753'' ' + N' WHERE ATXR_SOURCE_ID NOT IN ' + N' (SELECT DISTINCT NEW_ATXR ' + N' FROM ' + @lvcAtxrXrefName + N')'      
      
       IF @lvcEnableLog = 'Y' 
			BEGIN
				PRINT ' '      
				PRINT @lvcSqlString 
			END       
      
       ----------------------begin v1.13------------------------------------------------      
       BEGIN TRY      
        EXECUTE sp_executesql @lvcSqlString      
       END TRY      
      
       BEGIN CATCH      
        SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
        BEGIN      
         PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage 
      
         SET @lchStatus = '06'      
      
         INSERT INTO dbo.tzgt_dmu_message_log      
         VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
        END      
       END CATCH      
        ----------------------end v1.13--------------------------------------------------      
        --------------------End 1.6  ----------------------------------------                                          
      END      
     END      
    END -- IF  ATXR values found      
      
    --------------------Begin 1.6  --------------------------------------      
    -- Attachment might be deleted. Make sure Facets will have the default ATXR_SOURCE_ID.      
    IF (      
      @lchMOVE_NOTES = 'Y'      
      OR @lchMOVE_USR_FLD = 'Y'      
      )      
     AND (@lnAtxr2Ext + @lnAtxr1Ext) = 0      
    BEGIN      
     SET @lvcSqlString = N'UPDATE ' + @lvcT1ExtName + N' SET ATXR_SOURCE_ID = ''01/01/1753'' '      
      
     IF @lvcEnableLog = 'Y' 
			BEGIN
				PRINT ' '      
				PRINT @lvcSqlString 
			END      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      
     ----------------------end v1.13--------------------------------------------------      
     IF @lvcPREFIX_TBL_NAME <> ' '      
     BEGIN      
      SET @lvcSqlString = N'UPDATE ' + @lvcPfxExtName + N' SET ATXR_SOURCE_ID = ''01/01/1753'' '      
      
      IF @lvcEnableLog = 'Y' 
		BEGIN
			PRINT ' '      
			PRINT @lvcSqlString 
		END      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
       ----------------------end v1.13--------------------------------------------------       
     END      
    END      
      
    --------------------End 1.6  ----------------------------------------       
    ----------------------begin v1.11------------------------------------------------      
    /* backup table 1*/ 
 IF @lchTGT_BACKUP_REQ = 'Y'
	BEGIN     
    IF @bitTGT_REMOTE_SERVER = 1      
        BEGIN      
          IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'     
             BEGIN          
                 SET @lvcSqlString = N'SELECT * INTO ' + @lvcT1BakName+ N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT DISTINCT NCGP.* FROM ' + @lvcT1TgtLinkName + N' NCGP ' + N' INNER JOIN'       
              + @lvcT2TgtLinkName + N' NCGV '+ N' ON NCGP.NCGP_CODE_GROUP_ID = NCGV.NCGP_CODE_GROUP_ID' + @lvcLinkWhereString + N''')'      
             END      
          ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
            BEGIN           
                SET @lvcSqlString = N'SELECT * INTO ' + @lvcT1BakName + N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT DISTINCT NSRS.* FROM ' + @lvcT1TgtLinkName + N' NSRS '+ N' INNER JOIN'       
              + @lvcT2TgtLinkName + N' NRST '+ N' ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcLinkWhereString + N''')'      
            END      
          ELSE      
            BEGIN
                SET @lvcSqlString = N'SELECT * INTO ' + @lvcT1BakName + N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT * FROM ' + @lvcT1TgtLinkName + @lvcLinkWhereString + N''')'      

			END
        END      
    ELSE      
        BEGIN
            IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'      
                BEGIN      
                    SET @lvcSqlString =N'SELECT DISTINCT NCGP.* INTO ' + @lvcT1BakName+ N' FROM' + @lvcT1TgtName + N' NCGP ' + N' INNER JOIN'       
                    + @lvcT2TgtName + N' NCGV '+ N' ON NCGP.NCGP_CODE_GROUP_ID=NCGV.NCGP_CODE_GROUP_ID' + @lvcWhereString       
                END      
             ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
                BEGIN      
                    SET @lvcSqlString =N'SELECT DISTINCT NSRS.* INTO ' + @lvcT1BakName + N' FROM ' + @lvcT1TgtName + N' NSRS'+ N' INNER JOIN'       
                     + @lvcT2TgtName + N' NRST '+ N' ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcWhereString       
                END       
             ELSE    
			  BEGIN  
                    SET @lvcSqlString = N'SELECT * INTO ' + @lvcT1BakName + N' FROM ' + @lvcT1TgtName + @lvcWhereString      
               END 
            END
    PRINT ' '      
    PRINT 'Starting Table 1 Backup at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
    ----------------------end v1.11--------------------------------------------------      
    PRINT @lvcSqlString      
      
    ----------------------begin v1.13------------------------------------------------      
    BEGIN TRY      
     EXECUTE sp_executesql @lvcSqlString      
      
     SET @lnT1Bak = @@ROWCOUNT -- Capture no. of rows affected  
	 PRINT 'FIRST TABLE BACKUP RECORDS COUNT = ' + CONVERT(VARCHAR(10), @lnT1Bak) + '' 
    END TRY      
      
    BEGIN CATCH      
     SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
     BEGIN      
      PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
      SET @lchStatus = '06'      
      
      INSERT INTO dbo.tzgt_dmu_message_log      
      VALUES (      
       @lnREQUEST_ID      
       ,'F'      
       ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
       ,GETDATE()      
       )      
     END      
    END CATCH      
    END 
	 IF @lchTGT_BACKUP_REQ = 'N'
	  BEGIN  
	    IF @lchMOVE_NOTES = 'Y' OR @lchMOVE_USR_FLD = 'Y'      
		 BEGIN 
		   IF @bitTGT_REMOTE_SERVER = 1      
        BEGIN      
          IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'     
             BEGIN          
                 SET @lvcSqlString = N'SELECT * INTO ' + @lvcT1BakName+ N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT DISTINCT NCGP.* FROM ' + @lvcT1TgtLinkName + N' NCGP ' + N' INNER JOIN'       
              + @lvcT2TgtLinkName + N' NCGV '+ N' ON NCGP.NCGP_CODE_GROUP_ID = NCGV.NCGP_CODE_GROUP_ID' + @lvcLinkWhereString + N''')'      
             END      
          ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
            BEGIN           
                SET @lvcSqlString = N'SELECT * INTO ' + @lvcT1BakName + N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT DISTINCT NSRS.* FROM ' + @lvcT1TgtLinkName + N' NSRS '+ N' INNER JOIN'       
              + @lvcT2TgtLinkName + N' NRST '+ N' ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcLinkWhereString + N''')'      
            END      
          ELSE      
            BEGIN
                SET @lvcSqlString = N'SELECT * INTO ' + @lvcT1BakName + N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT * FROM ' + @lvcT1TgtLinkName + @lvcLinkWhereString + N''')'      

			END
        END      
    ELSE      
        BEGIN
            IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'      
                BEGIN      
                    SET @lvcSqlString =N'SELECT DISTINCT NCGP.* INTO ' + @lvcT1BakName+ N' FROM' + @lvcT1TgtName + N' NCGP ' + N' INNER JOIN'       
                    + @lvcT2TgtName + N' NCGV '+ N' ON NCGP.NCGP_CODE_GROUP_ID=NCGV.NCGP_CODE_GROUP_ID' + @lvcWhereString       
                END      
             ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
                BEGIN      
                    SET @lvcSqlString =N'SELECT DISTINCT NSRS.* INTO ' + @lvcT1BakName + N' FROM ' + @lvcT1TgtName + N' NSRS'+ N' INNER JOIN'       
                     + @lvcT2TgtName + N' NRST '+ N' ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcWhereString       
                END       
             ELSE    
			  BEGIN  
                    SET @lvcSqlString = N'SELECT * INTO ' + @lvcT1BakName + N' FROM ' + @lvcT1TgtName + @lvcWhereString      
               END 
            END
    PRINT ' '      
    PRINT 'Starting Table 1 Backup at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
    ----------------------end v1.11--------------------------------------------------      
    PRINT @lvcSqlString      
      
    ----------------------begin v1.13------------------------------------------------      
    BEGIN TRY      
     EXECUTE sp_executesql @lvcSqlString      
      
     SET @lnT1Bak = @@ROWCOUNT -- Capture no. of rows affected  
	 	 PRINT 'FIRST TABLE BACKUP RECORDS COUNT = ' + CONVERT(VARCHAR(10), @lnT1Bak)+ ''   
    
    END TRY      
      
    BEGIN CATCH      
     SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
     BEGIN      
      PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
      SET @lchStatus = '06'      
      
      INSERT INTO dbo.tzgt_dmu_message_log      
      VALUES (      
       @lnREQUEST_ID      
       ,'F'      
       ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
       ,GETDATE()      
       )      
     END      
    END CATCH   
	END
	END
	-- Capture no. of rows affected  
	IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(@lvcT1BakName) AND type in ('U'))
	BEGIN

	SET @lvcSqlString='IF EXISTS(SELECT [name] FROM sys.objects WHERE [name] = ''tzgt_dmut_T1BakCount'' and type = ''U'') 
							BEGIN										
								DROP TABLE dbo.tzgt_dmut_T1BakCount			
							END';
		EXECUTE sp_executesql @lvcSqlString 

		IF @bitTGT_REMOTE_SERVER = 1      
        BEGIN      
          IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'     
             BEGIN          
                 SET @lvcSqlString = N'SELECT * FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT DISTINCT NCGP.* FROM ' + @lvcT1TgtLinkName + N' NCGP ' + N' INNER JOIN'       
              + @lvcT2TgtLinkName + N' NCGV '+ N' ON NCGP.NCGP_CODE_GROUP_ID = NCGV.NCGP_CODE_GROUP_ID' + @lvcLinkWhereString + N''')'      
             END      
          ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
            BEGIN           
                SET @lvcSqlString = N'SELECT *  FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT DISTINCT NSRS.* FROM ' + @lvcT1TgtLinkName + N' NSRS '+ N' INNER JOIN'       
              + @lvcT2TgtLinkName + N' NRST '+ N' ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcLinkWhereString + N''')'      
            END      
          ELSE      
            BEGIN
                SET @lvcSqlString = N'SELECT *  FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT * FROM ' + @lvcT1TgtLinkName + @lvcLinkWhereString + N''')'      

			END
        END      
    ELSE      
        BEGIN
            IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'      
                BEGIN      
                    SET @lvcSqlString =N'SELECT * FROM' + @lvcT1TgtName + N' NCGP ' + N' INNER JOIN'       
                    + @lvcT2TgtName + N' NCGV '+ N' ON NCGP.NCGP_CODE_GROUP_ID=NCGV.NCGP_CODE_GROUP_ID' + @lvcWhereString       
                END      
             ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
                BEGIN      
                    SET @lvcSqlString =N'SELECT * FROM ' + @lvcT1TgtName + N' NSRS'+ N' INNER JOIN'       
                     + @lvcT2TgtName + N' NRST '+ N' ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcWhereString       
                END       
             ELSE    
			  BEGIN  
                    SET @lvcSqlString = N'SELECT *  FROM ' + @lvcT1TgtName + @lvcWhereString      
               END 
         END
    PRINT ' '      
    PRINT 'Starting Table 1 Target Count at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
    ----------------------end v1.11--------------------------------------------------      
    PRINT @lvcSqlString  
	SET @lvcSqlString =' Select  COUNT(1) AS COU INTO tzgt_dmut_T1BakCount FROM ('+@lvcSqlString+')A '
	PRINT @lvcSqlString 
	----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString 
	  
	  Select @lnT1Bak= COU from  tzgt_dmut_T1BakCount
      	  PRINT 'FIRST TABLE TARGET RECORDS COUNT = ' + CONVERT(VARCHAR(10), @lnT1Bak)+ ''   
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH 
	
	END

    IF @lvcEnableLog = 'Y' 
	BEGIN
	    Print '@lnT1Ext :'+CONVERT(VARCHAR(10),@lnT1Ext)     
	    Print '@lnT1Bak :'+CONVERT(VARCHAR(10),@lnT1Bak)
	    Print '@lchALLOW_DELETE :'+@lchALLOW_DELETE
    END

    IF @lnT1Ext = 0 AND  @lnT1Bak > 0    
     AND @lchALLOW_DELETE = 'N'      
     --1.3 changed @lchALLOW_DELETE to 'N'       
    BEGIN      
     SET @lchStatus = '05'  
     SET @lnT1Bak = 0
      
     INSERT INTO tzgt_dmu_message_log      
     SELECT @lnREQUEST_ID AS REQUEST_ID      
      ,'E' AS MESSAGE_TYPE      
      ,'NO RECORDS SELECTED, DELETE NOT ALLOWED' AS MESSAGE_TEXT      
      ,GETDATE() AS DATETIME      
      
     GOTO UPDATE_AND_CONTINUE      
    END      
      
 IF @lnT1Ext = 0 AND  @lnT1Bak = 0    
     AND @lchALLOW_DELETE = 'N'      
     --1.3 changed @lchALLOW_DELETE to 'N'       
    BEGIN      
     SET @lchStatus = '03'      
      
     INSERT INTO tzgt_dmu_message_log      
     SELECT @lnREQUEST_ID AS REQUEST_ID      
      ,'E' AS MESSAGE_TYPE      
      ,'NO RECORDS SELECTED, DELETE NOT ALLOWED' AS MESSAGE_TEXT      
      ,GETDATE() AS DATETIME      
      
     GOTO UPDATE_AND_CONTINUE      
    END 		 
    ----------------------end v1.13--------------------------------------------------       
    -- backup table 2       
   IF @lchTGT_BACKUP_REQ = 'Y'
	BEGIN  
    IF @lvcSECOND_TBL_NAME <> ' '      
    BEGIN      
     IF @lvcFIRST_TBL_NAME = N'CMC_PDRT_RATE_TBL'      
      AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'      
     BEGIN      
      SET @lvcSqlString = N' SELECT pdrc.* INTO ' + @lvcT2BakName + N' FROM ' + @lvcT1BakName + N' pdrt ' + N' JOIN ' + @lvcT2TgtName + N' pdrc ' + N'ON pdrc.PDRT_CK = pdrt.PDRT_CK '      
     END     
     ELSE      
      ----------------------begin v1.11------------------------------------------------      
     BEGIN      
      IF @bitTGT_REMOTE_SERVER = 1      
      BEGIN      
      IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'      
      
     BEGIN      
          
      SET @lvcSqlString = N'SELECT * INTO ' + @lvcT2BakName+ N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT NCGV.* FROM ' + @lvcT2TgtLinkName + N' NCGV ' + N' INNER JOIN'       
          + @lvcT1TgtLinkName + N' NCGP '+ N' ON NCGV.NCGP_CODE_GROUP_ID=NCGP.NCGP_CODE_GROUP_ID' + @lvcLinkWhereString + N''')'      
      END      
      
      ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
       BEGIN      
        SET @lvcSqlString = N'SELECT * INTO ' + @lvcT2BakName+ N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT NRST.* FROM ' + @lvcT2TgtLinkName + N' NRST ' + N' INNER JOIN'       
           + @lvcT1TgtLinkName + N' NSRS '+ N' ON NRST.NSRS_RATE_SHT_ID=NSRS.NSRS_RATE_SHT_ID' + @lvcLinkWhereString + N''')'      
       END      
       ELSE      
       --SET @lvcSqlString = N'SELECT * INTO ' + @lvcT2BakName + N' FROM OPENQUERY("' + @lvcTGT_SERVER_NAME + N'",''SELECT * FROM ' + @lvcT2TgtLinkName + @lvcLinkWhereString + N''')'      
         
         SET @lvcSqlString = N'SELECT * INTO ' + @lvcT2BakName + N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT * FROM ' + @lvcT2TgtLinkName + @lvcLinkWhereString + N''')'      
	  END     
      ELSE      
      IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME = N'NWX_NCGV_CD_VALUE'      
      
     BEGIN      
           
      SET @lvcSqlString =N'SELECT NCGV.* INTO ' + @lvcT2BakName+ N' FROM' + @lvcT2TgtName + N' NCGV ' + N' INNER JOIN '       
          + @lvcT1TgtName + N' NCGP '+ N' ON NCGV.NCGP_CODE_GROUP_ID=NCGP.NCGP_CODE_GROUP_ID' + @lvcWhereString       
            
      END      
      ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME = N'NWX_NRST_RS_TERMS'      
       BEGIN      
       SET @lvcSqlString =N'SELECT NRST.* INTO ' + @lvcT2BakName+ N' FROM' + @lvcT2TgtName + N' NRST ' + N' INNER JOIN '       
        + @lvcT1TgtName + N' NSRS '+ N' ON NRST.NSRS_RATE_SHT_ID=NSRS.NSRS_RATE_SHT_ID' + @lvcWhereString       
       END      
      ELSE   
       SET @lvcSqlString = N'SELECT * INTO ' + @lvcT2BakName + N' FROM ' + @lvcT2TgtName + @lvcWhereString      
      END   
      
     PRINT ' '      
     PRINT 'Starting Table 2 Backup at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     ----------------------end v1.11--------------------------------------------------      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      SET @lnT2Bak = @@ROWCOUNT  
	  	 PRINT 'SECOND TABLE BACKUP RECORDS COUNT = ' + CONVERT(VARCHAR(10), @lnT2Bak) + ''  
    
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------      
    END 
	END     
    -- backup table 3  
 IF @lchTGT_BACKUP_REQ = 'Y'
	BEGIN      
     IF @lvcTHIRD_TBL_NAME <> ' '      
      BEGIN      
     -- check for rate tables which require special logic due to date/time stamp key       
     IF @lvcTHIRD_TBL_NAME = N'CMC_PDRA_RATE_AGES'      
      AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'      
     BEGIN      
      SET @lvcSqlString = N'SELECT pdra.* INTO ' + @lvcT3BakName + N' FROM ' + @lvcT2BakName + N' pdrc ' + N'INNER JOIN ' + @lvcT3TgtName + N' pdra ' + N'ON pdrc.PDRA_REF_DTM = pdra.PDRA_REF_DTM '      
     END      
     ELSE      
      ----------------------begin v1.11------------------------------------------------      
     BEGIN 
	       
      IF @bitTGT_REMOTE_SERVER = 1      
      BEGIN      
       --SET @lvcSqlString = N'SELECT * INTO ' + @lvcT3BakName + N' FROM OPENQUERY("' + @lvcTGT_SERVER_NAME + N'",''SELECT * FROM ' + @lvcT3TgtLinkName + @lvcLinkWhereString + N''')'       
	   SET @lvcSqlString = N'SELECT * INTO ' + @lvcT3BakName + N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT * FROM ' + @lvcT3TgtLinkName + @lvcLinkWhereString + N''')'      
      END      
      ELSE      
       SET @lvcSqlString = N'SELECT * INTO ' + @lvcT3BakName + N' FROM ' + @lvcT3TgtName + @lvcWhereString      
     END      
      
     PRINT ' '      
     PRINT 'Starting Table 3 Backup at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     ----------------------end v1.11--------------------------------------------------      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnT3Bak = @@ROWCOUNT 
	  	 PRINT 'THIRD TABLE BACKUP RECORDS COUNT = ' + CONVERT(VARCHAR(10), @lnT3Bak) + ''  
     
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
            
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------                           
    END      
    END  
    -- get table 4 
 IF @lchTGT_BACKUP_REQ = 'Y'
  BEGIN       
    IF @lvcFOURTH_TBL_NAME <> ' '      
    BEGIN      
    ----------------------begin v1.11------------------------------------------------      
    IF @bitTGT_REMOTE_SERVER = 1      
     BEGIN      
      IF @lvcFOURTH_TBL_NAME = N'NWX_WQRU_QUEUE_RUL' AND @lvcFIRST_TBL_NAME = N'NWX_WQDF_QUEUE_DEF'      
      BEGIN      
          
       SET @lvcSqlString = N'SELECT * INTO ' + @lvcT4BakName+ N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT WQRU.* FROM ' + @lvcT1TgtLinkName + N' WQDF ' + N' INNER JOIN'       
        + @lvcT4TgtLinkName + N' WQRU '+ N'ON WQDF.WQDF_QUEUE_ID = WQRU.WQFD_QUEUE_ID' + @lvcLinkWhereString + N''')'      
      END      
      ELSE      
         --SET @lvcSqlString = N'SELECT * INTO ' + @lvcT4BakName + N' FROM OPENQUERY("' + @lvcTGT_SERVER_NAME + N'",''SELECT * FROM ' + @lvcT4TgtLinkName + @lvcLinkWhereString + N''')'      
       SET @lvcSqlString = N'SELECT * INTO ' + @lvcT4BakName + N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT * FROM ' + @lvcT4TgtLinkName + @lvcLinkWhereString + N''')'      
       END      
       ELSE      
     BEGIN      
      IF @lvcFOURTH_TBL_NAME = N'NWX_WQRU_QUEUE_RUL' AND @lvcFIRST_TBL_NAME = N'NWX_WQDF_QUEUE_DEF'      
       BEGIN      
           
        SET @lvcSqlString = N'SELECT WQRU.* INTO ' + @lvcT4BakName + N' FROM ' + @lvcT1BakName + N' WQDF ' + N'INNER JOIN '      
          + @lvcT4TgtName + N' WQRU ' + N'ON WQDF.WQDF_QUEUE_ID = WQRU.WQFD_QUEUE_ID'+ @lvcWhereString      
       END       
      ELSE      
        SET @lvcSqlString = N'SELECT * INTO ' + @lvcT4BakName + N' FROM ' + @lvcT4TgtName + @lvcWhereString      
     END      
         
                                         
      
     PRINT ' '      
     PRINT 'Starting Table 4 Backup at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     ----------------------end v1.11--------------------------------------------------      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnT4Bak = @@ROWCOUNT  
	  	 PRINT 'FOURTH TABLE BACKUP RECORDS COUNT = ' + CONVERT(VARCHAR(10), @lnT4Bak) + ''  
    
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------                          
    END      
     END 
    -- get table 5  
 IF @lchTGT_BACKUP_REQ = 'Y'
	BEGIN      
     IF @lvcFIFTH_TBL_NAME <> ' '      
      BEGIN      
     ----------------------begin v1.11------------------------------------------------      
       IF @bitTGT_REMOTE_SERVER = 1      
       BEGIN      
      --SET @lvcSqlString = N'SELECT * INTO ' + @lvcT5BakName + N' FROM OPENQUERY("' + @lvcTGT_SERVER_NAME + N'",''SELECT * FROM ' + @lvcT5TgtLinkName + @lvcLinkWhereString + N''')'      
      SET @lvcSqlString = N'SELECT * INTO ' + @lvcT5BakName + N' FROM OPENQUERY(' + @lvcTGT_SERVER_NAME + N',''SELECT * FROM ' + @lvcT5TgtLinkName + @lvcLinkWhereString + N''')'      
     END      
     ELSE      
      SET @lvcSqlString = N'SELECT * INTO ' + @lvcT5BakName + N' FROM ' + @lvcT5TgtName + @lvcWhereString      
      
     PRINT ' '      
     PRINT 'Starting Table 5 Backup at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE()))      
     ----------------------end v1.11--------------------------------------------------      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnT5Bak = @@ROWCOUNT  
	  	 PRINT 'FIFTH TABLE BACKUP RECORDS COUNT = ' + CONVERT(VARCHAR(10), @lnT5Bak)  + '' 
    
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------                          
    END      
     END 
    -- backup prefix table 
 IF @lchTGT_BACKUP_REQ ='Y'
  BEGIN   
    IF @lvcPREFIX_TBL_NAME <> ' '      
    BEGIN     
     SET @lvcSqlString = N'SELECT DISTINCT p.* INTO ' + @lvcPfxBakName + N' FROM ' + @lvcPfxTgtName + N' p ' + N'INNER JOIN ' + @lvcT1ExtName + N' t ON ' + N't.' + @lvcFIRST_COL_NAME + N' = '      
      
     IF @lvcPREFIX_TBL_NAME = 'PDPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N'p.PDBC_PFX AND p.PDBC_TYPE = ''' + @lvcPREFIX_TYPE + N''''      
     END      
      
     IF @lvcPREFIX_TBL_NAME = 'ITPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N'p.ITPC_PFX AND p.ITPC_TYPE = ''' + @lvcPREFIX_TYPE + N''''    
     END      
      
     PRINT ' '      
     PRINT 'Starting Prefix Note Search at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnPfxBak = @@ROWCOUNT -- Capture no. of rows affected 
	  PRINT 'PREFIX TABLE BACKUP RECORDS COUNT = ' + CONVERT(VARCHAR(10), @lnPfxBak)  
      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
     ----------------------end v1.13--------------------------------------------------       
  
	 IF @lchMOVE_NOTES = 'Y'      
      OR @lchMOVE_USR_FLD = 'Y' --1.6      
     BEGIN   
	  
      SET @lvcSqlString = N'SELECT DISTINCT b.* INTO ' + @lvcAtxrBakName + --v1.8      
       N' FROM ' + @lvcPfxBakName + N' a INNER JOIN ' + @lvcAtxrTgtName + N' b ' + N'ON a.ATXR_SOURCE_ID = b.ATXR_SOURCE_ID ' + N'WHERE a.ATXR_SOURCE_ID <> ''1/1/1753'''      
      
      PRINT ' '      
      PRINT 'Starting ATXR Backup for Prefix at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
      PRINT @lvcSqlString      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      
       SET @lnAtxr1Bak = @@ROWCOUNT      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
       ----------------------end v1.13--------------------------------------------------       
     END      
    END      
  END
    ELSE 
	IF @lchTGT_BACKUP_REQ = 'N'
	 BEGIN
	    IF @lchMOVE_NOTES = 'Y' OR @lchMOVE_USR_FLD = 'Y'      
         BEGIN 
		      IF @lvcPREFIX_TBL_NAME <> ' '      
    BEGIN     
     SET @lvcSqlString = N'SELECT DISTINCT p.* INTO ' + @lvcPfxBakName + N' FROM ' + @lvcPfxTgtName + N' p ' + N'INNER JOIN ' + @lvcT1ExtName + N' t ON ' + N't.' + @lvcFIRST_COL_NAME + N' = '      
      
     IF @lvcPREFIX_TBL_NAME = 'PDPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N'p.PDBC_PFX AND p.PDBC_TYPE = ''' + @lvcPREFIX_TYPE + N''''      
     END      
      
     IF @lvcPREFIX_TBL_NAME = 'ITPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N'p.ITPC_PFX AND p.ITPC_TYPE = ''' + @lvcPREFIX_TYPE + N''''    
     END      
      
     PRINT ' '      
     PRINT 'Starting Prefix Note Search at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SET @lnPfxBak = @@ROWCOUNT -- Capture no. of rows affected       
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
     ----------------------end v1.13--------------------------------------------------       
      SET @lvcSqlString = N'SELECT DISTINCT b.* INTO ' + @lvcAtxrBakName + --v1.8      
       N' FROM ' + @lvcPfxBakName + N' a INNER JOIN ' + @lvcAtxrTgtName + N' b ' + N'ON a.ATXR_SOURCE_ID = b.ATXR_SOURCE_ID ' + N'WHERE a.ATXR_SOURCE_ID <> ''1/1/1753'''      
      
      PRINT ' '      
      PRINT 'Starting ATXR Backup for Prefix at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
      PRINT @lvcSqlString      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      
       SET @lnAtxr1Bak = @@ROWCOUNT      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
       ----------------------end v1.13--------------------------------------------------       
     END      
    END 
	END
      
  --------------------Begin 1.6 --------------------------------------------------      
   
    IF @lchMOVE_NOTES = 'Y'      
     OR @lchMOVE_USR_FLD = 'Y'      
    BEGIN      
     IF @lvcPREFIX_TBL_NAME <> ' '      
     BEGIN  
      SET @lvcSqlString = N'INSERT INTO ' + @lvcAtxrBakName + N'    SELECT DISTINCT b.* FROM ' --v1.8      
     END      
     ELSE      
     BEGIN      
      SET @lvcSqlString = N'SELECT DISTINCT b.* INTO ' + @lvcAtxrBakName + N' FROM ' --v1.8      
     END      
   
     SET @lvcSqlString = @lvcSqlString + @lvcT1BakName + N' a INNER JOIN ' + @lvcAtxrTgtName + N' b ' + N'ON a.ATXR_SOURCE_ID = b.ATXR_SOURCE_ID ' + N'WHERE a.ATXR_SOURCE_ID <> ''1/1/1753'''      
      
     PRINT ' '      
     PRINT 'Starting ATXR Backup for Base Table at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
      
      SELECT @lnAtxr2Bak = @@ROWCOUNT      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID     
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        ) -- 657      
      END
	      
     END CATCH      
     END   
     ----------------------end v1.13--------------------------------------------------       
     --------------------Begin 1.6.1 --------------------------------------------------      
     SELECT @lvcSqlString = N'INSERT INTO tzgt_dmu_atxr_stage' + N' SELECT ' + CONVERT(NVARCHAR(10), @lnREQUEST_ID) + ',' + N' * FROM ' + @lvcAtxrBakName      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        ) -- 657      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------      
      -------------------End 1.6.1 -----------------------------------------------------      
   
  
    -- backup notes tables      
    IF @lchMOVE_NOTES = 'Y'      
    BEGIN      
     IF (@lnAtxr1Bak + @lnAtxr2Bak) > 0      
     BEGIN 
	     
      SET @lvcSqlString = N'SELECT b.* INTO ' + @lvcAtntBakName + N' FROM ' + @lvcAtxrBakName + N' a INNER JOIN ' + @lvcAtntTgtName + N' b ' + N'ON a.ATSY_ID = b.ATSY_ID ' + N'AND a.ATXR_DEST_ID = b.ATXR_DEST_ID '      
      
      PRINT ' '      
      PRINT 'Starting ATNT Backup for Base Table at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
      PRINT @lvcSqlString      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      
       SET @lnAtntBak = @@ROWCOUNT      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
      
      ----------------------end v1.13--------------------------------------------------      
      /* Capture no. of rows affected*/      
      SET @lvcSqlString = N'SELECT b.* INTO ' + @lvcAtndBakName + N' FROM ' + @lvcAtntBakName + N' a INNER JOIN ' + @lvcAtndTgtName + N' b ' + N'ON a.ATSY_ID = b.ATSY_ID ' + N'AND a.ATXR_DEST_ID = b.ATXR_DEST_ID '      
      
      PRINT ' '      
      PRINT 'Starting ATND Backup for Base Table at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
      PRINT @lvcSqlString      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      
       SET @lnAtndBak = @@ROWCOUNT      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (    
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
       ----------------------end v1.13--------------------------------------------------                                  
     END      
    END      


    -- backup user field table      
    IF @lchMOVE_USR_FLD = 'Y'      
    BEGIN      
     IF (@lnAtxr1Bak + @lnAtxr2Bak) > 0      
     BEGIN  
	 
      SET @lvcSqlString = N'SELECT b.* INTO ' + @lvcAtufBakName + N' FROM ' + @lvcAtxrBakName + N' a INNER JOIN ' + @lvcAtufTgtName + ' b ' + N'ON a.ATSY_ID = b.ATSY_ID ' + N'AND a.ATXR_DEST_ID = b.ATXR_DEST_ID '      
      
      PRINT ' '      
      PRINT 'Starting ATUF Backup for Base Table at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
      PRINT @lvcSqlString      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      
       SET @lnAtufBak = @@ROWCOUNT      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
      
      ----------------------end v1.13--------------------------------------------------      
      --------------------Begin 1.6.1 ------------------------------------------------      
      SELECT @lvcSqlString = N'INSERT INTO tzgt_dmu_atuf_stage' + N' SELECT ' + CONVERT(NVARCHAR(10), @lnREQUEST_ID) + ',' + N' * FROM ' + @lvcAtufBakName      
      
      PRINT ' '      
      PRINT @lvcSqlString      
      
      ----------------------begin v1.13------------------------------------------------      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
       ----------------------end v1.13--------------------------------------------------      
       --------------------End 1.6.1 --------------------------------------------------      
     END -- if atxr records backed up      
    END      

    -------------------End 1.6 -----------------------------------------------------      
    ----------------------begin v1.15------------------------------------------------      
    IF (@lvcREQUEST_STS = '07')      
     GOTO UPDATE_AND_CONTINUE      
      
    -- begin final updates in target environment       
    Complete_Migration: --1.15      
      
    -- Get previous row counts for simulated migration      
    IF @lvcREQUEST_STS = '09'      
    BEGIN      
     SELECT @lnT1Ext = mr.FIRST_TBL_ADD_CT      
      ,@lnT2Ext = mr.SECOND_TBL_ADD_CT      
      ,@lnT3Ext = mr.THIRD_TBL_ADD_CT      
      ,@lnT4Ext = mr.FOURTH_TBL_ADD_CT      
      ,@lnT5Ext = mr.FIFTH_TBL_ADD_CT      
      ,@lnT1Bak = mr.FIRST_TBL_DEL_CT      
      ,@lnT2Bak = mr.SECOND_TBL_DEL_CT      
      ,@lnT3Bak = mr.THIRD_TBL_DEL_CT      
      ,@lnT4Bak = mr.FOURTH_TBL_DEL_CT      
,@lnT5Bak = mr.FIFTH_TBL_DEL_CT      
     FROM tzgt_dmu_migration_request mr      
     WHERE mr.REQUEST_ID = @lnREQUEST_ID      
      
     SELECT @lvcSqlString = 'IF (EXISTS (SELECT *       
                FROM INFORMATION_SCHEMA.TABLES       
                WHERE TABLE_SCHEMA = ''' + @lvcMIG_SCHEMA_NAME + '''      
                AND  TABLE_NAME = ''' + REPLACE(@lvcPfxBakName, 'dbo.', '') + '''))      
                BEGIN      
    SELECT * FROM ' + @lvcPfxBakName + '      
    END'      
      
     --PRINT @lvcSqlString      
     EXECUTE sp_executesql @lvcSqlString 
	 
     SET @lnPfxBak = @@ROWCOUNT      
      
     --PRINT 'Prefix Counts ' + CONVERT(VARCHAR(10),@lnPfxBak)      
     SELECT @lvcSqlString = 'IF (EXISTS (SELECT *       
                FROM INFORMATION_SCHEMA.TABLES       
                WHERE TABLE_SCHEMA = ''' + @lvcMIG_SCHEMA_NAME + '''      
                AND  TABLE_NAME = ''' + REPLACE(@lvcAtxrBakName, 'dbo.', '') + '''))      
                BEGIN      
    SELECT * FROM ' + @lvcAtxrBakName + '      
    END'      
      
     --PRINT @lvcSqlString      
     EXECUTE sp_executesql @lvcSqlString      
      
     SET @lnAtxr1Bak = @@ROWCOUNT      
      
     --PRINT 'Atxr Counts ' + CONVERT(VARCHAR(10),@lnAtxr1Bak)      
     --Reset Success Code      
     SELECT @lnSIM_VAL_RULE_COUNT = COUNT(*)      
     FROM dbo.tzgt_dmu_message_log      
     WHERE REQUEST_ID = @lnREQUEST_ID      
      
     IF (@lnSIM_VAL_RULE_COUNT > 0)      
     BEGIN      
      SELECT @lchStatus = '04'      
     END      
     ELSE      
     BEGIN      
      SELECT @lchStatus = '03'      
     END      
    END      
      
    ----------------------end v1.15--------------------------------------------------      
    -- delete FROM table 1   
	  
	 IF @lchTGT_BACKUP_REQ = 'Y'
	 BEGIN  
		 IF @lnT1Bak > 0      
			 BEGIN             
     ----------------------begin v1.14--------------------------------------------------           
                         
     IF (@lchRequestFullTableMove = 'Y' AND @lchRequestFullTableTruncate = 'Y') -- // Additional check if target environment for the migration has FULL_TABLE_TRUNCATE is set to YES (6/17/2016)      
       BEGIN      
                                           
      
      IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
        SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+ @lvcT1TgtLinkName + ''''      
       END      
      ELSE      
       BEGIN      
        SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT1TgtLinkName + ''      
       END      
                   
      PRINT 'Full Table Move - Starting Table 1 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
            
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END           
                                             
     ELSE      
       BEGIN      
                           
      
      PRINT ' '      
      PRINT 'Starting Table 1 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
     IF @lvcFIRST_TBL_NAME = N'CMC_PDRT_RATE_TBL' AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'      
      BEGIN      
          SET @lvcSqlString = N'DELETE FROM ' + @lvcT1TgtName + N' WHERE PDRT_CK IN ' + N'(SELECT DISTINCT PDRT_CK FROM ' + @lvcT1BakName + N') '      
      END             
     ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME= N'NWX_NCGV_CD_VALUE'      
      BEGIN      
       --SET @lvcSqlString = N'DELETE NCGP FROM ' + @lvcT1TgtName + N' NCGP' + N' INNER JOIN ' + @lvcT2TgtName + N' NCGV       
       --ON NCGV.NCGP_CODE_GROUP_ID = NCGP.NCGP_CODE_GROUP_ID' + @lvcWhereString  
	   SET @lvcSqlString = N'DELETE NCGV FROM ' + @lvcT2TgtName + N' NCGV' + N' INNER JOIN ' + @lvcT1BakName + N' NCGP       
         ON NCGV.NCGP_CODE_GROUP_ID = NCGP.NCGP_CODE_GROUP_ID' + @lvcWhereString     
      END      
     ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME= N'NWX_NRST_RS_TERMS'      
      BEGIN      
       SET @lvcSqlString = N'DELETE NSRS FROM ' + @lvcT1TgtName + N' NSRS' + N' INNER JOIN ' + @lvcT2TgtName + N' NRST       
        ON NSRS.NSRS_RATE_SHT_ID = NRST.NSRS_RATE_SHT_ID' + @lvcWhereString         
      END      
     ELSE       
       BEGIN             
      SET @lvcSqlString = N'DELETE FROM ' + @lvcT1TgtName + @lvcWhereString      
       END      
     PRINT @lvcSqlString      
      
      EXECUTE dbo.tzg_dmu_bulk_delete @lvcT1TgtName      
       ,@lvcSqlString      
       ,@lnT1Del OUTPUT  
	   PRINT 'FIRST TABLE DELETE RECORDS COUNT  '+ @lvcFIRST_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT1Del)
     END      
     ----------------------end v1.14--------------------------------------------------      
    END 
	END 
	ELSE  IF @lchTGT_BACKUP_REQ = 'N' 
	BEGIN
	   IF (@lchRequestFullTableMove = 'Y' AND @lchRequestFullTableTruncate = 'Y') -- // Additional check if target environment for the migration has FULL_TABLE_TRUNCATE is set to YES (6/17/2016)      
       BEGIN      
                                           
      IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
        SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+ @lvcT1TgtLinkName + ''''      
       END      
      ELSE      
       BEGIN      
        SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT1TgtLinkName + ''      
       END      
                   
      PRINT 'Full Table Move - Starting Table 1 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
            
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2          
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END           
         ELSE      
       BEGIN      

      PRINT ' '      
      PRINT 'Starting Table 1 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
                
      SET @lvcSqlString = N'DELETE FROM ' + @lvcT1TgtName + @lvcWhereString      
             
     PRINT @lvcSqlString      
      
      EXECUTE dbo.tzg_dmu_bulk_delete @lvcT1TgtName      
       ,@lvcSqlString      
       ,@lnT1Del OUTPUT
	   
	     PRINT 'FIRST TABLE DELETE RECORDS COUNT  '+ @lvcFIRST_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT1Del)        
     ----------------------end v1.14--------------------------------------------------      
    END   
	 END
	    
      
    -- delete FROM table 2   
 IF @lchTGT_BACKUP_REQ = 'Y' 
    BEGIN  
    IF @lvcSECOND_TBL_NAME <> ' '      
     AND @lnT2Bak > 0      
    BEGIN      
     ----------------------begin v1.14------------------------------------------------          
                
     IF (@lchRequestFullTableMove = 'Y' AND @lchRequestFullTableTruncate = 'Y')        
       BEGIN                                                    
      IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
         SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+  @lvcT2TgtLinkName + ''''      
       END      
      ELSE      
       BEGIN      
         SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT2TgtLinkName + ''      
       END      
      
      PRINT ' '      
      PRINT 'Full Table Move - Starting Table 2 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END           
                                             
     ELSE      
       BEGIN      
       PRINT ' '      
       PRINT 'Starting Table 2 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      IF @lvcFIRST_TBL_NAME = N'CMC_PDRT_RATE_TBL' AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'      
       BEGIN      
            SET @lvcSqlString = N'DELETE FROM ' + @lvcT2TgtName + N' WHERE PDRT_CK IN ' + N'(SELECT DISTINCT PDRT_CK FROM ' + @lvcT2BakName + N') '          
             END      
      ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NCGP_CD_GROUP' AND @lvcSECOND_TBL_NAME= N'NWX_NCGV_CD_VALUE'      
       BEGIN      
        --SET @lvcSqlString = N'DELETE NCGV FROM ' + @lvcT2TgtName + N' NCGV' + N' INNER JOIN ' + @lvcT1BakName + N' NCGP       
        -- ON NCGV.NCGP_CODE_GROUP_ID = NCGP.NCGP_CODE_GROUP_ID' + @lvcWhereString     
		SET @lvcSqlString = N'DELETE NCGP FROM ' + @lvcT1TgtName + N' NCGP' + N' INNER JOIN ' + @lvcT2BakName + N' NCGV       
       ON NCGV.NCGP_CODE_GROUP_ID = NCGP.NCGP_CODE_GROUP_ID' + @lvcWhereString        
       END      
      ELSE IF @lvcFIRST_TBL_NAME = N'NWX_NSRS_RATE_SHT' AND @lvcSECOND_TBL_NAME= N'NWX_NRST_RS_TERMS'      
       BEGIN      
        SET @lvcSqlString = N'DELETE NRST FROM ' + @lvcT2TgtName + N' NRST' + N' INNER JOIN ' + @lvcT1BakName + N' NSRS      
          ON NRST.NSRS_RATE_SHT_ID = NSRS.NSRS_RATE_SHT_ID' + @lvcWhereString      
       END       
      ELSE      
       BEGIN      
        SET @lvcSqlString = N'DELETE FROM ' + @lvcT2TgtName + @lvcWhereString      
       END      
              
      PRINT @lvcSqlString      
      
      EXECUTE dbo.tzg_dmu_bulk_delete @lvcT2TgtName      
       ,@lvcSqlString      
       ,@lnT2Del OUTPUT 
	   PRINT 'SECOND TABLE DELETE RECORDS COUNT  '+ @lvcSECOND_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT2Del)        
     
     END      
     ----------------------end v1.14--------------------------------------------------      
    END      
    END 
	 ELSE
	 IF @lchTGT_BACKUP_REQ = 'N' AND  @lvcSECOND_TBL_NAME <> ' '
	 BEGIN    
	   IF (@lchRequestFullTableMove = 'Y' AND @lchRequestFullTableTruncate = 'Y')        
       BEGIN                                                    
      IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
         SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+  @lvcT2TgtLinkName + ''''      
       END      
      ELSE      
       BEGIN      
         SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT2TgtLinkName + ''      
       END      
      
      PRINT ' '      
      PRINT 'Full Table Move - Starting Table 2 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2 
	    
      END TRY      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END           
                                             
     ELSE      
       BEGIN      
       PRINT ' '      
       PRINT 'Starting Table 2 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11       
        SET @lvcSqlString = N'DELETE FROM ' + @lvcT2TgtName + @lvcWhereString      
       END      
              
      PRINT @lvcSqlString      
      
      EXECUTE dbo.tzg_dmu_bulk_delete @lvcT2TgtName      
       ,@lvcSqlString      
       ,@lnT2Del OUTPUT     
	   PRINT 'SECOND TABLE DELETE RECORDS COUNT  '+ @lvcSECOND_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT2Del)        
   
     END      
    

 IF @lchTGT_BACKUP_REQ = 'Y'
	BEGIN         
	 IF @lvcTHIRD_TBL_NAME <> ' '      
     AND @lnT3Bak > 0      
           BEGIN      
                                                                                        
      
       PRINT ' '      
       PRINT 'Starting Table 3 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11           
          
            ----------------------begin v1.14------------------------------------------------      
            
     IF (@lchRequestFullTableMove = 'Y' AND @lchRequestFullTableTruncate = 'Y')      
        BEGIN      
  IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
         SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+  @lvcT3TgtLinkName + ''''      
       END      
      ELSE      
       BEGIN      
         SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT3TgtLinkName + ''      
       END      
      
      
      PRINT ' '      
      PRINT 'Full Table Move - Starting Table 3 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END             
                                             
     ELSE      
      BEGIN      
       PRINT ' '      
       PRINT 'Starting Table 3 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
       -- check for rate tables which require special logic due to date/time stamp in key       
       IF @lvcTHIRD_TBL_NAME = N'CMC_PDRA_RATE_AGES' AND @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'      
        BEGIN      
        SET @lvcSqlString = N'DELETE FROM ' + @lvcT3TgtName + N' WHERE PDRA_REF_DTM in ' + N'(SELECT DISTINCT PDRA_REF_DTM FROM ' + @lvcT3BakName + N') '      
        END      
       ELSE      
        BEGIN      
        SET @lvcSqlString = N'DELETE FROM ' + @lvcT3TgtName + @lvcWhereString      
        END      
            
        PRINT @lvcSqlString      

        EXECUTE dbo.tzg_dmu_bulk_delete @lvcT3TgtName      
         ,@lvcSqlString      
         ,@lnT3Del OUTPUT 
		
		 PRINT 'THIRD TABLE DELETE RECORDS COUNT  '+ @lvcTHIRD_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT3Del)        
     
      END      
       ----------------------end v1.14--------------------------------------------------      
    END      
     END 
	 ELSE IF @lchTGT_BACKUP_REQ ='N' AND @lvcTHIRD_TBL_NAME <> ' '  
	 BEGIN
	          
     IF (@lchRequestFullTableMove = 'Y' AND @lchRequestFullTableTruncate = 'Y')      
        BEGIN      
	 IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
         SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+  @lvcT3TgtLinkName + ''''      
       END      
      ELSE      
       BEGIN      
         SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT3TgtLinkName + ''      
       END      

      PRINT ' '      
      PRINT 'Full Table Move - Starting Table 3 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END                                                     
     ELSE      
      BEGIN      
       PRINT ' '      
       PRINT 'Starting Table 3 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11           
        SET @lvcSqlString = N'DELETE FROM ' + @lvcT3TgtName + @lvcWhereString      
        END      
            
        PRINT @lvcSqlString      

        EXECUTE dbo.tzg_dmu_bulk_delete @lvcT3TgtName      
         ,@lvcSqlString      
         ,@lnT3Del OUTPUT  
	 PRINT 'THIRD TABLE DELETE RECORDS COUNT  '+ @lvcTHIRD_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT3Del)        

      END      
       ----------------------end v1.14--------------------------------------------------      
    
    
    -- delete table 4       
   IF @lchTGT_BACKUP_REQ = 'Y'
   BEGIN
    IF @lvcFOURTH_TBL_NAME <> ' '      
     AND @lnT4Bak > 0      
     ----------------------begin v1.14------------------------------------------------      
    BEGIN       
     IF (@lchRequestFullTableMove = 'Y' AND @lchRequestFullTableTruncate = 'Y' )      
     BEGIN      
          
      IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
         SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+  @lvcT4TgtLinkName + ''''      
      END      
      ELSE      
       BEGIN      
         SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT4TgtLinkName + ''      
       END      
      
      PRINT ' '      
      PRINT 'Full Table Move - Starting Table 4 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END      
       ----------------------end v1.14--------------------------------------------------      
     ELSE      
      BEGIN      
      
      IF @lvcFOURTH_TBL_NAME= N'NWX_WQRU_QUEUE_RUL' AND @lvcFIRST_TBL_NAME = N'NWX_WQDF_QUEUE_DEF'      
       BEGIN           
        SET @lvcSqlString = N'DELETE WQRU FROM ' + @lvcT4TgtName + N' WQRU' + N' INNER JOIN ' + @lvcT1BakName + N' WQDF       
         ON WQRU.WQFD_QUEUE_ID = WQDF.WQDF_QUEUE_ID' + @lvcWhereString             
       END      
      ELSE      
       BEGIN      
        SET @lvcSqlString = N'DELETE FROM ' + @lvcT4TgtName + @lvcWhereString      
       END      
      
      PRINT ' '      
      PRINT 'Starting Table 4 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString      
      
      EXECUTE dbo.tzg_dmu_bulk_delete @lvcT4TgtName      
       ,@lvcSqlString      
       ,@lnT4Del OUTPUT 
	   PRINT 'FOURTH TABLE DELETE RECORDS COUNT  '+ @lvcFOURTH_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT4Del)        
     
     END      
    END      
    END
	
	ELSE IF @lchTGT_BACKUP_REQ ='N' AND @lvcFOURTH_TBL_NAME <> ' '
	BEGIN
	 IF (@lchRequestFullTableMove = 'Y' AND @lchRequestFullTableTruncate = 'Y' )      
     BEGIN      
          
      IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
         SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+  @lvcT4TgtLinkName + ''''      
      END      
      ELSE      
       BEGIN      
         SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT4TgtLinkName + ''      
       END      
      
      PRINT ' '      
      PRINT 'Full Table Move - Starting Table 4 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END      
       ----------------------end v1.14--------------------------------------------------      
     ELSE      
      BEGIN           
        SET @lvcSqlString = N'DELETE FROM ' + @lvcT4TgtName + @lvcWhereString      
       END      
      
      PRINT ' '      
      PRINT 'Starting Table 4 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString      
      
      EXECUTE dbo.tzg_dmu_bulk_delete @lvcT4TgtName      
       ,@lvcSqlString      
       ,@lnT4Del OUTPUT 
	   PRINT 'FOURTH TABLE DELETE RECORDS COUNT  '+ @lvcFOURTH_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT4Del)        
     END 
	
	  
    -- delete table 5  
IF @lchTGT_BACKUP_REQ = 'Y'
 BEGIN     
    IF @lvcFIFTH_TBL_NAME <> ' '      
     AND @lnT5Bak > 0      
     ----------------------begin v1.14------------------------------------------------      
    BEGIN      
     IF (      
       @lchRequestFullTableMove = 'Y'      
       AND @lchRequestFullTableTruncate = 'Y'      
       )      
     BEGIN      
      --SET @lvcSqlString = @lvcTgtQualifier + N'sp_executesql "TRUNCATE TABLE ' + @lvcT5TgtLinkName + N'"'      
            
      IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
         SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+  @lvcT5TgtLinkName + ''''      
       END      
      ELSE      
       BEGIN      
         SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT5TgtLinkName + ''      
       END      
      
      
      PRINT ' '      
      PRINT 'Full Table Move - Starting Table 5 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END      
     ELSE      
      ----------------------end v1.14--------------------------------------------------      
     BEGIN      
      SET @lvcSqlString = N'DELETE FROM ' + @lvcT5TgtName + @lvcWhereString      
      
      PRINT ' '      
      PRINT 'Starting Table 5 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString     
      
      EXECUTE dbo.tzg_dmu_bulk_delete @lvcT5TgtName      
       ,@lvcSqlString      
       ,@lnT5Del OUTPUT 
	   
	   PRINT 'FIFTH TABLE DELETE RECORDS COUNT  '+ @lvcFIFTH_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT5Del)             
     END      
    END      
   END 

   ELSE  IF @lchTGT_BACKUP_REQ = 'N' AND @lvcFIFTH_TBL_NAME <> ' '  
    BEGIN
	      IF (      
       @lchRequestFullTableMove = 'Y'      
       AND @lchRequestFullTableTruncate = 'Y'      
       )      
     BEGIN      
      --SET @lvcSqlString = @lvcTgtQualifier + N'sp_executesql "TRUNCATE TABLE ' + @lvcT5TgtLinkName + N'"'      
            
      IF @bitTGT_REMOTE_SERVER=1      
       BEGIN               
         SET @lvcSqlString2 = 'EXEC ' + @lvcTGT_SERVER_NAME +'.' + @lvcTGT_DATABASE_NAME +'.'+ 'sys.sp_executesql N''TRUNCATE TABLE '+  @lvcT5TgtLinkName + ''''      
       END      
      ELSE      
       BEGIN      
         SET @lvcSqlString2 = 'TRUNCATE TABLE ' + @lvcT5TgtLinkName + ''      
       END      
      
      
      PRINT ' '      
      PRINT 'Full Table Move - Starting Table 5 Truncation at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString2      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString2      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END      
     ELSE      
      ----------------------end v1.14--------------------------------------------------      
     BEGIN      
      SET @lvcSqlString = N'DELETE FROM ' + @lvcT5TgtName + @lvcWhereString      
      
      PRINT ' '      
      PRINT 'Starting Table 5 Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      PRINT @lvcSqlString     
      
      EXECUTE dbo.tzg_dmu_bulk_delete @lvcT5TgtName      
       ,@lvcSqlString      
       ,@lnT5Del OUTPUT
	     PRINT 'FIFTH TABLE DELETE RECORDS COUNT  '+ @lvcFIFTH_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @lnT5Del)               
     END   
	  END

    -- delete notes     
    IF @lchMOVE_NOTES = 'Y'      
     AND (@lnAtxr1Bak + @lnAtxr2Bak) > 0      
    BEGIN      
     SET @lvcSqlString = N'DELETE FROM ' + @lvcAtntTgtName + N' WHERE ATXR_DEST_ID IN (SELECT DISTINCT ATXR_DEST_ID FROM ' + @lvcAtntBakName + N' ) '      
      
     PRINT ' '      
     PRINT 'Starting ATNT Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     EXECUTE dbo.tzg_dmu_bulk_delete @lvcAtntTgtName      
      ,@lvcSqlString      
      ,@lnDelCt OUTPUT      
      
     /*1.1*/      
     SET @lvcDelCt = CONVERT(VARCHAR(15), @lnDelCt)      
      
     PRINT '' + @lvcDelCt + ' rows deleted from ' + @lvcAtntTgtName + ''      
      
     SET @lvcSqlString = N'DELETE FROM ' + @lvcAtndTgtName + N' WHERE ATXR_DEST_ID IN (SELECT DISTINCT ATXR_DEST_ID FROM ' + @lvcAtndBakName + N' ) '      
      
     PRINT ' '      
     PRINT 'Starting ATND Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     EXECUTE dbo.tzg_dmu_bulk_delete @lvcAtndTgtName      
      ,@lvcSqlString      
      ,@lnDelCt OUTPUT      
      
     SET @lvcDelCt = CONVERT(VARCHAR(15), @lnDelCt)      
      
     PRINT '' + @lvcDelCt + ' rows deleted from ' + @lvcAtndTgtName + ''      
      
     SET @lvcSqlString = N'DELETE FROM ' + @lvcAtxrTgtName + N' WHERE ATXR_SOURCE_ID IN (SELECT DISTINCT ATXR_SOURCE_ID FROM ' + @lvcAtxrBakName + N' )'      
      
     PRINT ' '      
     PRINT 'Starting ATXR Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     EXECUTE dbo.tzg_dmu_bulk_delete @lvcAtxrTgtName      
      ,@lvcSqlString      
      ,@lnDelCt OUTPUT      
      
     SET @lvcDelCt = CONVERT(VARCHAR(15), @lnDelCt)      
      
     PRINT '' + @lvcDelCt + ' rows deleted from ' + @lvcAtxrTgtName + ''      
    END      
--------------------Begin 1.6 --------------------------------------------------      
    -- delete user field      
    IF @lchMOVE_USR_FLD = 'Y'      
     AND (@lnAtxr1Bak + @lnAtxr2Bak) > 0      
    BEGIN      
     --SET @lvcSqlString = N'DELETE FROM ' + @lvcAtufTgtName +       
     --                    N' WHERE ATXR_DEST_ID IN (SELECT DISTINCT ATXR_DEST_ID FROM ' + @lvcAtufBakName + N' ) '      
     SELECT @lvcSqlString = N'DELETE ' + @lvcAtufTgtName + ' FROM ' + @lvcAtufTgtName + N' a JOIN tzgt_dmu_atuf_stage b ON a.ATSY_ID = b.ATSY_ID AND ' + N' a.ATXR_DEST_ID = b.ATXR_DEST_ID AND a.ATUF_SEQ_NO = b.ATUF_SEQ_NO' + N' WHERE b.REQUEST_ID = ' + CONVERT(NVARCHAR(10), @lnREQUEST_ID)      
      
     PRINT ' '      
     PRINT 'Starting ATUF Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     EXECUTE dbo.tzg_dmu_bulk_delete @lvcAtufTgtName      
      ,@lvcSqlString      
      ,@lnDelCt OUTPUT      
      
     SET @lvcDelCt = CONVERT(VARCHAR(15), @lnDelCt)      
      
     PRINT '' + @lvcDelCt + ' rows deleted from ' + @lvcAtufTgtName + ''      
      
     --SET @lvcSqlString = N'DELETE FROM ' + @lvcAtxrTgtName +       
     --                    N' WHERE ATXR_SOURCE_ID IN (SELECT DISTINCT ATXR_SOURCE_ID FROM ' + @lvcAtxrBakName + N' )'      
     SELECT @lvcSqlString = N'DELETE ' + @lvcAtxrTgtName + ' FROM ' + @lvcAtxrTgtName + N' a JOIN tzgt_dmu_atxr_stage b ON a.ATXR_SOURCE_ID = b.ATXR_SOURCE_ID AND ' + N' a.ATSY_ID = b.ATSY_ID AND a.ATXR_DEST_ID = b.ATXR_DEST_ID' + N' WHERE b.REQUEST_ID =  ' + CONVERT(NVARCHAR(10), @lnREQUEST_ID)      
      
     PRINT ' '      
     PRINT 'Starting ATXR for User Field Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
     PRINT @lvcSqlString      
      
     EXECUTE dbo.tzg_dmu_bulk_delete @lvcAtxrTgtName      
      ,@lvcSqlString      
      ,@lnDelCt OUTPUT      
      
     SET @lvcDelCt = CONVERT(VARCHAR(15), @lnDelCt)      
      
     PRINT '' + @lvcDelCt + ' rows deleted from ' + @lvcAtxrTgtName + ''      
    END      
      
    -------------------End 1.6 -----------------------------------------------------      
    -- delete prefixes   
 IF @lchTGT_BACKUP_REQ ='Y'	
  BEGIN  
    IF @lvcPREFIX_TBL_NAME <> ' '      
     AND @lnPfxBak > 0      
    BEGIN      
     SET @lvcSqlString = N'DELETE FROM ' + @lvcPfxTgtName + N' WHERE '      
    
     IF @lvcPREFIX_TBL_NAME = 'PDPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' PDBC_PFX IN (SELECT DISTINCT PDBC_PFX FROM ' + @lvcPfxBakName + N' ) ' + N' AND PDBC_TYPE = ''' + @lvcPREFIX_TYPE + N''''      
     END      
      
     IF @lvcPREFIX_TBL_NAME = 'ITPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N' ITPC_PFX IN (SELECT DISTINCT ITPC_PFX FROM ' + @lvcPfxBakName + N' ) ' + N' AND ITPC_TYPE = ''' + @lvcPREFIX_TYPE + N''''      
     END      
      
     PRINT ' '      
     PRINT @lvcSqlString      
     PRINT 'Starting Prefix Note Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
      
     EXECUTE dbo.tzg_dmu_bulk_delete @lvcPfxTgtName      
      ,@lvcSqlString      
      ,@lnDelCt OUTPUT      
      
     SET @lvcDelCt = CONVERT(VARCHAR(15), @lnDelCt)      
      
     PRINT '' + @lvcDelCt + ' rows deleted from ' + @lvcPfxTgtName + ''      
    END      
  END
  ELSE
      IF @lvcPREFIX_TBL_NAME <> ' '       
    BEGIN
	  SET @lvcSqlString = N'DELETE p FROM ' + @lvcPfxTgtName + N' p ' + N'INNER JOIN ' + @lvcT1ExtName + N' t ON ' + N't.' + @lvcFIRST_COL_NAME + N' = '      
                
     IF @lvcPREFIX_TBL_NAME = 'PDPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N'p.PDBC_PFX AND p.PDBC_TYPE = ''' + @lvcPREFIX_TYPE + N''''      
     END      
      
     IF @lvcPREFIX_TBL_NAME = 'ITPX'      
     BEGIN      
      SET @lvcSqlString = @lvcSqlString + N'p.ITPC_PFX AND p.ITPC_TYPE = ''' + @lvcPREFIX_TYPE + N''''    
     END      
      
     PRINT ' '      
     PRINT @lvcSqlString      
     PRINT 'Starting Prefix Note Delete at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.13      
      
     EXECUTE dbo.tzg_dmu_bulk_delete @lvcPfxTgtName      
      ,@lvcSqlString      
      ,@lnDelCt OUTPUT      
      
     SET @lvcDelCt = CONVERT(VARCHAR(15), @lnDelCt)      
      
     PRINT '' + @lvcDelCt + ' rows deleted from ' + @lvcPfxTgtName + ''      
    END  
 
    -- begin final inserts       
    --------------------Begin 1.6 --------------------------------------------------      
    -- Insert notes       
    IF @lchMOVE_NOTES = 'Y'      
     AND (@lnAtxr1Ext + @lnAtxr2Ext) > 0      
    BEGIN      
     SET @lvcSqlString = N'INSERT INTO ' + @lvcAtntTgtName + N' SELECT * FROM ' + @lvcAtntExtName      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      
     ----------------------end v1.13--------------------------------------------------      
     SET @lvcSqlString = N'INSERT INTO ' + @lvcAtndTgtName + N' SELECT * FROM ' + @lvcAtndExtName      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------      
    END      
      
    -- Insert user fields      
    IF @lchMOVE_USR_FLD = 'Y'      
     AND (@lnAtxr1Ext + @lnAtxr2Ext) > 0      
    BEGIN      
     SET @lvcSqlString = N'INSERT INTO ' + @lvcAtufTgtName + N' SELECT * FROM ' + @lvcAtufExtName      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
 EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------       
    END      
      
    IF (      
      @lchMOVE_USR_FLD = 'Y'      
      OR @lchMOVE_NOTES = 'Y'      
      )      
     AND (@lnAtxr1Ext + @lnAtxr2Ext) > 0      
    BEGIN      
     SET @lvcSqlString = N'INSERT INTO ' + @lvcAtxrTgtName + N' SELECT * FROM ' + @lvcAtxrExtName      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
     SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------      
    END      
      
    -------------------End 1.6 -----------------------------------------------------      
    -- insert prefixes --1.25-- MV       
    IF @lvcPREFIX_TBL_NAME <> ' '      
    BEGIN      
     IF @lvcPREFIX_TBL_NAME = 'PDPX'      
     BEGIN      
      SET @lvcPREFIX_TBL_NAME_ORGIN = 'CMC_PDPX_DESC'      
     END      
      
     IF @lvcPREFIX_TBL_NAME = 'ITPX'      
     BEGIN      
      SET @lvcPREFIX_TBL_NAME_ORGIN = 'CMC_ITPX_DESC'      
     END      
      
     --IF @lvcSkipValidation <> 'Y'      
	 IF @lvcEnableValidation <> 'N'      
     BEGIN      
      SELECT @ColumnList = ColumnList      
      FROM #tzgt_dmu_ResultSetTableNW      
      WHERE RequestTypeId = @lvcREQUEST_TYPE_ID      
       AND TableName = @lvcPREFIX_TBL_NAME_ORGIN      
      
      SET @lvcSqlString = N'INSERT INTO ' + @lvcPfxTgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcPfxExtName      
     END      
     ELSE      
     BEGIN      
      SET @lvcSqlString = N'INSERT INTO ' + @lvcPfxTgtName + N' SELECT * FROM ' + @lvcPfxExtName      
     END      
      
     /*SET @lvcSqlString = N'INSERT INTO ' + @lvcPfxTgtName +       
         N' SELECT * FROM ' + @lvcPfxExtName */      
     PRINT 'PREFIX TABLE FINAL EXECUTION'      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      ----------------------end v1.13--------------------------------------------------      
    END      
      
    -- insert into table 1       
    -- execute special logic for PDRT and PDRC, due to contrived key       
    IF @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'      
     AND @lvcFIRST_TBL_NAME = N'CMC_PDRT_RATE_TBL'      
    BEGIN      
     SET @lvcSqlString = N'SELECT DISTINCT PDRT_CK INTO ' + @lvcRateCkName + N' FROM ' + @lvcT1ExtName      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      
     ----------------------end v1.13--------------------------------------------------      
     -- at least one row must have new key applied       
     IF @@ROWCOUNT > 0      
     BEGIN      
      -- Call stored procedure for rate contrived keys       
      EXECUTE dbo.tzg_dmu_assign_pdrt_ck @pnRequestId = @lnREQUEST_ID      
       ,@pvcRateCkName = @lvcRateCkName      
       ,@pvcTgtQualifier = @lvcTgtQualifier      
       ,@pvcT1ExtName = @lvcT1ExtName      
       ,@pvcT2ExtName = @lvcT2ExtName      
     END      
    END      
      
    /* special logic for rate tables*/      
    ----------------------begin v1.11------------------------------------------------      
    SET @lnBulkCopyError = 0      
    SET @lnBulkCopyErrorMessage = ' '      
      
    --IF @lvcSkipValidation <> 'Y'      
	IF @lvcEnableValidation <> 'N'      
    BEGIN      
     SELECT @ColumnList = ColumnList      
     FROM #tzgt_dmu_ResultSetTableNW      
     WHERE RequestTypeId = @lvcREQUEST_TYPE_ID      
      AND TableName = @lvcFIRST_TBL_NAME      
    END      
    ELSE      
    BEGIN      
     --SET @ColumnList = @lvcSkipValidation      
	 SET @ColumnList = @lvcEnableValidation      
    END      
      
    IF (      
      @bitTGT_REMOTE_SERVER = 1      
      AND @lchTGT_BULK_COPY = 'Y'      
      ) --1.12      
    BEGIN      
     PRINT ' '      
     PRINT 'Starting Table 1 Bulk Copy at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      
     ----------------------begin v1.13---------------------------------------------------      
     ---1.24---add this param @pvcCmnColumnList -----and worked accordingly-------------      
     SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_bulk_copy @pvcTargetName, @pvcCMUSourceServer, @pvcCMUSourceDatabase, @pvcCMUSourceTable,@pvcCmnColumnList, @pnError OUTPUT, @pnErrorMessage OUTPUT, @pnLogMsg OUTPUT'      
     SET @lvcParmDefinition = N'@pvcTargetName NVARCHAR(100),       
           @pvcCMUSourceServer NVARCHAR(100),       
           @pvcCMUSourceDatabase NVARCHAR(20),       
           @pvcCMUSourceTable NVARCHAR(100),      
           @pvcCmnColumnList NVARCHAR(4000),        
           @pnError INT OUTPUT,       
           @pnErrorMessage NVARCHAR(1000) OUTPUT,
		   @pnLogMsg NVARCHAR(1000) OUTPUT'      
      
     BEGIN TRY      
     PRINT @lvcSqlString      
      
      EXECUTE sp_executesql @lvcSqlString      
       ,@lvcParmDefinition      
       ,@pvcTargetName = @lvcT1TgtLinkName      
       ,@pvcCMUSourceServer = @lvcCMU_SERVER_NAME    
       ,@pvcCMUSourceDatabase = @lvcCMU_DATABASE_NAME      
       ,@pvcCMUSourceTable = @lvcT1ExtName      
       ,@pvcCmnColumnList = @ColumnList      
       ,@pnError = @lnBulkCopyError OUTPUT      
       ,@pnErrorMessage = @lnBulkCopyErrorMessage OUTPUT
	   ,@pnLogMsg = @lnLogMsg OUTPUT;  
	   
	     
		 PRINT 'FIRST  ' + @lnLogMsg     
      
      SELECT @lnBulkCopyError      
       ,@lnBulkCopyErrorMessage      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
        ,GETDATE()      
        )      
      
       GOTO UPDATE_AND_CONTINUE      
      END      
     END CATCH      
      
     --Check for external error      
     IF @lnBulkCopyError <> 0 OR @lnBulkCopyErrorMessage <> 'Successfully Completed'      
     BEGIN      
      SET @lchStatus = '06'      
      
      INSERT INTO dbo.tzgt_dmu_message_log      
      VALUES (      
       @lnREQUEST_ID      
       ,'F'      
       ,'External Bulk Copy Error - Error# ' + CONVERT(VARCHAR(10), @lnBulkCopyError)      
       ,GETDATE()      
       )      
      
      GOTO UPDATE_AND_CONTINUE      
     END      
       ----------------------end v1.13--------------------------------------------------      
    END      
    ELSE      
 BEGIN      
     --US#18836: Alter table  _add  with PK_ID Identity      
     --SET @alterrequest_add= N'ALTER TABLE'+' '+ @lvcT1ExtName+' '+' ADD PK_ID INT IDENTITY(1,1)';      
     --EXECUTE sp_executesql @alterrequest_add       
     /*SET @lvcSqlString = N'INSERT INTO ' + @lvcT1TgtName +       
       N' SELECT * FROM ' + @lvcT1ExtName  */--MV SUPORT      
     --PRINT 'FIRST TABLE EXECUTION'      
      
     --SELECT @ColumnList = ColumnList FROM #tzgt_dmu_ResultSetTableNW  WHERE RequestTypeId=@lvcREQUEST_TYPE_ID AND TableName=@lvcFIRST_TBL_NAME      
     --SELECT @lvcTgt1ColList = TgtColList FROM @ltv_DatalenDiff  WHERE RequestTypeId=@lvcREQUEST_TYPE_ID AND TableName=@lvcFIRST_TBL_NAME      
     --IF @lvcSkipValidation <> 'Y'      
	 IF @lvcEnableValidation <> 'N'      
     BEGIN      
      SET @lvcSqlString = N'INSERT INTO ' + @lvcT1TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT1ExtName      
     END      
     ELSE      
     BEGIN      
         --US#18836 : Calling procedure to get column list 
		 IF @lchTGT_BACKUP_REQ = 'Y'
		  BEGIN
					 EXEC tzg_dmu_Reqtyp_Columnlist      
					 @lvcT1ExtName
					,@lvcSRC_SERVER_NAME      
					,@lvcSRC_DATABASE_NAME      
					,@lvcSRC_SCHEMA_NAME      
					,@lvcTGT_SERVER_NAME      
					,@lvcTGT_DATABASE_NAME      
					 ,@lvcTGT_SCHEMA_NAME       
					 ,@lvcT1BakName 
					 ,@lchTGT_BACKUP_REQ
					 
					 ,@ResultColumnlist OUT   

		 END
		   ELSE IF @lchTGT_BACKUP_REQ = 'N'
		    BEGIN
				 EXEC tzg_dmu_Reqtyp_Columnlist      
					   @lvcFIRST_TBL_NAME 
					   ,@lvcSRC_SERVER_NAME      
					   ,@lvcSRC_DATABASE_NAME      
					   ,@lvcSRC_SCHEMA_NAME      
					   ,@lvcTGT_SERVER_NAME      
					   ,@lvcTGT_DATABASE_NAME      
					   ,@lvcTGT_SCHEMA_NAME      
					   ,@lvcFIRST_TBL_NAME
					   ,@lchTGT_BACKUP_REQ
					
					  ,@ResultColumnlist OUT   
			
      END
      SELECT @ColumnList= @ResultColumnlist           
      PRINT    @lvcT1ExtName  
     --US#18836 : insert query  for target table
	  SET @lvcSqlString = N'INSERT INTO ' + @lvcT1TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT1ExtName      
     --SET @lvcSqlString = N'INSERT INTO ' + @lvcT1TgtName + N' SELECT * FROM ' + @lvcT1ExtName      
    END
     PRINT ' '      
     --PRINT @lvcSqlString      
     PRINT 'Starting Table 1 Insert at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
     BEGIN TRY      
      --US#18836 :Execute bulk insert       
        EXECUTE @RETURN_VALUE = tzg_dmu_bulk_insert @lvcSqlString,@noOfInsertRow,@lvcT1ExtName,@lnREQUEST_ID,@recordsInserted OUT,@lvSqlErrOutQry OUT 
		PRINT 'FIRST TABLE INSERT RECORDS COUNT  '+ @lvcFIRST_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @recordsInserted)        
 --EXECUTE sp_executesql @lvcSqlString      
     END TRY      
     BEGIN CATCH      
     SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
    END      
      
    ------------------------end v1.11------------------------------------------------       
    -- execute special logic for PDRA and PDRC, due to date/time stamps in keys       
    IF @lvcSECOND_TBL_NAME = N'CMC_PDRC_RATE_CAT'      
     AND @lvcTHIRD_TBL_NAME = N'CMC_PDRA_RATE_AGES'      
    BEGIN      
     /* Find records about to be added that may conflict with keys in the target table.  1.1*/      
     SET @lvcSqlString = N'SELECT DISTINCT x.PDRA_REF_DTM INTO ' + @lvcRateDtmName + N' FROM ' + @lvcT3ExtName + N' x INNER JOIN ' + @lvcT3TgtName + N' pdra ON x.PDRA_REF_DTM = pdra.PDRA_REF_DTM '      
      
     PRINT ' '      
     PRINT @lvcSqlString      
      
     ----------------------begin v1.13------------------------------------------------      
     BEGIN TRY      
      EXECUTE sp_executesql @lvcSqlString      
     END TRY      
      
     BEGIN CATCH      
      SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
      BEGIN      
       PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'              
  ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
        ,GETDATE()      
        )      
      END      
     END CATCH      
      
     ----------------------end v1.13--------------------------------------------------      
     -- at least one row must have new date/time applied       
     IF @@ROWCOUNT > 0      
     BEGIN      
      EXECUTE dbo.tzg_dmu_assign_rate_keys @pnRequestId = @lnREQUEST_ID      
       ,@pvcRateDtmName = @lvcRateDtmName      
       ,@pvcT3TgtName = @lvcT3TgtName      
       ,@pvcT2ExtName = @lvcT2ExtName      
       ,@pvcT3ExtName = @lvcT3ExtName      
     END      
    END -- special logic for rate tables       
      
    -- insert into table 2      
    ----------------------begin v1.11------------------------------------------------          
    --IF @lvcSkipValidation <> 'Y'      
	IF @lvcEnableValidation <> 'N'      
    BEGIN      
     SELECT @ColumnList = ColumnList      
     FROM #tzgt_dmu_ResultSetTableNW      
     WHERE RequestTypeId = @lvcREQUEST_TYPE_ID      
      AND TableName = @lvcSECOND_TBL_NAME      
    END      
    ELSE      
    BEGIN      
     --SET @ColumnList = @lvcSkipValidation      
	 SET @ColumnList = @lvcEnableValidation      
    END      
      
    IF @lvcSECOND_TBL_NAME <> ' '      
     AND @lnT2Ext > 0      
     IF (      
       @bitTGT_REMOTE_SERVER = 1      
       AND @lchTGT_BULK_COPY = 'Y'      
       ) --1.12      
     BEGIN      
      PRINT ' '      
      PRINT 'Starting Table 2 Bulk Copy at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
       ----------------------begin v1.13------------------------------------------------      
      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_bulk_copy @pvcTargetName, @pvcCMUSourceServer, @pvcCMUSourceDatabase, @pvcCMUSourceTable,@pvcCmnColumnList, @pnError OUTPUT, @pnErrorMessage OUTPUT, @pnLogMsg OUTPUT'      
      SET @lvcParmDefinition = N'@pvcTargetName NVARCHAR(100),       
            @pvcCMUSourceServer NVARCHAR(100),       
            @pvcCMUSourceDatabase NVARCHAR(20),       
            @pvcCMUSourceTable NVARCHAR(100),      
            @pvcCmnColumnList NVARCHAR(4000),        
            @pnError INT OUTPUT,       
            @pnErrorMessage NVARCHAR(1000) OUTPUT,
			@pnLogMsg NVARCHAR(1000) OUTPUT'      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
        ,@lvcParmDefinition      
        ,@pvcTargetName = @lvcT2TgtLinkName      
        ,@pvcCMUSourceServer = @lvcCMU_SERVER_NAME    
        ,@pvcCMUSourceDatabase = @lvcCMU_DATABASE_NAME      
        ,@pvcCMUSourceTable = @lvcT2ExtName      
        ,@pvcCmnColumnList = @ColumnList      
        ,@pnError = @lnBulkCopyError OUTPUT      
        ,@pnErrorMessage = @lnBulkCopyErrorMessage OUTPUT
		,@pnLogMsg = @lnLogMsg OUTPUT; 
		
	
		PRINT 'SECOND ' + @lnLogMsg + ''     
      
       SELECT @lnBulkCopyError      
        ,@lnBulkCopyErrorMessage      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
      
        GOTO UPDATE_AND_CONTINUE      
       END      
      END CATCH      
      
      --Check for external error      
      IF @lnBulkCopyError <> 0 OR @lnBulkCopyErrorMessage <> 'Successfully Completed'      
      BEGIN      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,'External Bulk Copy Error - Error# ' + CONVERT(VARCHAR(10), @lnBulkCopyError)      
        ,GETDATE()      
        )      
      
       GOTO UPDATE_AND_CONTINUE      
      END      
        ----------------------end v1.13--------------------------------------------------      
     END      
     ELSE      
     BEGIN      
      --US#18836 : Alter table  _add  with PK_ID Identity      
      --SET @alterrequest_add= N'ALTER TABLE'+' '+ @lvcT2ExtName+' '+' ADD PK_ID INT IDENTITY(1,1)';      
      --EXECUTE sp_executesql @alterrequest_add       
      
      /*SET @lvcSqlString = N'INSERT INTO ' + @lvcT2TgtName +       
       N' SELECT * FROM ' + @lvcT2ExtName  */--sat cmd--1.12      
      --PRINT 'MY SECOND TABLE EXECUTION'      
      
      --SELECT @ColumnList = ColumnList FROM #tzgt_dmu_ResultSetTableNW  WHERE RequestTypeId=@lvcREQUEST_TYPE_ID AND TableName=@lvcSECOND_TBL_NAME       
      --IF @lvcSkipValidation <> 'Y'      
	  IF @lvcEnableValidation <> 'N'      
      BEGIN      
       SET @lvcSqlString = N'INSERT INTO ' + @lvcT2TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT2ExtName      
      END      
      ELSE      
      BEGIN      
      
      --US#18836 : Calling procedure to get column list      
    IF @lchTGT_BACKUP_REQ = 'Y'
		  BEGIN
					 EXEC tzg_dmu_Reqtyp_Columnlist      
					 @lvcT2ExtName
					,@lvcSRC_SERVER_NAME      
					,@lvcSRC_DATABASE_NAME      
					,@lvcSRC_SCHEMA_NAME      
					,@lvcTGT_SERVER_NAME      
					,@lvcTGT_DATABASE_NAME      
					 ,@lvcTGT_SCHEMA_NAME       
					 ,@lvcT2BakName 
					 ,@lchTGT_BACKUP_REQ
					 
					 ,@ResultColumnlist OUT   

		 END
		   ELSE IF @lchTGT_BACKUP_REQ = 'N'
		    BEGIN
				 EXEC tzg_dmu_Reqtyp_Columnlist      
					   @lvcSECOND_TBL_NAME 
					   ,@lvcSRC_SERVER_NAME      
					   ,@lvcSRC_DATABASE_NAME      
					   ,@lvcSRC_SCHEMA_NAME      
					   ,@lvcTGT_SERVER_NAME      
					   ,@lvcTGT_DATABASE_NAME      
					   ,@lvcTGT_SCHEMA_NAME      
					   ,@lvcSECOND_TBL_NAME
					   ,@lchTGT_BACKUP_REQ
					
					  ,@ResultColumnlist OUT   
			
      END                   
               
       SELECT @ColumnList= @ResultColumnlist      
      
       --US#18836: insert query  for target table      
        SET @lvcSqlString = N'INSERT INTO ' + @lvcT2TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' +  @lvcT2ExtName      
       --SET @lvcSqlString = N'INSERT INTO ' + @lvcT2TgtName + N' SELECT * FROM ' + @lvcT2ExtName      
      END      
      
      PRINT ' '      
      --PRINT @lvcSqlString      
      PRINT 'Starting Table 2 Insert at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      
      BEGIN TRY      
       --US#18836 :Execute bulk insert       
       EXECUTE @RETURN_VALUE = tzg_dmu_bulk_insert @lvcSqlString,@noOfInsertRow,@lvcT2ExtName,@lnREQUEST_ID,@recordsInserted OUT,@lvSqlErrOutQry OUT      
       PRINT 'SECOND TABLE INSERT RECORDS COUNT  '+ @lvcSECOND_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @recordsInserted)        
	   --EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END      
      
    ----------------------end v1.11--------------------------------------------------      
    -- insert into table 3   
    ----------------------begin v1.11------------------------------------------------      
    --IF @lvcSkipValidation <> 'Y'      
	IF @lvcEnableValidation <> 'N'      
    BEGIN      
     SELECT @ColumnList = ColumnList      
     FROM #tzgt_dmu_ResultSetTableNW      
     WHERE RequestTypeId = @lvcREQUEST_TYPE_ID      
      AND TableName = @lvcTHIRD_TBL_NAME      
    END      
    ELSE      
    BEGIN      
     --SET @ColumnList = @lvcSkipValidation      
	 SET @ColumnList = @lvcEnableValidation      
    END      
      
    IF @lvcTHIRD_TBL_NAME <> ' '      
     AND @lnT3Ext > 0      
     IF (      
       @bitTGT_REMOTE_SERVER = 1      
       AND @lchTGT_BULK_COPY = 'Y'      
       ) --1.12      
     BEGIN      
      PRINT ' '      
      PRINT 'Starting Table 3 Bulk Copy at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
       ----------------------begin v1.13------------------------------------------------      
      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_bulk_copy @pvcTargetName, @pvcCMUSourceServer, @pvcCMUSourceDatabase, @pvcCMUSourceTable,@pvcCmnColumnList, @pnError OUTPUT, @pnErrorMessage OUTPUT, @pnLogMsg OUTPUT'      
      SET @lvcParmDefinition = N'@pvcTargetName NVARCHAR(100),       
            @pvcCMUSourceServer NVARCHAR(100),       
            @pvcCMUSourceDatabase NVARCHAR(20),       
            @pvcCMUSourceTable NVARCHAR(100),      
            @pvcCmnColumnList NVARCHAR(4000),        
            @pnError INT OUTPUT,       
            @pnErrorMessage NVARCHAR(1000) OUTPUT,
			@pnLogMsg NVARCHAR(1000) OUTPUT'      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
        ,@lvcParmDefinition      
        ,@pvcTargetName = @lvcT3TgtLinkName      
        ,@pvcCMUSourceServer = @lvcCMU_SERVER_NAME   
        ,@pvcCMUSourceDatabase = @lvcCMU_DATABASE_NAME      
        ,@pvcCMUSourceTable = @lvcT3ExtName      
        ,@pvcCmnColumnList = @ColumnList      
        ,@pnError = @lnBulkCopyError OUTPUT      
        ,@pnErrorMessage = @lnBulkCopyErrorMessage OUTPUT
		,@pnLogMsg = @lnLogMsg OUTPUT; 
		
		PRINT 'THIRD ' + @lnLogMsg + ''     
      
       SELECT @lnBulkCopyError      
        ,@lnBulkCopyErrorMessage      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
      
        GOTO UPDATE_AND_CONTINUE      
       END      
      END CATCH      
      
      --Check for external error      
      IF @lnBulkCopyError <> 0 OR @lnBulkCopyErrorMessage <> 'Successfully Completed'      
      BEGIN      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,'External Bulk Copy Error - Error# ' + CONVERT(VARCHAR(10), @lnBulkCopyError)      
        ,GETDATE()      
        )      
      
       GOTO UPDATE_AND_CONTINUE      
      END      
        ----------------------end v1.13--------------------------------------------------      
     END      
     ELSE      
     BEGIN      
      --US#18836: Alter table  _add  with PK_ID Identity      
      --SET @alterrequest_add= N'ALTER TABLE'+' '+ @lvcT3ExtName+' '+' ADD PK_ID INT IDENTITY(1,1)';      
      --EXECUTE sp_executesql @alterrequest_add       
      
      /*SET @lvcSqlString = N'INSERT INTO ' + @lvcT3TgtName +       
       N' SELECT * FROM ' + @lvcT3ExtName */--sat cmd --1.12      
      --PRINT 'MV THIRD TABLE EXECUTION'      
      
      --SELECT @ColumnList = ColumnList FROM #tzgt_dmu_ResultSetTableNW  WHERE RequestTypeId=@lvcREQUEST_TYPE_ID AND TableName=@lvcTHIRD_TBL_NAME      
      --IF @lvcSkipValidation <> 'Y'      
	  IF @lvcEnableValidation <> 'N'      
      BEGIN      
       SET @lvcSqlString = N'INSERT INTO ' + @lvcT3TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT3ExtName      
      END      
      ELSE      
      BEGIN      
            
       --US#18836 : Calling procedure to get column list      
        IF @lchTGT_BACKUP_REQ = 'Y'
		  BEGIN
					 EXEC tzg_dmu_Reqtyp_Columnlist      
					 @lvcT3ExtName
					,@lvcSRC_SERVER_NAME      
					,@lvcSRC_DATABASE_NAME      
					,@lvcSRC_SCHEMA_NAME      
					,@lvcTGT_SERVER_NAME      
					,@lvcTGT_DATABASE_NAME      
					 ,@lvcTGT_SCHEMA_NAME       
					 ,@lvcT3BakName 
					 ,@lchTGT_BACKUP_REQ
					 
					 ,@ResultColumnlist OUT   

		 END
		   ELSE IF @lchTGT_BACKUP_REQ = 'N'
		    BEGIN
				 EXEC tzg_dmu_Reqtyp_Columnlist      
					   @lvcTHIRD_TBL_NAME 
					   ,@lvcSRC_SERVER_NAME      
					   ,@lvcSRC_DATABASE_NAME      
					   ,@lvcSRC_SCHEMA_NAME      
					   ,@lvcTGT_SERVER_NAME      
					   ,@lvcTGT_DATABASE_NAME      
					   ,@lvcTGT_SCHEMA_NAME      
					   ,@lvcTHIRD_TBL_NAME
					   ,@lchTGT_BACKUP_REQ
					
					  ,@ResultColumnlist OUT   
			
      END              
               
        SELECT @ColumnList= @ResultColumnlist           
           
       --US#18836 : insert query  for target table      
        SET @lvcSqlString = N'INSERT INTO ' + @lvcT3TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT3ExtName      
      
       --SET @lvcSqlString = N'INSERT INTO ' + @lvcT3TgtName + N' SELECT * FROM ' + @lvcT3ExtName      
      END      
      
      PRINT ' '      
      --PRINT @lvcSqlString      
      PRINT 'Starting Table 3 Insert at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      
      BEGIN TRY      
       --US#18836 :Execute bulk insert       
       EXECUTE @RETURN_VALUE = tzg_dmu_bulk_insert @lvcSqlString,@noOfInsertRow,@lvcT3ExtName,@lnREQUEST_ID,@recordsInserted OUT,@lvSqlErrOutQry OUT 
	   PRINT 'THIRD TABLE INSERT RECORDS COUNT  '+ @lvcTHIRD_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @recordsInserted)        
     
       --EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END      
      
    ----------------------end v1.11--------------------------------------------------      
    -- insert into table 4      
    ----------------------begin v1.11------------------------------------------------        
    --IF @lvcSkipValidation <> 'Y'      
	IF @lvcEnableValidation <> 'N'      
    BEGIN      
     SELECT @ColumnList = ColumnList      
     FROM #tzgt_dmu_ResultSetTableNW      
     WHERE RequestTypeId = @lvcREQUEST_TYPE_ID      
      AND TableName = @lvcFOURTH_TBL_NAME      
    END      
    ELSE      
    BEGIN      
     --SET @ColumnList = @lvcSkipValidation      
	 SET @ColumnList = @lvcEnableValidation      
    END      
      
    IF @lvcFOURTH_TBL_NAME <> ' '      
     AND @lnT4Ext > 0      
     IF (      
       @bitTGT_REMOTE_SERVER = 1      
       AND @lchTGT_BULK_COPY = 'Y'      
       ) --1.12      
     BEGIN      
      PRINT ' '      
      PRINT 'Starting Table 4 Bulk Copy at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
       ----------------------begin v1.13------------------------------------------------      
      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_bulk_copy @pvcTargetName, @pvcCMUSourceServer, @pvcCMUSourceDatabase, @pvcCMUSourceTable,@pvcCmnColumnList, @pnError OUTPUT, @pnErrorMessage OUTPUT, @pnLogMsg OUTPUT'      
      SET @lvcParmDefinition = N'@pvcTargetName NVARCHAR(100),       
            @pvcCMUSourceServer NVARCHAR(100),       
            @pvcCMUSourceDatabase NVARCHAR(20),       
            @pvcCMUSourceTable NVARCHAR(100),      
            @pvcCmnColumnList NVARCHAR(4000),        
            @pnError INT OUTPUT,       
            @pnErrorMessage NVARCHAR(1000) OUTPUT,
			@pnLogMsg NVARCHAR(1000) OUTPUT'      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
        ,@lvcParmDefinition      
        ,@pvcTargetName = @lvcT4TgtLinkName      
        ,@pvcCMUSourceServer = @lvcCMU_SERVER_NAME    
        ,@pvcCMUSourceDatabase = @lvcCMU_DATABASE_NAME      
        ,@pvcCMUSourceTable = @lvcT4ExtName      
        ,@pvcCmnColumnList = @ColumnList      
        ,@pnError = @lnBulkCopyError OUTPUT      
        ,@pnErrorMessage = @lnBulkCopyErrorMessage OUTPUT
		,@pnLogMsg = @lnLogMsg OUTPUT;    
		
		PRINT 'FOURTH ' + @lnLogMsg + ''  
      
   SELECT @lnBulkCopyError      
        ,@lnBulkCopyErrorMessage      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
      
        GOTO UPDATE_AND_CONTINUE      
       END      
      END CATCH      
      
      --Check for external error      
      IF @lnBulkCopyError <> 0 OR @lnBulkCopyErrorMessage <> 'Successfully Completed'      
      BEGIN      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
        @lnREQUEST_ID      
        ,'F'      
        ,'External Bulk Copy Error - Error# ' + CONVERT(VARCHAR(10), @lnBulkCopyError)      
        ,GETDATE()      
        )      
      
       GOTO UPDATE_AND_CONTINUE      
      END      
        ----------------------end v1.13--------------------------------------------------      
     END      
     ELSE      
     BEGIN      
      --US#18836 : Alter table  _add  with PK_ID Identity      
      --SET @alterrequest_add= N'ALTER TABLE'+' '+ @lvcT4ExtName+' '+' ADD PK_ID INT IDENTITY(1,1)';      
      --EXECUTE sp_executesql @alterrequest_add       
      
      /*SET @lvcSqlString = N'INSERT INTO ' + @lvcT4TgtName +       
       N' SELECT * FROM ' + @lvcT4ExtName  */--sat cmd --1.23      
      --PRINT 'MV FOURTH TABLE EXECUTION'      
      
      --SELECT @ColumnList = ColumnList FROM #tzgt_dmu_ResultSetTableNW  WHERE RequestTypeId=@lvcREQUEST_TYPE_ID AND TableName=@lvcFOURTH_TBL_NAME      
      --IF @lvcSkipValidation <> 'Y'      
	  IF @lvcEnableValidation <> 'N'      
      BEGIN      
       SET @lvcSqlString = N'INSERT INTO ' + @lvcT4TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT4ExtName      
      END      
      ELSE      
      BEGIN      
      
       --US#18836 : Calling procedure to get column list      
      IF @lchTGT_BACKUP_REQ = 'Y'
		  BEGIN
					 EXEC tzg_dmu_Reqtyp_Columnlist      
					 @lvcT4ExtName
					,@lvcSRC_SERVER_NAME      
					,@lvcSRC_DATABASE_NAME      
					,@lvcSRC_SCHEMA_NAME      
					,@lvcTGT_SERVER_NAME      
					,@lvcTGT_DATABASE_NAME      
					 ,@lvcTGT_SCHEMA_NAME       
					 ,@lvcT4BakName 
					 ,@lchTGT_BACKUP_REQ
					 
					 ,@ResultColumnlist OUT   

		 END
		   ELSE IF @lchTGT_BACKUP_REQ = 'N'
		    BEGIN
				 EXEC tzg_dmu_Reqtyp_Columnlist      
					   @lvcFOURTH_TBL_NAME 
					   ,@lvcSRC_SERVER_NAME      
					   ,@lvcSRC_DATABASE_NAME      
					   ,@lvcSRC_SCHEMA_NAME      
					   ,@lvcTGT_SERVER_NAME      
					   ,@lvcTGT_DATABASE_NAME      
					   ,@lvcTGT_SCHEMA_NAME      
					   ,@lvcFOURTH_TBL_NAME 
					   ,@lchTGT_BACKUP_REQ
					
					  ,@ResultColumnlist OUT   
			
      END            
               
        SELECT @ColumnList= @ResultColumnlist           
           
          --US#18836 : insert query  for target table      
       SET @lvcSqlString = N'INSERT INTO ' + @lvcT4TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT4ExtName      
      
       --SET @lvcSqlString = N'INSERT INTO ' + @lvcT4TgtName + N' SELECT * FROM ' + @lvcT4ExtName      
      END      
      
      PRINT ' '      
      --PRINT @lvcSqlString      
      PRINT 'Starting Table 4 Insert at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      
      BEGIN TRY      
       --US#18836 :Execute bulk insert       
       EXECUTE @RETURN_VALUE = tzg_dmu_bulk_insert @lvcSqlString,@noOfInsertRow,@lvcT4ExtName,@lnREQUEST_ID,@recordsInserted OUT,@lvSqlErrOutQry OUT      
       PRINT 'FOURTH TABLE INSERT RECORDS COUNT  '+ @lvcFOURTH_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @recordsInserted)        

	   --EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
          )      
       END      
      END CATCH      
     END      
      
    ----------------------end v1.11--------------------------------------------------      
    -- insert into table 5      
    ----------------------begin v1.11------------------------------------------------        
    --IF @lvcSkipValidation <> 'Y'      
	IF @lvcEnableValidation <> 'N'      
    BEGIN      
     SELECT @ColumnList = ColumnList      
     FROM #tzgt_dmu_ResultSetTableNW      
     WHERE RequestTypeId = @lvcREQUEST_TYPE_ID      
      AND TableName = @lvcFIFTH_TBL_NAME      
    END      
    ELSE      
    BEGIN      
     --SET @ColumnList = @lvcSkipValidation      
	 SET @ColumnList = @lvcEnableValidation      
    END      
      
    IF @lvcFIFTH_TBL_NAME <> ' '      
     AND @lnT5Ext > 0      
     IF (@bitTGT_REMOTE_SERVER = 1      
       AND @lchTGT_BULK_COPY = 'Y'      
       ) --1.12      
     BEGIN      
      PRINT ' '      
      PRINT 'Starting Table 5 Bulk Copy at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
       ----------------------begin v1.13------------------------------------------------      
      
      SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_bulk_copy @pvcTargetName, @pvcCMUSourceServer, @pvcCMUSourceDatabase, @pvcCMUSourceTable,@pvcCmnColumnList, @pnError OUTPUT, @pnErrorMessage OUTPUT, @pnLogMsg OUTPUT'      
      SET @lvcParmDefinition = N'@pvcTargetName NVARCHAR(100),       
            @pvcCMUSourceServer NVARCHAR(100),       
            @pvcCMUSourceDatabase NVARCHAR(20),       
            @pvcCMUSourceTable NVARCHAR(100),      
            @pvcCmnColumnList NVARCHAR(4000),        
            @pnError INT OUTPUT,       
            @pnErrorMessage NVARCHAR(1000) OUTPUT,
			@pnLogMsg NVARCHAR(1000) OUTPUT'      
      
      BEGIN TRY      
       EXECUTE sp_executesql @lvcSqlString      
        ,@lvcParmDefinition      
        ,@pvcTargetName = @lvcT5TgtLinkName      
        ,@pvcCMUSourceServer = @lvcCMU_SERVER_NAME      
        ,@pvcCMUSourceDatabase = @lvcCMU_DATABASE_NAME      
        ,@pvcCMUSourceTable = @lvcT5ExtName      
        ,@pvcCmnColumnList = @ColumnList      
        ,@pnError = @lnBulkCopyError OUTPUT      
        ,@pnErrorMessage = @lnBulkCopyErrorMessage OUTPUT
		,@pnLogMsg = @lnLogMsg OUTPUT;      
      
	  PRINT 'FIFTH ' + @lnLogMsg + ''
      
	   SELECT @lnBulkCopyError      
        ,@lnBulkCopyErrorMessage      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
      INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
          @lnREQUEST_ID      
          ,'F'      
          ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
          ,GETDATE()      
           )      
      
        GOTO UPDATE_AND_CONTINUE      
       END      
      END CATCH      
      
      --Check for external error      
      IF @lnBulkCopyError <> 0 OR @lnBulkCopyErrorMessage <> 'Successfully Completed'      
      BEGIN      
       SET @lchStatus = '06'      
      
       INSERT INTO dbo.tzgt_dmu_message_log      
       VALUES (      
             @lnREQUEST_ID      
             ,'F'      
             ,'External Bulk Copy Error - Error# ' + CONVERT(VARCHAR(10), @lnBulkCopyError)      
             ,GETDATE()      
           )      
      
       GOTO UPDATE_AND_CONTINUE      
      END      
        ----------------------end v1.13--------------------------------------------------      
     END      
     ELSE      
     BEGIN      
      --US#18836 : Alter table  _add  with PK_ID Identity      
      --SET @alterrequest_add= N'ALTER TABLE'+' '+ @lvcT5ExtName+' '+' ADD PK_ID INT IDENTITY(1,1)';      
      --EXECUTE sp_executesql @alterrequest_add       
      
      /*SET @lvcSqlString = N'INSERT INTO ' + @lvcT5TgtName +       
       N' SELECT * FROM ' + @lvcT5ExtName */--SAT CMD --1.23      
      --PRINT 'MV FIFTH TABLE EXECUTION'      
      
      --SELECT @ColumnList = ColumnList FROM #tzgt_dmu_ResultSetTableNW  WHERE RequestTypeId=@lvcREQUEST_TYPE_ID AND TableName=@lvcFIFTH_TBL_NAME      
      --IF @lvcSkipValidation <> 'Y'      
	  IF @lvcEnableValidation <> 'N'      
      BEGIN      
       SET @lvcSqlString = N'INSERT INTO ' + @lvcT5TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT5ExtName      
      END      
      ELSE      
      BEGIN      
       --US#18836 : Calling procedure to get column list      
         IF @lchTGT_BACKUP_REQ = 'Y'
		  BEGIN
					 EXEC tzg_dmu_Reqtyp_Columnlist      
					 @lvcT5ExtName
					,@lvcSRC_SERVER_NAME      
					,@lvcSRC_DATABASE_NAME      
					,@lvcSRC_SCHEMA_NAME      
					,@lvcTGT_SERVER_NAME      
					,@lvcTGT_DATABASE_NAME      
					 ,@lvcTGT_SCHEMA_NAME       
					 ,@lvcT5BakName 
					 ,@lchTGT_BACKUP_REQ
					 
					 ,@ResultColumnlist OUT   

		 END
		   ELSE IF @lchTGT_BACKUP_REQ = 'N'
		    BEGIN
				 EXEC tzg_dmu_Reqtyp_Columnlist      
					   @lvcFIFTH_TBL_NAME 
					   ,@lvcSRC_SERVER_NAME      
					   ,@lvcSRC_DATABASE_NAME      
					   ,@lvcSRC_SCHEMA_NAME      
					   ,@lvcTGT_SERVER_NAME      
					   ,@lvcTGT_DATABASE_NAME      
					   ,@lvcTGT_SCHEMA_NAME      
					   ,@lvcFIFTH_TBL_NAME 
					   ,@lchTGT_BACKUP_REQ
					
					  ,@ResultColumnlist OUT   
			
      END                 
               
        SELECT @ColumnList= @ResultColumnlist           
           
       --US#18836 : insert query  for target table      
        SET @lvcSqlString = N'INSERT INTO ' + @lvcT5TgtName + '( ' + @ColumnList + ' ) ' + N' SELECT  ' + @ColumnList + ' FROM ' + @lvcT5ExtName      
      
       --SET @lvcSqlString = N'INSERT INTO ' + @lvcT5TgtName + N' SELECT * FROM ' + @lvcT5ExtName      
      END      
      
      PRINT ' '      
      --PRINT @lvcSqlString      
      PRINT 'Starting Table 5 Insert at ' + CONVERT(VARCHAR(10), CONVERT(TIME, GETDATE())) --1.11      
      
      BEGIN TRY          
      
         --US#18836 :Execute bulk insert       
         EXECUTE @RETURN_VALUE = tzg_dmu_bulk_insert @lvcSqlString,@noOfInsertRow,@lvcT5ExtName,@lnREQUEST_ID,@recordsInserted OUT,@lvSqlErrOutQry OUT      
       PRINT 'FIFTH TABLE INSERT RECORDS COUNT  '+ @lvcFIFTH_TBL_NAME + ' = ' + CONVERT(VARCHAR(10), @recordsInserted)        
	   --EXECUTE sp_executesql @lvcSqlString      
      END TRY      
      
      BEGIN CATCH      
       SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
      
       BEGIN      
        PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
        SET @lchStatus = '06'      
      
        INSERT INTO dbo.tzgt_dmu_message_log      
        VALUES (      
         @lnREQUEST_ID      
         ,'F'      
         ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
         ,GETDATE()      
         )      
       END      
      END CATCH      
     END      
       ----------------------end v1.11--------------------------------------------------      
   END TRY      
      
   BEGIN CATCH      
    SELECT @lnInsertError = ERROR_NUMBER()      
     ,@lvcInsertMessage = ERROR_MESSAGE()      
      
    BEGIN      
     PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
     SET @lchStatus = '06'      
      
     INSERT INTO dbo.tzgt_dmu_message_log      
     VALUES (      
      @lnREQUEST_ID      
      ,'F'      
      ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 200)      
      ,GETDATE()      
      )      
      
     GOTO UPDATE_AND_CONTINUE      
    END      
   END CATCH      
      
         
   --SATHISH try catch --devFix1691      
   UPDATE_AND_CONTINUE: --1.4, moved jump point here to include audits in cleanup process.       
      
   --IF @lchSkipAudit = 'Y'      
    --AND @lvcDisable_fct_Trigger = 'Y'     
 IF @lchEnableAudit= 'N'      
    AND @lvcEnable_fct_Trigger= 'N'      
    
   BEGIN      
    IF @lvcFIRST_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
     PRINT 'FIRST TABLE TRIGGER ENABLE - START'      
      
     SET @lvcSqlString = ''      
     SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_enable_trigger @lvcFIRST_TBL_NAME'      
     SET @lvcParmDefinition = N'@lvcFIRST_TBL_NAME NVARCHAR(100)'      
      
     PRINT 'TABLE NAME: ' + @lvcFIRST_TBL_NAME      
     PRINT @lvcSqlString      
      
     EXECUTE sp_executesql @lvcSqlString      
      ,@lvcParmDefinition      
      ,@lvcFIRST_TBL_NAME      
      
     IF EXISTS (      
       SELECT *      
       FROM sys.objects      
       WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
       )      
     BEGIN      
      IF EXISTS (      
        SELECT 1      
        FROM dbo.tzgt_dmu_facet_disabletrigger      
        WHERE REQUEST_ID = @lnREQUEST_ID      
         AND TGT_TABLE_NAME = @lvcFIRST_TBL_NAME      
        )      
      BEGIN      
       PRINT 'DELETE DISABLED RECORD FROM CMU - START'      
      
       DELETE      
       FROM dbo.tzgt_dmu_facet_disabletrigger      
       WHERE REQUEST_ID = @lnREQUEST_ID      
        AND TGT_TABLE_NAME = @lvcFIRST_TBL_NAME      
      
       PRINT 'DELETE DISABLED RECORD FROM CMU - END'      
      END      
     END      
     ELSE      
     BEGIN      
      PRINT 'TABLE - tzgt_dmu_facet_disabletrigger not present for disable process in the CMU DB'      
     END      
      
     PRINT 'FIRST TABLE TRIGGER ENABLE - END'      
     PRINT ' '      
    END      
      
    IF @lvcSECOND_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
     PRINT 'SECOND TABLE TRIGGER ENABLE - START'      
      
     SET @lvcSqlString = ''      
     SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_enable_trigger @lvcSECOND_TBL_NAME'      
     SET @lvcParmDefinition = N'@lvcSECOND_TBL_NAME NVARCHAR(100)'      
      
     PRINT 'TABLE NAME: ' + @lvcSECOND_TBL_NAME      
     PRINT @lvcSqlString      
      
     EXECUTE sp_executesql @lvcSqlString      
      ,@lvcParmDefinition      
      ,@lvcSECOND_TBL_NAME      
      
     IF EXISTS (      
       SELECT *      
       FROM sys.objects      
       WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
       )      
     BEGIN      
      IF EXISTS (      
        SELECT 1      
        FROM dbo.tzgt_dmu_facet_disabletrigger      
        WHERE REQUEST_ID = @lnREQUEST_ID      
         AND TGT_TABLE_NAME = @lvcSECOND_TBL_NAME      
        )      
      BEGIN      
       PRINT 'DELETE DISABLED RECORD FROM CMU - START'      
      
       DELETE      
       FROM dbo.tzgt_dmu_facet_disabletrigger      
       WHERE REQUEST_ID = @lnREQUEST_ID      
        AND TGT_TABLE_NAME = @lvcSECOND_TBL_NAME      
      
       PRINT 'DELETE DISABLED RECORD FROM CMU - END'      
      END      
     END      
     ELSE      
     BEGIN      
      PRINT 'TABLE - tzgt_dmu_facet_disabletrigger not present for disable process in the CMU DB'      
     END      
      
     PRINT 'SECOND TABLE TRIGGER ENABLE - END'      
     PRINT ' '      
    END      
      
    IF @lvcTHIRD_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
     PRINT 'THIRD TABLE TRIGGER ENABLE - START'      
      
     SET @lvcSqlString = ''      
     SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_enable_trigger @lvcTHIRD_TBL_NAME'      
     SET @lvcParmDefinition = N'@lvcTHIRD_TBL_NAME NVARCHAR(100)'      
      
     PRINT 'TABLE NAME: ' + @lvcTHIRD_TBL_NAME      
     PRINT @lvcSqlString      
      
     EXECUTE sp_executesql @lvcSqlString      
      ,@lvcParmDefinition      
      ,@lvcTHIRD_TBL_NAME      
      
     IF EXISTS (      
       SELECT *      
       FROM sys.objects      
       WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
       )      
     BEGIN      
      IF EXISTS (      
        SELECT 1      
        FROM dbo.tzgt_dmu_facet_disabletrigger      
        WHERE REQUEST_ID = @lnREQUEST_ID      
         AND TGT_TABLE_NAME = @lvcTHIRD_TBL_NAME      
        )      
      BEGIN      
       PRINT 'DELETE DISABLED RECORD FROM CMU - START'      
      
       DELETE      
       FROM dbo.tzgt_dmu_facet_disabletrigger      
       WHERE REQUEST_ID = @lnREQUEST_ID      
        AND TGT_TABLE_NAME = @lvcTHIRD_TBL_NAME      
      
       PRINT 'DELETE DISABLED RECORD FROM CMU - END'      
      END      
     END      
     ELSE      
     BEGIN      
      PRINT 'TABLE - tzgt_dmu_facet_disabletrigger not present for disable process in the CMU DB'      
     END      
      
     PRINT 'THIRD TABLE TRIGGER ENABLE - END'      
     PRINT ' '      
    END      
      
    IF @lvcFOURTH_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
     PRINT 'FOURTH TABLE TRIGGER ENABLE - START'      
      
     SET @lvcSqlString = ''      
     SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_enable_trigger @lvcFOURTH_TBL_NAME'           
	 SET @lvcParmDefinition = N'@lvcFOURTH_TBL_NAME NVARCHAR(100)'      
      
     PRINT 'TABLE NAME: ' + @lvcFIFTH_TBL_NAME      
     PRINT @lvcSqlString      
      
     EXECUTE sp_executesql @lvcSqlString      
      ,@lvcParmDefinition      
      ,@lvcFOURTH_TBL_NAME      
      
     --DELETE DISABLED RECORD - START      
     IF EXISTS (      
       SELECT *      
       FROM sys.objects      
       WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
       )      
     BEGIN      
      IF EXISTS (      
        SELECT 1      
        FROM dbo.tzgt_dmu_facet_disabletrigger      
        WHERE REQUEST_ID = @lnREQUEST_ID      
         AND TGT_TABLE_NAME = @lvcFOURTH_TBL_NAME      
        )      
      BEGIN      
       PRINT 'DELETE DISABLED RECORD FROM CMU - START'      
      
       DELETE      
       FROM dbo.tzgt_dmu_facet_disabletrigger      
       WHERE REQUEST_ID = @lnREQUEST_ID      
        AND TGT_TABLE_NAME = @lvcFOURTH_TBL_NAME      
      
       PRINT 'DELETE DISABLED RECORD FROM CMU - END'      
      END      
     END      
     ELSE      
     BEGIN      
      PRINT 'TABLE - tzgt_dmu_facet_disabletrigger not present for disable process in the CMU DB'      
     END      
      
     PRINT 'FOURTH TABLE TRIGGER ENABLE - END'      
     PRINT ' '      
    END      
      
    IF @lvcFIFTH_TBL_NAME <> ' '      
    BEGIN      
     PRINT ' '      
     PRINT 'FIFTH TABLE TRIGGER ENABLE - START'      
      
     SET @lvcSqlString = ''      
     SET @lvcSqlString = N'EXEC ' + @lvcTGT_SERVER_NAME + N'.' + @lvcTGT_DATABASE_NAME + '.' + @lvcTGT_SCHEMA_NAME + '.tzg_dmu_enable_trigger @lvcFIFTH_TBL_NAME'      
     SET @lvcParmDefinition = N'@lvcFIFTH_TBL_NAME NVARCHAR(100)'      
      
     PRINT 'TABLE NAME: ' + @lvcFIFTH_TBL_NAME      
     PRINT @lvcSqlString      
      
     EXECUTE sp_executesql @lvcSqlString      
      ,@lvcParmDefinition      
      ,@lvcFIFTH_TBL_NAME      
      
     IF EXISTS (      
       SELECT *      
       FROM sys.objects      
       WHERE object_id = OBJECT_ID(N'[dbo].[tzgt_dmu_facet_disabletrigger]')      
       )      
     BEGIN      
      IF EXISTS (      
        SELECT 1      
        FROM dbo.tzgt_dmu_facet_disabletrigger      
        WHERE REQUEST_ID = @lnREQUEST_ID      
         AND TGT_TABLE_NAME = @lvcFIFTH_TBL_NAME      
        )      
      BEGIN      
       PRINT 'DELETE DISABLED RECORD FROM CMU - START'      
      
       DELETE      
       FROM dbo.tzgt_dmu_facet_disabletrigger      
       WHERE REQUEST_ID = @lnREQUEST_ID      
        AND TGT_TABLE_NAME = @lvcFIFTH_TBL_NAME      
      
       PRINT 'DELETE DISABLED RECORD FROM CMU - END'      
      END      
     END      
     ELSE      
     BEGIN      
      PRINT 'TABLE - tzgt_dmu_facet_disabletrigger not present for disable process in the CMU DB'      
     END      
      
     PRINT 'FIFTH TABLE TRIGGER ENABLE - END'      
     PRINT ' '      
    END      
   END      
      
   --Reset auditing on target tables if necessary       
   IF @lchAuditFlag = 'Y'      
    AND @lchT1Audited = 'Y'      
   BEGIN      
    EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'ON'      
     ,@lvcFIRST_TBL_NAME      
     ,@lvcTgtTbtbTable      
     ,@lchT1Audited OUT      
   END      
      
   IF @lchAuditFlag = 'Y'      
    AND @lchT2Audited = 'Y'     BEGIN      
    EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'ON'      
     ,@lvcSECOND_TBL_NAME      
     ,@lvcTgtTbtbTable      
     ,@lchT2Audited OUT      
   END      
      
   IF @lchAuditFlag = 'Y'      
    AND @lchT3Audited = 'Y'      
   BEGIN      
    EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'ON'      
     ,@lvcTHIRD_TBL_NAME      
     ,@lvcTgtTbtbTable      
     ,@lchT3Audited OUT      
   END      
      
   IF @lchAuditFlag = 'Y'      
    AND @lchT4Audited = 'Y'      
   BEGIN      
    EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'ON'      
     ,@lvcFOURTH_TBL_NAME      
     ,@lvcTgtTbtbTable      
     ,@lchT4Audited OUT      
   END      
      
   IF @lchAuditFlag = 'Y'      
    AND @lchT5Audited = 'Y'      
   BEGIN    
    EXECUTE @lnRetCd = dbo.tzg_dmu_set_audit 'ON'      
     ,@lvcFIFTH_TBL_NAME      
     ,@lvcTgtTbtbTable      
     ,@lchT5Audited OUT      
   END      
      
   ---------- Begin 1.6.1 ---------------------------------      
   DELETE FROM tzgt_dmu_atxr_stage WHERE REQUEST_ID = @lnREQUEST_ID      
      
   DELETE FROM tzgt_dmu_atuf_stage WHERE REQUEST_ID = @lnREQUEST_ID      
      
   ---------- End 1.6.1 -----------------------------------      
   /* delete from completed requests if failed prior run*/      
   DELETE FROM tzgt_dmu_completed_requests WHERE REQUEST_ID = @lnREQUEST_ID      
      
   /* Record migration statistics into completed requests table*/  
   INSERT INTO tzgt_dmu_completed_requests (      
    ENVIRONMENT_ID      
    ,REQUEST_ID      
    ,REQUEST_STS      
    ,COMPLETION_DTM      
    ,FIRST_TBL_ADD_CT      
    ,FIRST_TBL_DEL_CT      
    ,SECOND_TBL_ADD_CT      
    ,SECOND_TBL_DEL_CT      
    ,THIRD_TBL_ADD_CT      
    ,THIRD_TBL_DEL_CT      
    ,FOURTH_TBL_ADD_CT      
    ,FOURTH_TBL_DEL_CT      
    ,FIFTH_TBL_ADD_CT      
    ,FIFTH_TBL_DEL_CT      
    ,ACTUAL_VAL_CT      
    )      
   SELECT @pchTgtEnvironmentID AS ENVIRONMENT_ID      
    ,@lnREQUEST_ID AS REQUEST_ID      
    ,@lchStatus AS REQUEST_STS      
    ,GETDATE() AS COMPLETION_DTM      
    ,@lnT1Ext AS FIRST_TBL_ADD_CT      
    ,@lnT1Bak AS FIRST_TBL_DEL_CT      
    ,--1.15      
    @lnT2Ext AS SECOND_TBL_ADD_CT      
    ,@lnT2Bak AS SECOND_TBL_DEL_CT      
    ,--1.15      
    @lnT3Ext AS THIRD_TBL_ADD_CT      
    ,@lnT3Bak AS THIRD_TBL_DEL_CT      
    ,--1.15      
    @lnT4Ext AS FOURTH_TBL_ADD_CT      
    ,@lnT4Bak AS FOURTH_TBL_DEL_CT      
    ,--1.15      
    @lnT5Ext AS FIFTH_TBL_ADD_CT      
    ,@lnT5Bak AS FIFTH_TBL_DEL_CT      
    ,--1.15      
    @lnValCt AS ACTUAL_VAL_CT    

   -- Begin 1.1       
   -- This step was moved inside the cursor loop to prevent loss of data       
   -- on completed requests when a subsequent request errors out.       
   -- Update migration request record with completion data       
   PRINT ' '      
   PRINT 'Updating Migration Request to Reflect Completion'      
   PRINT ' '      
   PRINT ' '      
   PRINT ' '      
      
   UPDATE req      
   SET REQUEST_STS = comp.REQUEST_STS      
    ,COMPLETION_DTM = comp.COMPLETION_DTM      
    ,FIRST_TBL_DEL_CT = comp.FIRST_TBL_DEL_CT      
    ,FIRST_TBL_ADD_CT = comp.FIRST_TBL_ADD_CT      
    ,SECOND_TBL_DEL_CT = comp.SECOND_TBL_DEL_CT      
    ,SECOND_TBL_ADD_CT = comp.SECOND_TBL_ADD_CT      
    ,THIRD_TBL_DEL_CT = comp.THIRD_TBL_DEL_CT      
    ,THIRD_TBL_ADD_CT = comp.THIRD_TBL_ADD_CT      
    ,FOURTH_TBL_DEL_CT = comp.FOURTH_TBL_DEL_CT      
    ,FOURTH_TBL_ADD_CT = comp.FOURTH_TBL_ADD_CT      
    ,FIFTH_TBL_DEL_CT = comp.FIFTH_TBL_DEL_CT      
    ,FIFTH_TBL_ADD_CT = comp.FIFTH_TBL_ADD_CT      
    ,ACTUAL_VAL_CT = comp.ACTUAL_VAL_CT      
   FROM tzgt_dmu_completed_requests comp      
   JOIN tzgt_dmu_migration_request req ON comp.REQUEST_ID = req.REQUEST_ID      
   WHERE @lnREQUEST_ID = comp.REQUEST_ID      
      
   /* End 1.1*/      
   SET @ldtmEndDtm = GETDATE()      
   SET @lvcDateString = CONVERT(VARCHAR(30), @ldtmEndDtm, 109)      
         
   UPDATE tzgt_dmu_migration_request set COMPLETION_DTM = GETDATE() WHERE REQUEST_ID = @lnREQUEST_ID      
         
   PRINT ' '      
   PRINT 'End processing on request #:' + CONVERT(VARCHAR(20), @lnREQUEST_ID) + ''      
   PRINT 'End at: ' + @lvcDateString + ''      
      
   SET @lvcDateString = CONVERT(VARCHAR(30), DATEDIFF(ss, @ldtmBeginDtm, @ldtmEndDtm)) + ' Seconds'         
      
   PRINT 'Elapsed time: ' + @lvcDateString + ''      
   PRINT '---------------------------------------------------------------'      
   PRINT ' '      
   PRINT ' '      
      
   --  Get Next record (next migration request)       
   BPA_FETCH_NXT_RECORD:      
      
   FETCH csMigrationRequest      
   INTO @lnREQUEST_ID      
    ,@lvcREQUEST_TYPE_ID      
    ,@lvcFIRST_TBL_NAME      
    ,@lvcSECOND_TBL_NAME      
    ,@lvcTHIRD_TBL_NAME   
    ,@lvcFOURTH_TBL_NAME      
    ,@lvcFIFTH_TBL_NAME      
    ,@lvcFIRST_COL_NAME      
    ,@lvcFIRST_COL_VAL      
    ,@lvcSECOND_COL_NAME      
    ,@lvcSECOND_COL_VAL      
    ,@lvcTHIRD_COL_NAME      
    ,@lvcTHIRD_COL_VAL      
    ,@lvcFOURTH_COL_NAME      
    ,@lvcFOURTH_COL_VAL      
    ,@lvcFIFTH_COL_NAME      
    ,@lvcFIFTH_COL_VAL      
    ,@lvcFIRST_CONST_COL      
    ,@lvcFIRST_CONST_VAL      
    ,@lvcSECOND_CONST_COL      
    ,@lvcSECOND_CONST_VAL      
    ,@lvcPREFIX_TBL_NAME      
    ,@lvcPREFIX_TYPE      
    ,@lchMOVE_NOTES  
	,@lchTGT_BACKUP_REQ    
    ,@lchMOVE_USR_FLD      
    ,@lchALLOW_DELETE --1.6      
    ,@lchCHECK_VAL_CT      
    ,@lnREQUEST_VAL_CT      
    ,@lvcSRC_SERVER_NAME      
    ,@lvcSRC_DATABASE_NAME      
    ,@lvcSRC_SCHEMA_NAME      
    ,@lvcSRC_DATABASE_VERSION      
    ,@lvcTGT_SERVER_NAME      
    ,@lvcTGT_DATABASE_NAME      
    ,@lvcTGT_SCHEMA_NAME      
    ,@lvcTGT_DATABASE_VERSION      
    ,@lchTGT_BULK_COPY --1.12      
    ,@lvcCMU_SERVER_NAME      
    ,@lvcREQUEST_STS      
    ,@lchRequestFullTableTruncate --1.15      
    ,@BPAIndicator -- Added on 6/17/2016      
    --,@lvcSkip_Audit -- Added on 03/21/2018.  - SKIP_AUDIT        
    --,@lvcDisable_fct_Trigger -- Added on 03/21/2018.  - Disable facets Trigger         
	,@lvcEnable_Audit --Added on 02/05/2021 For Enable Audit    
	,@lvcEnable_fct_Trigger--Added on 02/05/2021 For Enable Trigger               
    ,@lvcSRC_ENVIRONMENT_ID      
    ,@lvcREQUEST_CLASS_ID      
    ,@lvcCLASS_STATUS      
    ,@lvcTYPE_STATUS      

  END      
      
  --Generate Auto Comparison Request for Successfull Migration      
  Exec tzg_dmu_create_autocompare      
      
  /* while loop for migration request cursor --*/      
  /* delete from completed request table*/      
  DELETE FROM tzgt_dmu_completed_requests      
    WHERE ENVIRONMENT_ID = @pchTgtEnvironmentID      
      
  DEALLOCATE csMigrationRequest      
      
  PRINT 'All steps completed'      
      
  -- Exit from procedure       
  RETURN 0      
 END TRY      
      
 BEGIN CATCH      
  PRINT '*****************************************************************************'      
  PRINT 'Re Enable facets triggers if migration process failed - start'      
      
  EXECUTE @lnRetCd = dbo.tzg_dmu_re_enable_facets_triggers      
      
  PRINT 'Re Enable facets triggers if migration process failed - end'      
  PRINT '*****************************************************************************'      
      
  SELECT @lnInsertError = ERROR_NUMBER(),@lvcInsertMessage = ERROR_MESSAGE()      
        
  UPDATE tzgt_dmu_migration_request set COMPLETION_DTM = GETDATE() WHERE REQUEST_ID = @lnREQUEST_ID      
        
  BEGIN      
   PRINT CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + @lvcInsertMessage      
      
   IF (SELECT CURSOR_STATUS('global', 'csMigrationRequest')) >= - 1      
   BEGIN      
    DEALLOCATE csMigrationRequest      
   END      
      
   IF @lnREQUEST_ID IS NOT NULL      
   BEGIN      
    INSERT INTO dbo.tzgt_dmu_message_log      
    VALUES(      
      @lnREQUEST_ID      
      ,'F'      
      ,CONVERT(VARCHAR(10), @lnInsertError) + ' - ' + SUBSTRING(@lvcInsertMessage, 1, 192)      
      ,GETDATE()      
       )      
     --GOTO UPDATE_AND_CONTINUE       
   END      
   RETURN @lnInsertError      
  END      
 END CATCH      
END           








DROP TABLE IF EXISTS dev.dbo.AHEAD_TBL_IDXS

CREATE TABLE dev.dbo.AHEAD_TBL_IDXS (
DATABASE_NM     NVARCHAR(30),
SCHEMA_NM       NVARCHAR(20),
TABLE_NM        NVARCHAR(50),
INDEX_NM        NVARCHAR(80),
FQ_NM           NVARCHAR(160),
INDEX_TYPE      VARCHAR(20),
IDX_DROP_SQL    VARCHAR(MAX),
IDX_CREATE_SQL  VARCHAR(MAX) )

-------------------------------------------------------------------------------
--- SCRIPT TO GENERATE THE CREATION SCRIPT OF ALL PK AND UNIQUE CONSTRAINTS.
-------------------------------------------------------------------------------

declare @SchemaName varchar(100)
declare @TableName varchar(256)
declare @IndexName varchar(256)
declare @ColumnName varchar(100)
declare @is_unique_constraint varchar(100)
declare @IndexTypeDesc varchar(100)
declare @FileGroupName varchar(100)
declare @is_disabled varchar(100)
declare @IndexOptions varchar(max)
declare @IndexColumnId int
declare @IsDescendingKey int 
declare @IsIncludedColumn int
declare @TSQLScripCreationIndex varchar(max)
declare @TSQLScripDisableIndex varchar(max)
declare @is_primary_key varchar(100)

declare CursorIndex cursor for
 select schema_name(t.schema_id) [schema_name], t.name, ix.name,
 case when ix.is_unique_constraint = 1 then ' UNIQUE ' else '' END 
    ,case when ix.is_primary_key = 1 then ' PRIMARY KEY ' else '' END 
 , ix.type_desc,
  case when ix.is_padded=1 then 'PAD_INDEX = ON, ' else 'PAD_INDEX = OFF, ' end
 + case when ix.allow_page_locks=1 then 'ALLOW_PAGE_LOCKS = ON, ' else 'ALLOW_PAGE_LOCKS = OFF, ' end
 + case when ix.allow_row_locks=1 then  'ALLOW_ROW_LOCKS = ON, ' else 'ALLOW_ROW_LOCKS = OFF, ' end
 + case when INDEXPROPERTY(t.object_id, ix.name, 'IsStatistics') = 1 then 'STATISTICS_NORECOMPUTE = ON, ' else 'STATISTICS_NORECOMPUTE = OFF, ' end
 + case when ix.ignore_dup_key=1 then 'IGNORE_DUP_KEY = ON, ' else 'IGNORE_DUP_KEY = OFF, ' end
 + 'SORT_IN_TEMPDB = OFF, FILLFACTOR =' + CAST(ix.fill_factor AS VARCHAR(3)) AS IndexOptions
 , FILEGROUP_NAME(ix.data_space_id) FileGroupName
 from sys.tables t 
 inner join sys.indexes ix on t.object_id=ix.object_id
 where ix.type_desc = 'CLUSTERED'
 and  (ix.is_primary_key=1 or ix.is_unique_constraint=1) 
 and schema_name(t.schema_id) IN ('dbo','audit')
 --and t.name LIKE 'CMC%'
 and t.is_ms_shipped=0 and t.name<>'sysdiagrams'
 order by schema_name(t.schema_id), t.name, ix.name
open CursorIndex
fetch next from CursorIndex into  @SchemaName, @TableName, @IndexName, @is_unique_constraint, @is_primary_key, @IndexTypeDesc, @IndexOptions, @FileGroupName
while (@@fetch_status=0)
begin
 declare @IndexColumns varchar(max)
 declare @IncludedColumns varchar(max)
 set @IndexColumns=''
 set @IncludedColumns=''
 declare CursorIndexColumn cursor for 
 select col.name, ixc.is_descending_key, ixc.is_included_column
 from sys.tables tb 
 inner join sys.indexes ix on tb.object_id=ix.object_id
 inner join sys.index_columns ixc on ix.object_id=ixc.object_id and ix.index_id= ixc.index_id
 inner join sys.columns col on ixc.object_id =col.object_id  and ixc.column_id=col.column_id
 where ix.type>0 and (ix.is_primary_key=1 or ix.is_unique_constraint=1)
 and schema_name(tb.schema_id)=@SchemaName and tb.name=@TableName and ix.name=@IndexName
 order by ixc.key_ordinal
 open CursorIndexColumn 
 fetch next from CursorIndexColumn into  @ColumnName, @IsDescendingKey, @IsIncludedColumn
 while (@@fetch_status=0)
 begin
  if @IsIncludedColumn=0 
    set @IndexColumns=@IndexColumns + @ColumnName  + case when @IsDescendingKey=1  then ' DESC, ' else  ' ASC, ' end
  else 
   set @IncludedColumns=@IncludedColumns  + @ColumnName  +', ' 
     
  fetch next from CursorIndexColumn into @ColumnName, @IsDescendingKey, @IsIncludedColumn
 end
 close CursorIndexColumn
 deallocate CursorIndexColumn
 set @IndexColumns = substring(@IndexColumns, 1, len(@IndexColumns)-1)
 set @IncludedColumns = case when len(@IncludedColumns) >0 then substring(@IncludedColumns, 1, len(@IncludedColumns)-1) else '' end
--  print @IndexColumns
--  print @IncludedColumns

set @TSQLScripCreationIndex =''
set @TSQLScripDisableIndex =''
set  @TSQLScripCreationIndex='ALTER TABLE '+  QUOTENAME(@SchemaName) +'.'+ QUOTENAME(@TableName)+ ' ADD CONSTRAINT ' +  QUOTENAME(@IndexName) + @is_unique_constraint + @is_primary_key + +@IndexTypeDesc +  '('+@IndexColumns+') '+ 
 case when len(@IncludedColumns)>0 then CHAR(13) +'INCLUDE (' + @IncludedColumns+ ')' else '' end + CHAR(13)+'WITH (' + @IndexOptions+ ') ON ' + QUOTENAME(@FileGroupName) + ';'  

set @TSQLScripDisableIndex ='ALTER TABLE '+QUOTENAME(@SchemaName) +'.'+ QUOTENAME(@TableName)+ ' DROP CONSTRAINT ' +QUOTENAME(@IndexName)+ '  WITH ( ONLINE = OFF );  GO '

--print @TSQLScripCreationIndex
--print @TSQLScripDisableIndex


INSERT INTO dev.dbo.AHEAD_TBL_IDXS (DB_NAME(),
						@SchemaName,
						@TableName,
						@IndexName,
						DB_NAME()+'.'+@SchemaName+'.'+@IndexName,
						@IndexTypeDesc,
						@TSQLScripDisableIndex,
						@TSQLScripCreationIndex)


fetch next from CursorIndex into  @SchemaName, @TableName, @IndexName, @is_unique_constraint, @is_primary_key, @IndexTypeDesc, @IndexOptions, @FileGroupName

end
close CursorIndex
deallocate CursorIndex

------------------------------------------------------------------------------------------
--- SCRIPT TO GENERATE THE CREATION SCRIPT OF CLUSTERED INDEXES (NOT PK CONSTRAINTS)
------------------------------------------------------------------------------------------

INSERT INTO dev.dbo.AHEAD_TBL_IDXS 
SELECT DB_NAME()  AS DATABASE_NM,
    Schema_name(T.Schema_id)   AS SCHEMA_NM,
	T.name  AS TABLE_NM,
	I.name  AS INDEX_NM,
	DB_NAME()+'.'+Schema_name(T.Schema_id)+'.'+I.name,
	I.type_desc,
	'DROP INDEX '+Schema_name(T.Schema_id)+'.'+I.name+' ON '+Schema_name(T.Schema_id)+'.'+I.name+' WITH ( ONLINE = OFF );  GO ',
    ' CREATE ' + 
    CASE WHEN I.is_unique = 1 THEN ' UNIQUE ' ELSE '' END  +  
    I.type_desc COLLATE DATABASE_DEFAULT +' INDEX ' +   
    I.name  + ' ON '  +  
    Schema_name(T.Schema_id)+'.'+T.name + ' ( ' + 
    KeyColumns + ' )  ' + 
    ISNULL(' INCLUDE ('+IncludedColumns+' ) ','') + 
    ISNULL(' WHERE  '+I.Filter_definition,'') + ' WITH ( ' + 
    CASE WHEN I.is_padded = 1 THEN ' PAD_INDEX = ON ' ELSE ' PAD_INDEX = OFF ' END + ','  + 
    'FILLFACTOR = '+CONVERT(CHAR(5),CASE WHEN I.Fill_factor = 0 THEN 100 ELSE I.Fill_factor END) + ','  + 
    -- default value 
    'SORT_IN_TEMPDB = OFF '  + ','  + 
    CASE WHEN I.ignore_dup_key = 1 THEN ' IGNORE_DUP_KEY = ON ' ELSE ' IGNORE_DUP_KEY = OFF ' END + ','  + 
    CASE WHEN ST.no_recompute = 0 THEN ' STATISTICS_NORECOMPUTE = OFF ' ELSE ' STATISTICS_NORECOMPUTE = ON ' END + ','  + 
    -- default value  
    ' DROP_EXISTING = ON '  + ','  + 
    -- default value  
    ' ONLINE = OFF '  + ','  + 
   CASE WHEN I.allow_row_locks = 1 THEN ' ALLOW_ROW_LOCKS = ON ' ELSE ' ALLOW_ROW_LOCKS = OFF ' END + ','  + 
   CASE WHEN I.allow_page_locks = 1 THEN ' ALLOW_PAGE_LOCKS = ON ' ELSE ' ALLOW_PAGE_LOCKS = OFF ' END  + ' ) ON [' + 
   DS.name + ' ] '  [CreateIndexScript] 
FROM sys.indexes I   
 JOIN sys.tables T ON T.object_id = I.object_id and schema_name(T.schema_id) IN ('dbo','audit') --  and T.name like 'CMC%'  
 JOIN sys.sysindexes SI ON I.object_id = SI.id AND I.index_id = SI.indid 
 JOIN (SELECT * FROM (  
    SELECT IC2.object_id , IC2.index_id ,  
        STUFF((SELECT ' , ' + C.name + CASE WHEN MAX(CONVERT(INT,IC1.is_descending_key)) = 1 THEN ' DESC ' ELSE ' ASC ' END 
    FROM sys.index_columns IC1  
    JOIN sys.columns C   
       ON C.object_id = IC1.object_id   
       AND C.column_id = IC1.column_id   
       AND IC1.is_included_column = 0  
    WHERE IC1.object_id = IC2.object_id   
       AND IC1.index_id = IC2.index_id   
    GROUP BY IC1.object_id,C.name,index_id  
    ORDER BY MAX(IC1.key_ordinal)  
       FOR XML PATH('')), 1, 2, '') KeyColumns   
    FROM sys.index_columns IC2   
    --WHERE IC2.Object_id = object_id('Person.Address') --Comment for all tables  
    GROUP BY IC2.object_id ,IC2.index_id) tmp3 )tmp4   
  ON I.object_id = tmp4.object_id AND I.index_id = tmp4.index_id  
 JOIN sys.stats ST ON ST.object_id = I.object_id AND ST.stats_id = I.index_id   
 JOIN sys.data_spaces DS ON I.data_space_id=DS.data_space_id   
 JOIN sys.filegroups FG ON I.data_space_id=FG.data_space_id   
 LEFT JOIN (SELECT * FROM (   
    SELECT IC2.object_id , IC2.index_id ,   
        STUFF((SELECT ' , ' + C.name  
    FROM sys.index_columns IC1   
    JOIN sys.columns C    
       ON C.object_id = IC1.object_id    
       AND C.column_id = IC1.column_id    
       AND IC1.is_included_column = 1   
    WHERE IC1.object_id = IC2.object_id    
       AND IC1.index_id = IC2.index_id    
    GROUP BY IC1.object_id,C.name,index_id   
       FOR XML PATH('')), 1, 2, '') IncludedColumns    
   FROM sys.index_columns IC2    
   --WHERE ---IC2.object_id = object_id('dbo.CMC_CDPP_LI_ITS_PR') --Comment for all tables   
   GROUP BY IC2.object_id ,IC2.index_id) tmp1   
   WHERE IncludedColumns IS NOT NULL ) tmp2    
ON tmp2.object_id = I.object_id AND tmp2.index_id = I.index_id   
WHERE I.is_primary_key = 0 AND I.is_unique_constraint = 0 
AND I.type_desc = 'CLUSTERED'
 

------------------------------------------------------------------------------------------
--- SCRIPT TO GENERATE THE CREATION SCRIPT OF NONCLUSTERED INDEXES 
------------------------------------------------------------------------------------------

INSERT INTO dev.dbo.AHEAD_TBL_IDXS
SELECT distinct DB_NAME(), SCHEMA_NAME(sys.objects.schema_id), 
       sys.objects.name  as TABLE_NM,
	   sys.indexes.name  as INDEX_NM,
	   DB_NAME()+'.'+SCHEMA_NAME(sys.objects.schema_id)+'.'+sys.indexes.name  as FQ_NM,
	   sys.indexes.type_desc  as INDEX_TYPE,
        'ALTER INDEX ' + sys.indexes.name + ' ON  ' + SCHEMA_NAME(sys.objects.schema_id)+'.'+ sys.objects.name + ' DISABLE;' +CHAR(13)+CHAR(10) as IDX_DROP_SQL,
       'ALTER INDEX ' + sys.indexes.name + ' ON  ' + SCHEMA_NAME(sys.objects.schema_id)+'.'+ sys.objects.name + ' REBUILD;' +CHAR(13)+CHAR(10) as IDX_CREATE_SQL
FROM sys.indexes
JOIN sys.objects 
    ON sys.indexes.object_id = sys.objects.object_id
WHERE sys.indexes.type_desc = 'NONCLUSTERED'
  AND sys.objects.type_desc = 'USER_TABLE'
  and SCHEMA_NAME(sys.objects.schema_id) IN ('dbo','audit') 

  SELECT * FROM ##PKS


-----------------------------------------------------------------------------
---  VALIDATION
-----------------------------------------------------------------------------

SELECT distinct DB_NAME() as DATABASE_NM, SCHEMA_NAME(sys.objects.schema_id) AS SCHEMA_NM, 
       sys.objects.name  as TABLE_NM,
	   sys.indexes.name  as INDEX_NM,
	   DB_NAME()+'.'+SCHEMA_NAME(sys.objects.schema_id)+'.'+sys.indexes.name  as FQ_NM,
	   sys.indexes.type_desc  as INDEX_TYPE
FROM sys.indexes
JOIN sys.objects 
    ON sys.indexes.object_id = sys.objects.object_id
WHERE sys.objects.type_desc = 'USER_TABLE'
AND sys.indexes.name IS NOT NULL
AND SCHEMA_NAME(sys.objects.schema_id) IN ('dbo','audit')





--  FOR HIGH LEVEL INFO


--  DROP TABLE IF EXISTS ##TOP_LEVEL
SELECT -- BRGU.BRGU_GU_ID
        BRGU.RLTD_RULE_TYPE
		,RLTD.RLTD_DESC
		,BRGU.BPTD_BUS_PCS_TYPE
		,BRGU.BRGU_USAGE_ID 
		,RLGD.QLTD_QUAL_TYPE
		--,QLTD.QLTD_DESC
		--,BRGR.RLGD_GU_ID
		--,BRGR.BRGR_SEQ_NO
  --      ,RLGD.RLGD_RUL_GRP_ID
  --      ,RLGD.RLGD_RTYP_PCS_SEQ
  --      ,RLGD.RLTD_RULE_TYPE
--INTO ##TOP_LEVEL
  FROM facets.dbo.BPA_BRGU_RUL_GRP_U              BRGU
INNER JOIN facets.dbo.BPA_BRGR_RUL_GRP_R          BRGR
  ON BRGU.BRGU_GU_ID = BRGR.BRGU_GU_ID
INNER JOIN facets.dbo.BPA_RLGD_RUL_GRP_D          RLGD
  ON BRGR.RLGD_GU_ID = RLGD.RLGD_GU_ID
INNER JOIN facets.dbo.BPA_QLTD_QTYP_D             QLTD
  ON RLGD.QLTD_QUAL_TYPE = QLTD.QLTD_QUAL_TYPE     
INNER JOIN facets.dbo.BPA_RLTD_RTYP_D             RLTD
  ON RLGD.RLTD_RULE_TYPE = RLTD.RLTD_RULE_TYPE
WHERE RLGD.RLGD_RUL_GRP_ID = 'B001'
AND BRGU.RLTD_RULE_TYPE  ='SPCR'

--  FOR SECTION LEVEL DETAILS
--  RLBP_LEVEL = 0 GIVES SECTION INFO
SELECT -- RLGR.RLGD_GU_ID, RLGR.RLBP_GU_ID, 
      RLBP.RLTD_RULE_TYPE,RLBP.RLBP_SECTION,
	  --RLBP.RLBP_LEVEL, RLBP.RLBP_SEQ_NO,
	  RLBP.RLBP_DESC,
 RLBP.RLBP_ACT_VAL
FROM facets.dbo.BPA_RLGR_GRP_SET_R    RLGR
INNER JOIN BPA_RLBP_BP_RULE_D                  RLBP
   ON RLGR.RLBP_GU_ID = RLBP.RLBP_GU_ID
   AND GETDATE() BETWEEN RLBP.RLBP_EFF_DT AND RLBP.RLBP_TERM_DT
WHERE RLBP.RLTD_RULE_TYPE = 'SPCR'
AND  RLBP.RLBP_LEVEL = 0
AND RLGR.RLGD_GU_ID = '7B94DF29-7D46-465C-8C85-89148201C945'
ORDER BY RLBP.RLBP_SECTION, RLBP.RLBP_SEQ_NO



--   COMBINED

SELECT  --BRGU.BPTD_BUS_PCS_TYPE
         BRGU.BRGU_USAGE_ID 
		,QLTD.QLTD_DESC
        --,BRGU.RLTD_RULE_TYPE
		,RLBP.RLBP_LEVEL
		,RLBP.RLBP_SECTION
		,RLBP.RLBP_SEQ_NO
		,RLBP.RLBP_DESC
		,(CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_TERM_DT,101) END) as 'Effective'
		,RLBP.RLBP_GU_ID
  FROM facets.dbo.BPA_BRGU_RUL_GRP_U              BRGU
INNER JOIN facets.dbo.BPA_BRGR_RUL_GRP_R          BRGR
  ON BRGU.BRGU_GU_ID = BRGR.BRGU_GU_ID
INNER JOIN facets.dbo.BPA_RLGD_RUL_GRP_D          RLGD
  ON BRGR.RLGD_GU_ID = RLGD.RLGD_GU_ID
INNER JOIN facets.dbo.BPA_QLTD_QTYP_D             QLTD
  ON RLGD.QLTD_QUAL_TYPE = QLTD.QLTD_QUAL_TYPE     
INNER JOIN facets.dbo.BPA_RLTD_RTYP_D             RLTD
  ON RLGD.RLTD_RULE_TYPE = RLTD.RLTD_RULE_TYPE
INNER JOIN facets.dbo.BPA_RLGR_GRP_SET_R          RLGR
   ON RLGD.RLGD_GU_ID = RLGR.RLGD_GU_ID
INNER JOIN BPA_RLBP_BP_RULE_D                     RLBP
   ON RLGR.RLBP_GU_ID = RLBP.RLBP_GU_ID
   AND GETDATE() BETWEEN RLBP.RLBP_EFF_DT AND RLBP.RLBP_TERM_DT
WHERE BRGU.BRGU_GU_ID = '7B94DF29-7D46-465C-8C85-89148201C945' 
--AND  RLBP.RLBP_LEVEL <>  0
ORDER BY RLBP.RLBP_SECTION, RLBP.RLBP_SEQ_NO, RLBP.RLBP_LEVEL


---------------------------------------------------------------
---------------------------------------------------------------



SELECT RLBP.RLBP_LEVEL, RLBP.RLBP_DESC,
       (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_TERM_DT,101) END) as 'Effective',
	   STRING_AGG(QLGR_GRP_DESC,', ') WITHIN GROUP(ORDER BY QLGR_GRP_DESC)  AS 'Qualifier Groups'
FROM BPA_RLBP_BP_RULE_D                     RLBP
INNER JOIN facets.dbo.BPA_QLCD_COND_D       QLCD
   ON RLBP.QLCD_GU_ID = QLCD.QLCD_GU_ID
INNER JOIN facets.dbo.BPA_QGRL_REL_R        QGRL
   ON QLCD.QLCD_GU_ID = QGRL.QLCD_GU_ID
INNER JOIN facets.dbo.BPA_QLGR_QGRP_D       QLGR
   ON QGRL.QLGR_GU_ID = QLGR.QLGR_GU_ID
WHERE GETDATE() BETWEEN RLBP.RLBP_EFF_DT AND RLBP.RLBP_TERM_DT
AND RLBP.RLBP_GU_ID = '9E30F24A-F437-48FB-A75B-D4BE7E716E01' 
GROUP BY RLBP.RLBP_LEVEL, RLBP.RLBP_DESC,
       (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_TERM_DT,101) END)
	   
SELECT QLGR.QLGR_GRP_DESC, QLGR.QLGR_AND_OR_IND, QLGR.QLGR_SAME_LINE_IND, QLGV.QLGV_SEQ_NO, QLGV.QLDF_ID, QLGV.QLGV_OPERAND_TYPE, QLGV.QLGV_DISPLAY_LOW, QLGV.QLGV_DISPLAY_HIGH, QLDF.QLDF_METHOD
FROM facets.dbo.BPA_QLGR_QGRP_D           QLGR
INNER JOIN facets.dbo.BPA_QLGV_VALUE_U    QLGV
    ON QLGR.QLGR_GU_ID = QLGV.QLGR_GU_ID
INNER JOIN facets.dbo.BPA_QLDF_QUAL_D     QLDF
    ON QLGV.QLDF_ID = QLDF.QLDF_ID
WHERE QLGR.QLGR_GU_ID IN ('042AEA57-76C3-4191-9C6A-3E84BC82188B','0B3E8827-88E5-451C-9F2D-ECFA680D092F')




--  FOR HIGH LEVEL INFO


DROP TABLE IF EXISTS ##TOP_LEVEL
SELECT   BRGU.BRGU_GU_ID
        ,BRGU.RLTD_RULE_TYPE
		,RLTD.RLTD_DESC
		,BRGU.BRGU_USAGE_ID 
		,RLGD.RLGD_DESC
		,RLGD.QLTD_QUAL_TYPE
		,RLGD.RLGD_GU_ID
		,QLTD.QLTD_DESC
		,BRGR.BRGR_SEQ_NO
        ,RLGD.RLGD_RUL_GRP_ID
        ,RLGD.RLGD_RTYP_PCS_SEQ--, RLGR.*
INTO ##TOP_LEVEL
  FROM facets.dbo.BPA_BRGU_RUL_GRP_U                   BRGU
INNER JOIN facets.dbo.BPA_BRGR_RUL_GRP_R               BRGR

  ON BRGU.BRGU_GU_ID = BRGR.BRGU_GU_ID
INNER JOIN facets.dbo.BPA_RLGD_RUL_GRP_D               RLGD
  ON BRGR.RLGD_GU_ID = RLGD.RLGD_GU_ID
--INNER JOIN facets.dbo.BPA_RLGR_GRP_SET_R               RLGR
--  ON BRGR.RLGD_GU_ID = RLGR.RLGD_GU_ID
INNER JOIN facets.dbo.BPA_QLTD_QTYP_D                  QLTD
  ON RLGD.QLTD_QUAL_TYPE = QLTD.QLTD_QUAL_TYPE     
LEFT OUTER JOIN facets.dbo.BPA_RLTD_RTYP_D             RLTD
  ON RLGD.RLTD_RULE_TYPE = RLTD.RLTD_RULE_TYPE
WHERE RLGD.RLGD_RUL_GRP_ID in ( 'LAB1','LAB0','0001')


SELECT  QLTD_QUAL_TYPE, QLTD_DESC, RLGD_RUL_GRP_ID, RLGD_DESC
FROM ##TOP_LEVEL

--  FOR SECTION LEVEL DETAILS
--  RLBP_LEVEL = 0 GIVES SECTION INFO

DROP TABLE IF EXISTS ##NEXT_LEVEL
SELECT TLVL.BRGU_GU_ID,
       TLVL.RLGD_GU_ID,
	   RLBP.RLBP_GU_ID,
	   QLCD.QLCD_GU_ID,
	   TLVL.RLGD_RUL_GRP_ID,
	   TLVL.RLGD_DESC,
	   TLVL.QLTD_QUAL_TYPE,
	   TLVL.QLTD_DESC,
	   TLVL.RLTD_DESC,
	   TLVL.RLTD_RULE_TYPE,
	   RLBP.RLBP_DESC,
	   RLBP.RLBP_SECTION,
	   RLBP.RLBP_SEQ_NO,
	   RLBP.RLBP_LEVEL,
	   (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_TERM_DT,101) END) as 'EFFECTIVE-TERM DATES',
	   RLBP.RLBP_EFF_DT,
	   RLBP.RLBP_TERM_DT,
       CASE WHEN RLBP.RLBP_ACT_VAL = 'M' THEN 'DFMP - Process DOFR Mapping.  BPOS - Pend for manual Opt Out Determination'
			WHEN RLBP.RLBP_ACT_VAL = 'N' THEN 'BPOS - Cannot Opt Out'
			WHEN RLBP.RLBP_ACT_VAL = 'P' THEN 'BPOS - Cannot Opt Out Cannot be Overridden'
			WHEN RLBP.RLBP_ACT_VAL = 'R' THEN 'Section Header - Read next rule in the section'
			WHEN RLBP.RLBP_ACT_VAL = 'S' THEN 'VBBR SPCR or SRCR - Section Header'
			WHEN RLBP.RLBP_ACT_VAL = 'V' THEN 'VBBR - Process VBB Mapping.  SPCR and SRCR - Conversion Mapping.'
			WHEN RLBP.RLBP_ACT_VAL = 'Y' THEN 'BPOS - Automatic Opt Out.  EMER - Service considered an emergency.'  END AS RLBP_ACTION_DESC,
       QLCD.QLCD_DESC,
	   SHDR.SHDR_GROUP_ID,
	   SHDR.SHDR_ID,
	   SHDR.SHDR_SECTION,
       VBMP.VBMP_SEQ_NO,
	   VBMP.VBMP_TAG,
	   VBMP.VBMP_VALUE
INTO ##NEXT_LEVEL
FROM  ##TOP_LEVEL                                    TLVL
INNER JOIN facets.dbo.BPA_RLGR_GRP_SET_R             RLGR
   ON TLVL.RLGD_GU_ID = RLGR.RLGD_GU_ID
INNER JOIN BPA_RLBP_BP_RULE_D                        RLBP
   ON RLGR.RLBP_GU_ID = RLBP.RLBP_GU_ID
   AND GETDATE() <=  RLBP.RLBP_TERM_DT
INNER JOIN BPA_QLCD_COND_D                           QLCD
   ON RLBP.QLCD_GU_ID = QLCD.QLCD_GU_ID
   AND GETDATE() <= QLCD.QLCD_TERM_DT
--LEFT OUTER JOIN BPA_QLDF_QUAL_D                      QLDF
--   ON 
LEFT OUTER JOIN BPA_SHDR_SECTION_HDR                 SHDR
   ON SHDR.RLBP_GU_ID = RLBP.RLBP_GU_ID
   AND SHDR.RLTD_RULE_TYPE = RLBP.RLTD_RULE_TYPE
LEFT OUTER JOIN BPA_VBMP_VBP_MAP                     VBMP
   ON RLBP.RLBP_GU_ID = VBMP.RLBP_GU_ID
ORDER BY RLBP.RLBP_SECTION, RLBP.RLBP_SEQ_NO

SELECT * FROM ##NEXT_LEVEL

SELECT QLTD_QUAL_TYPE, QLTD_DESC,   RLTD_RULE_TYPE, 
RLGD_RUL_GRP_ID, RLGD_DESC, RLBP_DESC, RLBP_SECTION, RLBP_LEVEL, RLBP_SEQ_NO,  [EFFECTIVE-TERM DATES], RLBP_ACTION_DESC
FROM ##NEXT_LEVEL ORDER BY 4, RLBP_SECTION, RLBP_LEVEL, RLBP_SEQ_NO


--   COMBINED

SELECT  RLGD_RUL_GRP_ID 
        ,RLGD_DESC
		--,NLVL.QLTD_DESC
        ,NLVL.RLTD_RULE_TYPE
		,NLVL.RLBP_LEVEL
		,NLVL.RLBP_SECTION
		,NLVL.RLBP_SEQ_NO
		,NLVL.RLBP_DESC
		,(CASE WHEN NLVL.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,NLVL.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN NLVL.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,NLVL.RLBP_TERM_DT,101) END) as 'EFFECTIVE-TERM DATES'
		--,RLBP.RLBP_GU_ID
		,NLVL.QLCD_DESC
		--,QLGV.QLDF_ID
		,QLDF.QLDF_METHOD
		,QLGV.QLGV_SEQ_NO
		,CASE WHEN QLGV.QLGV_OPERAND_TYPE = 0  	THEN 'Equal'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 1	THEN 'Not Equal'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 10	THEN 'Not Between Inclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 11	THEN 'Not Between Exclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 2	THEN 'Less Than'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 3	THEN 'Less Than or Equal To'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 4	THEN 'Greater Than'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 5	THEN 'Greater Than or Equal To'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 6	THEN 'Populated'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 7	THEN 'Not Populated'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 8	THEN 'Between Inclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 9	THEN 'Between Exclusive' END AS OPERAND_TYPE
		,QLGV.QLGV_DISPLAY_LOW
		,QLGV.QLGV_DISPLAY_HIGH
		,QLGR.QLGR_GU_ID
into ##COMBINED_BPA
  FROM ##NEXT_LEVEL                               NLVL
INNER JOIN BPA_QGRL_REL_R                         QGRL
   ON NLVL.QLCD_GU_ID = QGRL.QLCD_GU_ID
INNER JOIN BPA_QLGR_QGRP_D                        QLGR
   ON QGRL.QLGR_GU_ID = QLGR.QLGR_GU_ID
   AND GETDATE() <= QLGR.QLGR_TERM_DT
INNER JOIN BPA_QLGV_VALUE_U                       QLGV
   ON QGRL.QLGR_GU_ID = QLGV.QLGR_GU_ID
   AND GETDATE() <= QLGR.QLGR_TERM_DT
LEFT OUTER JOIN BPA_QLDF_QUAL_D                   QLDF
   ON QLGV.QLDF_ID = QLDF.QLDF_ID
ORDER BY 1, NLVL.RLBP_LEVEL,  NLVL.RLBP_SECTION, NLVL.RLBP_SEQ_NO, QLGV.QLGV_SEQ_NO






facets.dbo.BPA_BRGU_RUL_GRP_U              BRGU
INNER JOIN facets.dbo.BPA_BRGR_RUL_GRP_R          BRGR
  ON BRGU.BRGU_GU_ID = BRGR.BRGU_GU_ID
INNER JOIN facets.dbo.BPA_RLGD_RUL_GRP_D          RLGD
  ON BRGR.RLGD_GU_ID = RLGD.RLGD_GU_ID
  AND RLGD.RLGD_RUL_GRP_ID = 'LAB1'
INNER JOIN facets.dbo.BPA_QLTD_QTYP_D             QLTD
  ON RLGD.QLTD_QUAL_TYPE = QLTD.QLTD_QUAL_TYPE     
INNER JOIN facets.dbo.BPA_RLTD_RTYP_D             RLTD
  ON RLGD.RLTD_RULE_TYPE = RLTD.RLTD_RULE_TYPE
INNER JOIN facets.dbo.BPA_RLGR_GRP_SET_R          RLGR
   ON RLGD.RLGD_GU_ID = RLGR.RLGD_GU_ID
INNER JOIN BPA_RLBP_BP_RULE_D                     RLBP
   ON RLGR.RLBP_GU_ID = RLBP.RLBP_GU_ID
   AND GETDATE() <= RLBP.RLBP_TERM_DT
INNER JOIN facets.dbo.BPA_QLCD_COND_D             QLCD
  ON RLBP.QLCD_GU_ID = QLCD.QLCD_GU_ID    
  AND GETDATE() <= QLCD.QLCD_TERM_DT

---------------------------------------------------------------
---------------------------------------------------------------

DROP TABLE IF EXISTS ##BPA_B001
SELECT  BRGU.BRGU_GU_ID
        ,RLGD.RLGD_GU_ID
		,RLBP.RLBP_GU_ID
		,QLCD.QLCD_GU_ID
        ,RLGD_RUL_GRP_ID 
		,QLGR.QLGR_GU_ID
        ,RLGD_DESC
		,QLTD.QLTD_DESC
        ,RLTD.RLTD_RULE_TYPE
		,RLBP.RLBP_LEVEL
		,RLBP.RLBP_SECTION
		,RLBP.RLBP_SEQ_NO
		,RLBP.RLBP_DESC
		,(CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_TERM_DT,101) END) as 'EFFECTIVE-TERM DATES'
		,QLCD.QLCD_DESC
		,QLGV.QLDF_ID
		,QLDF.QLDF_METHOD
		,QLGV.QLGV_SEQ_NO
		,CASE WHEN QLGV.QLGV_OPERAND_TYPE = 0  	THEN 'Equal'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 1	THEN 'Not Equal'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 10	THEN 'Not Between Inclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 11	THEN 'Not Between Exclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 2	THEN 'Less Than'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 3	THEN 'Less Than or Equal To'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 4	THEN 'Greater Than'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 5	THEN 'Greater Than or Equal To'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 6	THEN 'Populated'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 7	THEN 'Not Populated'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 8	THEN 'Between Inclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 9	THEN 'Between Exclusive' END AS OPERAND_TYPE
		,QLGV.QLGV_DISPLAY_LOW
		,QLGV.QLGV_DISPLAY_HIGH
INTO ##BPA_B001
  FROM facets.dbo.BPA_BRGU_RUL_GRP_U              BRGU
INNER JOIN facets.dbo.BPA_BRGR_RUL_GRP_R          BRGR
  ON BRGU.BRGU_GU_ID = BRGR.BRGU_GU_ID
INNER JOIN facets.dbo.BPA_RLGD_RUL_GRP_D          RLGD
  ON BRGR.RLGD_GU_ID = RLGD.RLGD_GU_ID
INNER JOIN facets.dbo.BPA_QLTD_QTYP_D             QLTD
  ON RLGD.QLTD_QUAL_TYPE = QLTD.QLTD_QUAL_TYPE     
INNER JOIN facets.dbo.BPA_RLTD_RTYP_D             RLTD
  ON RLGD.RLTD_RULE_TYPE = RLTD.RLTD_RULE_TYPE
INNER JOIN facets.dbo.BPA_RLGR_GRP_SET_R          RLGR
   ON RLGD.RLGD_GU_ID = RLGR.RLGD_GU_ID
INNER JOIN BPA_RLBP_BP_RULE_D                     RLBP
   ON RLGR.RLBP_GU_ID = RLBP.RLBP_GU_ID
   AND GETDATE() <= RLBP.RLBP_TERM_DT
INNER JOIN facets.dbo.BPA_QLCD_COND_D             QLCD
  ON RLBP.QLCD_GU_ID = QLCD.QLCD_GU_ID    
  AND GETDATE() <= QLCD.QLCD_TERM_DT
INNER JOIN BPA_QGRL_REL_R                         QGRL
   ON QLCD.QLCD_GU_ID = QGRL.QLCD_GU_ID
INNER JOIN BPA_QLGR_QGRP_D                        QLGR
   ON QGRL.QLGR_GU_ID = QLGR.QLGR_GU_ID
   AND GETDATE() <= QLGR.QLGR_TERM_DT
INNER JOIN BPA_QLGV_VALUE_U                       QLGV
   ON QGRL.QLGR_GU_ID = QLGV.QLGR_GU_ID
   AND GETDATE() <= QLGR.QLGR_TERM_DT
LEFT OUTER JOIN BPA_QLDF_QUAL_D                   QLDF
   ON QLGV.QLDF_ID = QLDF.QLDF_ID
WHERE RLGD.RLGD_RUL_GRP_ID = 'B001'
ORDER BY 1, RLBP.RLBP_LEVEL,  RLBP.RLBP_SECTION, RLBP.RLBP_SEQ_NO, QLGV.QLGV_SEQ_NO


DROP TABLE IF EXISTS ##NOT_BPA_B001
SELECT  BRGU.BRGU_GU_ID
        ,RLGD.RLGD_GU_ID
		,RLBP.RLBP_GU_ID
		,QLCD.QLCD_GU_ID
        ,RLGD_RUL_GRP_ID 
		,QLGR.QLGR_GU_ID
        ,RLGD_DESC
		,QLTD.QLTD_DESC
        ,RLTD.RLTD_RULE_TYPE
		,RLBP.RLBP_LEVEL
		,RLBP.RLBP_SECTION
		,RLBP.RLBP_SEQ_NO
		,RLBP.RLBP_DESC
		,(CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_TERM_DT,101) END) as 'EFFECTIVE-TERM DATES'
		,QLCD.QLCD_DESC
		,QLGV.QLDF_ID
		,QLDF.QLDF_METHOD
		,QLGV.QLGV_SEQ_NO
		,CASE WHEN QLGV.QLGV_OPERAND_TYPE = 0  	THEN 'Equal'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 1	THEN 'Not Equal'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 10	THEN 'Not Between Inclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 11	THEN 'Not Between Exclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 2	THEN 'Less Than'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 3	THEN 'Less Than or Equal To'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 4	THEN 'Greater Than'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 5	THEN 'Greater Than or Equal To'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 6	THEN 'Populated'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 7	THEN 'Not Populated'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 8	THEN 'Between Inclusive'
			  WHEN QLGV.QLGV_OPERAND_TYPE = 9	THEN 'Between Exclusive' END AS OPERAND_TYPE
		,QLGV.QLGV_DISPLAY_LOW
		,QLGV.QLGV_DISPLAY_HIGH
INTO ##NOT_BPA_B001
  FROM facets.dbo.BPA_BRGU_RUL_GRP_U              BRGU
INNER JOIN facets.dbo.BPA_BRGR_RUL_GRP_R          BRGR
  ON BRGU.BRGU_GU_ID = BRGR.BRGU_GU_ID
INNER JOIN facets.dbo.BPA_RLGD_RUL_GRP_D          RLGD
  ON BRGR.RLGD_GU_ID = RLGD.RLGD_GU_ID
INNER JOIN facets.dbo.BPA_QLTD_QTYP_D             QLTD
  ON RLGD.QLTD_QUAL_TYPE = QLTD.QLTD_QUAL_TYPE     
INNER JOIN facets.dbo.BPA_RLTD_RTYP_D             RLTD
  ON RLGD.RLTD_RULE_TYPE = RLTD.RLTD_RULE_TYPE
INNER JOIN facets.dbo.BPA_RLGR_GRP_SET_R          RLGR
   ON RLGD.RLGD_GU_ID = RLGR.RLGD_GU_ID
INNER JOIN BPA_RLBP_BP_RULE_D                     RLBP
   ON RLGR.RLBP_GU_ID = RLBP.RLBP_GU_ID
   AND GETDATE() <= RLBP.RLBP_TERM_DT
INNER JOIN facets.dbo.BPA_QLCD_COND_D             QLCD
  ON RLBP.QLCD_GU_ID = QLCD.QLCD_GU_ID    
  AND GETDATE() <= QLCD.QLCD_TERM_DT
INNER JOIN BPA_QGRL_REL_R                         QGRL
   ON QLCD.QLCD_GU_ID = QGRL.QLCD_GU_ID
INNER JOIN BPA_QLGR_QGRP_D                        QLGR
   ON QGRL.QLGR_GU_ID = QLGR.QLGR_GU_ID
   AND GETDATE() <= QLGR.QLGR_TERM_DT
INNER JOIN BPA_QLGV_VALUE_U                       QLGV
   ON QGRL.QLGR_GU_ID = QLGV.QLGR_GU_ID
   AND GETDATE() <= QLGR.QLGR_TERM_DT
LEFT OUTER JOIN BPA_QLDF_QUAL_D                   QLDF
   ON QLGV.QLDF_ID = QLDF.QLDF_ID
WHERE RLGD.RLGD_RUL_GRP_ID <> 'B001'
ORDER BY 1, RLBP.RLBP_LEVEL,  RLBP.RLBP_SECTION, RLBP.RLBP_SEQ_NO, QLGV.QLGV_SEQ_NO


SELECT *
FROM ##NOT_BPA_B001          OTHR
INNER JOIN ##BPA_B001        B001
ON OTHR.QLGR_GU_ID  = B001.QLGR_GU_ID


BRGU_GU_ID	RLGD_GU_ID	RLBP_GU_ID	QLCD_GU_ID	RLGD_RUL_GRP_ID	QLGR_GU_ID
E6E45471-BEDE-4B90-B82B-D0176AE91BD0	E6E45471-BEDE-4B90-B82B-D0176AE91BD0	DE591D29-3DDD-4550-BE0D-EDEADE842139	3BAE8EC4-CBFC-4AF5-B626-ACA476F0BE85	0001              	4541736A-F8AE-4D89-9A7A-33E30716E863

select *
from BPA_QLGR_QGRP_D
WHERE QLGR_GU_ID = '4541736A-F8AE-4D89-9A7A-33E30716E863'

SELECT RLBP.RLBP_LEVEL, RLBP.RLBP_DESC,
       (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_TERM_DT,101) END) as 'Effective',
	   STRING_AGG(QLGR_GRP_DESC,', ') WITHIN GROUP(ORDER BY QLGR_GRP_DESC)  AS 'Qualifier Groups'
FROM BPA_RLBP_BP_RULE_D                     RLBP
INNER JOIN facets.dbo.BPA_QLCD_COND_D       QLCD
   ON RLBP.QLCD_GU_ID = QLCD.QLCD_GU_ID
INNER JOIN facets.dbo.BPA_QGRL_REL_R        QGRL
   ON QLCD.QLCD_GU_ID = QGRL.QLCD_GU_ID
INNER JOIN facets.dbo.BPA_QLGR_QGRP_D       QLGR
   ON QGRL.QLGR_GU_ID = QLGR.QLGR_GU_ID
WHERE GETDATE() BETWEEN RLBP.RLBP_EFF_DT AND RLBP.RLBP_TERM_DT
AND RLBP.RLBP_GU_ID = '9E30F24A-F437-48FB-A75B-D4BE7E716E01' 
GROUP BY RLBP.RLBP_LEVEL, RLBP.RLBP_DESC,
       (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_EFF_DT,101) END) + ' - ' + (CASE WHEN RLBP.RLBP_LEVEL = 0 THEN '' ELSE CONVERT(VARCHAR,RLBP.RLBP_TERM_DT,101) END)
	   
SELECT QLGR.QLGR_GRP_DESC, QLGR.QLGR_AND_OR_IND, QLGR.QLGR_SAME_LINE_IND, QLGV.QLGV_SEQ_NO, QLGV.QLDF_ID, QLGV.QLGV_OPERAND_TYPE, QLGV.QLGV_DISPLAY_LOW, QLGV.QLGV_DISPLAY_HIGH, QLDF.QLDF_METHOD
FROM facets.dbo.BPA_QLGR_QGRP_D           QLGR
INNER JOIN facets.dbo.BPA_QLGV_VALUE_U    QLGV
    ON QLGR.QLGR_GU_ID = QLGV.QLGR_GU_ID
INNER JOIN facets.dbo.BPA_QLDF_QUAL_D     QLDF
    ON QLGV.QLDF_ID = QLDF.QLDF_ID
WHERE QLGR.QLGR_GU_ID IN ('042AEA57-76C3-4191-9C6A-3E84BC82188B','0B3E8827-88E5-451C-9F2D-ECFA680D092F')







SELECT * 
FROM ##CONV_TTLS 
WHERE SESE_ID = SPCT_SESE_ID
AND SESE_ID = 'OSO'
AND SPCT_SESE_ID = 'OSO'

SELECT *
FROM ##ACTIVE_SPCTS  ACTV
INNER JOIN CMC_SPCT_SUPP_CONV SPCT
    ON ACTV.PDBC_PFX = SPCT.PDBC_PFX
WHERE GETDATE() < SPCT_TERM_DT
AND SESE_ID = 'OSO'
--AND SPCT_SESE_ID = 'OSO'
--AND SPCT_ID_REL_LOW = 'V655'
AND SPCT.PDBC_PFX = 'H341'



bpa

new scqg

11/04/2022 12:24:58.965      EXECUTE BPASP_QLGV_DELALL @p_Class="BPA_APPREC_QLGV",@pLOCK_TOKEN=1,@pQLGR_GU_ID="D7423642-FC84-43FB-848F-602B8A8B1315",@pQLGV_SEQ_NO=NULL  [Return Code : 0][Execute Time : 00:00:00.094][Total Time : 00:00:00.094]
11/04/2022 12:24:59.061      EXECUTE BPASP_QLGR_SELECT @p_Class="BPA_APPREC_QLGR",@pLOCK_TOKEN=1,@pQLGR_GU_ID="D7423642-FC84-43FB-848F-602B8A8B1315"  [Return Code : 0][Execute Time : 00:00:00.046]
                             ROWS : 1
                                <DATA_ROW><QLGR_GU_ID>D7423642-FC84-43FB-848F-602B8A8B1315</QLGR_GU_ID><QLGR_GRP_DESC>AV_TEST</QLGR_GRP_DESC><RLTD_RULE_TYPE>SPCR</RLTD_RULE_TYPE><QLTD_QUAL_TYPE>SCQG</QLTD_QUAL_TYPE><QLGR_EFF_DT>01/01/1753 00:00:00.000</QLGR_EFF_DT><QLGR_TERM_DT>12/31/9999 00:00:00.000</QLGR_TERM_DT><QLGR_AND_OR_IND>3</QLGR_AND_OR_IND><QLGR_SAME_LINE_IND>N</QLGR_SAME_LINE_IND><QLGR_LOCK_TOKEN>1</QLGR_LOCK_TOKEN><ATXR_SOURCE_ID>01/01/1753 00:00:00.000</ATXR_SOURCE_ID></DATA_ROW>
                             Total Time : 00:00:00.046
11/04/2022 12:24:59.112      EXECUTE BPASP_QLGV_INSERT @p_Class="BPA_APPREC_QLGV",@pLOCK_TOKEN=1,@pQLGR_GU_ID="D7423642-FC84-43FB-848F-602B8A8B1315",@pQLGV_SEQ_NO=0,@pQLDF_ID="SCQG0025",@pQLGV_EFF_DT="02/05/2020",@pQLGV_TERM_DT="02/05/2022",@pQLGV_OPERAND_TYPE=8,@pQLGV_CODE_TP_LOW="",@pQLGV_CODE_TP_HIGH="",@pQLGV_DISPLAY_LOW="ABCD",@pQLGV_DISPLAY_HIGH="ABCDE",@pQLGV_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.047][Total Time : 00:00:00.047]
11/04/2022 12:24:59.161      EXECUTE BPASP_QLGV_INSERT @p_Class="BPA_APPREC_QLGV",@pLOCK_TOKEN=1,@pQLGR_GU_ID="D7423642-FC84-43FB-848F-602B8A8B1315",@pQLGV_SEQ_NO=1,@pQLDF_ID="SCQG0008",@pQLGV_EFF_DT="02/05/2020",@pQLGV_TERM_DT="02/05/2022",@pQLGV_OPERAND_TYPE=10,@pQLGV_CODE_TP_LOW="",@pQLGV_CODE_TP_HIGH="",@pQLGV_DISPLAY_LOW="1",@pQLGV_DISPLAY_HIGH="2",@pQLGV_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.045][Total Time : 00:00:00.045]
11/04/2022 12:24:59.208      EXECUTE BPASP_QLGR_UPDATE @p_Class="BPA_APPREC_QLGR",@pLOCK_TOKEN=257,@pQLGR_GU_ID="D7423642-FC84-43FB-848F-602B8A8B1315",@pQLGR_GRP_DESC="AV_TEST",@pRLTD_RULE_TYPE="SPCR",@pQLTD_QUAL_TYPE="SCQG",@pQLGR_EFF_DT=NULL,@pQLGR_TERM_DT="12/31/9999",@pQLGR_AND_OR_IND="3",@pQLGR_SAME_LINE_IND="Y",@pQLGR_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=2 [Return Code : 0][Execute Time : 00:00:00.051][Total Time : 00:00:00.051]

add rule to section
11/04/2022 12:34:02.675 BEGIN TRANSACTION INSERTSPCR[Return Code : 0][Execute Time : 00:00:00.048][Total Time : 00:00:00.048]
11/04/2022 12:34:02.725      EXECUTE CERSP_SES0_AUDIT_INSERT @pTXN1_PZAP_ID = 'SPCR', @pTXN1_USER_FUNC = 'INSERT',@pTXN1_SYIN_INST = 120427490  [Return Code : 0][Execute Time : 00:00:00.049][Total Time : 00:00:00.049]
11/04/2022 12:34:02.776      EXECUTE BPASP_RLGD_APPLY @p_Class="BPA_APPREC_RLGD",@pLOCK_TOKEN=257,@pRLGD_GU_ID="370238C2-948C-4F2A-A323-FF21F4AD219F",@pRLGD_RUL_GRP_ID="AVR1",@pRLTD_RULE_TYPE="SPCR",@pQLTD_QUAL_TYPE="SCQG",@pRLGD_DESC="AV TEST",@pRLGD_EFF_DT=NULL,@pRLGD_TERM_DT="12/31/9999",@pRLGD_RTYP_PCS_SEQ=0,@pRLGD_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pRLGD_STATUS_NVL=0,@pRLGD_DEFAULT_IND_NVL="",@pLOCK_TOKEN_IND=2 [Return Code : 0][Execute Time : 00:00:00.071][Total Time : 00:00:00.071]
11/04/2022 12:34:02.848      EXECUTE BPASP_BRGU_APPLY @p_Class="BPA_APPREC_BRGU",@pLOCK_TOKEN=1,@pBRGU_GU_ID="370238C2-948C-4F2A-A323-FF21F4AD219F",@pRLTD_RULE_TYPE="SPCR",@pBPTD_BUS_PCS_TYPE="SPCR",@pBRGU_EFF_DT=NULL,@pBRGU_TERM_DT="12/31/9999",@pBRGU_USAGE_ID="AVR1",@pBRGU_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.069][Total Time : 00:00:00.069]
11/04/2022 12:34:02.919      EXECUTE BPASP_BRGR_APPLY @p_Class="BPA_APPREC_BRGR",@pLOCK_TOKEN=1,@pBRGU_GU_ID="370238C2-948C-4F2A-A323-FF21F4AD219F",@pRLGD_GU_ID="370238C2-948C-4F2A-A323-FF21F4AD219F",@pBRGR_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pBRGR_SEQ_NO=0,@pBRGR_EFF_DT=NULL,@pBRGR_TERM_DT="12/31/9999",@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.052][Total Time : 00:00:00.052]
11/04/2022 12:34:02.973      EXECUTE BPASP_QLCD_APPLY @p_Class="BPA_APPREC_QLCD",@pLOCK_TOKEN=1,@pQLCD_GU_ID="26DC1B13-A962-4D1D-A921-A11E5E06339D",@pQLCD_DESC="ADD RULE TO SECTION",@pQLCD_EFF_DT=NULL,@pQLCD_TERM_DT="12/31/9999",@pQLCD_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.052][Total Time : 00:00:00.052]
11/04/2022 12:34:03.026      EXECUTE BPASP_RLBP_APPLY @p_Class="BPA_APPREC_RLBP",@pLOCK_TOKEN=1,@pRLBP_GU_ID="10121514-709E-4CA6-B05F-8DE0D2BDB698",@pRLTD_RULE_TYPE="SPCR",@pRLBP_DESC="ADD RULE TO SECTION",@pRLBP_EFF_DT="02/05/2020",@pRLBP_TERM_DT="02/05/2022",@pRLBP_SECTION=1,@pRLBP_SEQ_NO=1,@pRLBP_LEVEL=1,@pQLCD_GU_ID="26DC1B13-A962-4D1D-A921-A11E5E06339D",@pRLBP_ACT_VAL="V",@pRLBP_MCTR_REAS="",@pRLBP_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.053][Total Time : 00:00:00.053]
11/04/2022 12:34:03.081      EXECUTE BPASP_RLGR_APPLY @p_Class="BPA_APPREC_RLGR",@pLOCK_TOKEN=1,@pRLGD_GU_ID="370238C2-948C-4F2A-A323-FF21F4AD219F",@pRLBP_GU_ID="10121514-709E-4CA6-B05F-8DE0D2BDB698",@pRLGR_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.085][Total Time : 00:00:00.085]
11/04/2022 12:34:03.167      EXECUTE BPASP_VBMP_INSERT @p_Class="BPA_APPREC_VBMP",@pLOCK_TOKEN=1,@pRLBP_GU_ID="10121514-709E-4CA6-B05F-8DE0D2BDB698",@pVBMP_SEQ_NO=0,@pVBMP_TAG="SESE_ID",@pVBMP_VALUE="PTA",@pVBMP_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.050][Total Time : 00:00:00.050]
11/04/2022 12:34:03.218      EXECUTE BPASP_QGRL_DELALL @p_Class="BPA_APPREC_QGRL",@pLOCK_TOKEN=1,@pQLCD_GU_ID="26DC1B13-A962-4D1D-A921-A11E5E06339D",@pQLGR_GU_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.051][Total Time : 00:00:00.051]
11/04/2022 12:34:03.270      EXECUTE BPASP_QGRL_INSERT @p_Class="BPA_APPREC_QGRL",@pLOCK_TOKEN=1,@pQLCD_GU_ID="26DC1B13-A962-4D1D-A921-A11E5E06339D",@pQLGR_GU_ID="D7423642-FC84-43FB-848F-602B8A8B1315",@pQGRL_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.050][Total Time : 00:00:00.050]
11/04/2022 12:34:03.322      EXECUTE BPASP_QGRL_INSERT @p_Class="BPA_APPREC_QGRL",@pLOCK_TOKEN=1,@pQLCD_GU_ID="26DC1B13-A962-4D1D-A921-A11E5E06339D",@pQLGR_GU_ID="65EBAB93-9BF2-4D98-9ED6-75A773DA6C64",@pQGRL_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.049][Total Time : 00:00:00.049]
11/04/2022 12:34:03.372      EXECUTE BPASP_QLCD_APPLY @p_Class="BPA_APPREC_QLCD",@pLOCK_TOKEN=1,@pQLCD_GU_ID="B827442E-FD07-44B3-A628-CF8195A1A728",@pQLCD_DESC="AM - Ambulance - Other",@pQLCD_EFF_DT=NULL,@pQLCD_TERM_DT="12/31/9999",@pQLCD_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.049][Total Time : 00:00:00.049]
11/04/2022 12:34:03.423      EXECUTE BPASP_RLBP_APPLY @p_Class="BPA_APPREC_RLBP",@pLOCK_TOKEN=1,@pRLBP_GU_ID="5F4F5076-4A7F-4D4D-A1DB-0DD281FD390A",@pRLTD_RULE_TYPE="SPCR",@pRLBP_DESC="AM - Ambulance - Other",@pRLBP_EFF_DT=NULL,@pRLBP_TERM_DT="12/31/9999",@pRLBP_SECTION=1,@pRLBP_SEQ_NO=0,@pRLBP_LEVEL=0,@pQLCD_GU_ID="B827442E-FD07-44B3-A628-CF8195A1A728",@pRLBP_ACT_VAL="S",@pRLBP_MCTR_REAS="",@pRLBP_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.057][Total Time : 00:00:00.057]
11/04/2022 12:34:03.482      EXECUTE BPASP_RLGR_APPLY @p_Class="BPA_APPREC_RLGR",@pLOCK_TOKEN=1,@pRLGD_GU_ID="370238C2-948C-4F2A-A323-FF21F4AD219F",@pRLBP_GU_ID="5F4F5076-4A7F-4D4D-A1DB-0DD281FD390A",@pRLGR_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.049][Total Time : 00:00:00.049]
11/04/2022 12:34:03.533      EXECUTE BPASP_SHDR_APPLY @p_Class="BPA_APPREC_SHDR",@pLOCK_TOKEN=1,@pSHDR_GROUP_ID="AVR1",@pQLTD_QUAL_TYPE="SCQG",@pRLTD_RULE_TYPE="SPCR",@pSHDR_ID="AM",@pSHDR_SECTION=1,@pRLBP_GU_ID="5F4F5076-4A7F-4D4D-A1DB-0DD281FD390A",@pSHDR_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL,@pLOCK_TOKEN_IND=1 [Return Code : 0][Execute Time : 00:00:00.074][Total Time : 00:00:00.074]
11/04/2022 12:34:03.608      EXECUTE BPASP_QGRL_DELALL @p_Class="BPA_APPREC_QGRL",@pLOCK_TOKEN=1,@pQLCD_GU_ID="B827442E-FD07-44B3-A628-CF8195A1A728",@pQLGR_GU_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.049][Total Time : 00:00:00.049]
11/04/2022 12:34:03.658      EXECUTE BPASP_QGRL_INSERT @p_Class="BPA_APPREC_QGRL",@pLOCK_TOKEN=1,@pQLCD_GU_ID="B827442E-FD07-44B3-A628-CF8195A1A728",@pQLGR_GU_ID="DFE6C2A6-A356-4DD6-8911-A1886B5B9BB7",@pQGRL_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.049][Total Time : 00:00:00.049]

new prefix 
11/04/2022 12:29:33.210 EXECUTE CMCSP_PDPX_EXISTS_W_ERROR @p_Class="CMC_APPREC_PDPX",@pLOCK_TOKEN=1,@pPDBC_PFX="B001",@pPDBC_TYPE="SPCR"  [Return Code : 0][Execute Time : 00:00:00.052][Total Time : 00:00:00.052]
11/04/2022 12:29:55.332 EXECUTE CMCSP_PDPX_INSERT @p_Class="CMC_APPREC_PDPX",@pLOCK_TOKEN=1,@pPDBC_PFX="AVR1",@pPDBC_TYPE="SPCR",@pPDPX_DESC="AV TEST",@pPDPX_LOCK_TOKEN=0,@pATXR_SOURCE_ID=NULL  [Return Code : 0][Execute Time : 00:00:00.424][Total Time : 00:00:00.424]




--USE tempdb]
--GO
--/****** Object:  StoredProcedure dbo].AHEADSP_SRCT_SPCT]    Script Date: 7/19/2022 2:31:49 PM ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO


--ALTER PROCEDURE dbo].AHEADSP_SRCT_SPCT]  
--           @pType char(4),
--		   @pPfx  char(4),
--		   @RetCd int  OUTPUT
--AS 
--BEGIN


DECLARE
    @Success   INT = 0,
	@Error     INT = -1
	@SQL_STMT  VARCHAR(MAX)
	---
	,@pType char(4) = 'SRCT',
    @pPfx  char(4) = 'C100'

IF @pType IN ( 'SRCT', 'SPCT')
	BEGIN 

		SET @SQL_STMT = 'INSERT INTO tempdb.dbo.AHEAD_'+@pType+'_SUPP_CONV '
		SET @SQL_STMT = @SQL_STMT + 'SELECT * FROM facets.dbo.CMC_'+@pType+'_SUPP_CONV WHERE PDBC_PFX = '''+@pPfx+''' '

		EXEC (@SQL_STMT)

	END

	END
IF @pType = 'SPCT'
    BEGIN
	END


	SELECT DISTINCT SPCT.PDBC_PFX
FROM  facets.dbo.CMC_SPCT_SUPP_CONV SPCT



DECLARE @SPCT_PFX_COUNT   INT = (SELECT COUNT(DISTINCT SPCT_PFX) FROM ##SGACA_SPCT);

DROP TABLE IF EXISTS ##SPCT_SESE_COUNT

--EXEC @SQLMCD
SELECT DISTINCT SPCT.PDBC_PFX, SPCT.SESE_ID,  @SPCT_PFX_COUNT  AS SPCT_PFX_COUNT--, COUNT(*) AS SESE_COUNT
INTO ##SPCT_SESE_COUNT 
FROM ##SGACA_SPCT     PFXS
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
    ON PFXS.SPCT_PFX = SPCT.PDBC_PFX
   AND GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
GROUP BY SPCT.PDBC_PFX, SPCT.SESE_ID

--  (13736 rows affected)
--  SELECT * FROM ##SPCT_SESE_COUNT ORDER BY 4 

--EXEC @SQLMCD

DROP TABLE IF EXISTS ##SPCT_SESE_HASH
DROP INDEX IF EXISTS ##SPCT_SESE_COUNT.##SPCT_SESE_HASH_IDX1

SELECT  
       SPCT.PDBC_PFX
      ,SPCT.SESE_ID
	  ,SPCT_PFX_COUNT
	  ,CAST(NULL AS INT)  AS UNIQ_SESE_ROWS
	  ,CONCAT(
           SPCT_IPCD_LOW]
      ,'|',SPCT_IPCD_HIGH]
      ,'|',SPCT_MODIFIER]
      ,'|',SPCT_ID_REL_LOW]
      ,'|',SPCT_ID_REL_HIGH]
      ,'|',SPCT_IDCD_TYPE]
      ,'|',SPCT_PSCD_LOW]
      ,'|',SPCT_PSCD_HIGH]
      ,'|',CAST(SPCT_AGE_LOW] AS VARCHAR(3))
      ,'|',CAST(SPCT_AGE_HIGH] AS VARCHAR(3))
      ,'|',SPCT_SEX]
      ,'|',PRPR_MCTR_TYPE]
      ,'|',PRCF_MCTR_SPEC]
      ,'|',SPCT_SESE_ID]
      ,'|',RPTC_RPT_CAT]
      ,'|',SPCT_OPTS]
      ,'|',SPCT_RELATION] )  AS HASHKEY
INTO ##SPCT_SESE_HASH              
FROM ##SPCT_SESE_COUNT                       SSC
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
   ON SSC.PDBC_PFX = SPCT.PDBC_PFX
   AND SSC.SESE_ID = SPCT.SESE_ID
   AND GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
--  (2998985 rows affected)
CREATE INDEX ##SPCT_SESE_HASH_IDX1 ON ##SPCT_SESE_HASH(SESE_ID)



UPDATE SSH
SET UNIQ_SESE_ROWS = SS3.SEPY_SESE_ROW_COUNT
FROM ##SPCT_SESE_HASH   SSH
CROSS APPLY (SELECT PDBC_PFX, SESE_ID, COUNT(DISTINCT HASHKEY) AS SEPY_SESE_ROW_COUNT
             FROM ##SPCT_SESE_HASH    SSH2
			 WHERE SSH.PDBC_PFX = SSH2.PDBC_PFX
			 AND SSH.SESE_ID = SSH2.SESE_ID
			 GROUP BY PDBC_PFX, SESE_ID)   SS3
-- (2998985 rows affected)
CREATE INDEX ##SPCT_SESE_HASH_IDX1 ON ##SPCT_SESE_HASH(SESE_ID)

SELECT PDBC_PFX, SESE_ID, HASHKEY, COUNT(*)
FROM ##SPCT_SESE_HASH
GROUP BY PDBC_PFX, SESE_ID, HASHKEY
HAVING COUNT(*) > 1

--SELECT  SPSE.PDBC_PFX
--       ,SPSE.SESE_ID
--	   ,SPSE.HASHKEY
--	   ,COUNT(*)
--FROM ##SPCT_SESE_HASH   SPSE
--GROUP BY SPSE.PDBC_PFX
--       ,SPSE.SESE_ID,SPSE.HASHKEY
--HAVING COUNT(*) > 1
--ORDER BY 2

-- (3016397 rows affected)
--  SELECT TOP 1000 * FROM ##SPCT_SESE_HASH

DROP TABLE IF EXISTS ##SPCT_SESE_HASH_MATCH

SELECT SPCT_PFX_COUNT, BASE.PDBC_PFX AS BASE_PFX, COMP.COMP_PFX, BASE.SESE_ID AS BASE_SESE_ID,
	   BASE.UNIQ_SESE_ROWS AS BASE_UNIQ_SESE_ROWS,
	   COMP_UNIQ_SESE_ROWS,
	   SUM(COMP.MATCH_COUNT)  AS MATCH_COUNT
INTO ##SPCT_SESE_HASH_MATCH
FROM ##SPCT_SESE_HASH            BASE
CROSS APPLY (SELECT COMP.PDBC_PFX AS COMP_PFX, COMP.UNIQ_SESE_ROWS AS COMP_UNIQ_SESE_ROWS,  COMP.SESE_ID AS COMP_SESE_ID, COUNT(*) AS MATCH_COUNT
             FROM ##SPCT_SESE_HASH  COMP
			 WHERE COMP.PDBC_PFX < BASE.PDBC_PFX
			 AND COMP.SESE_ID = BASE.SESE_ID
			 AND COMP.HASHKEY = BASE.HASHKEY
			 GROUP BY COMP.PDBC_PFX, COMP.UNIQ_SESE_ROWS, COMP.SESE_ID)    COMP
GROUP BY  SPCT_PFX_COUNT, BASE.PDBC_PFX, COMP.COMP_PFX, BASE.SESE_ID,BASE.UNIQ_SESE_ROWS, COMP_UNIQ_SESE_ROWS
--  (415072 rows affected)

SELECT *
FROM ##SPCT_SESE_HASH_MATCH



GROUP BY BASE.PDBC_PFX, COMP.COMP_PFX, BASE.SESE_ID, BASE.SESE_ID, BASE.SESE_COUNT, COMP.MATCH_COUNT
ORDER BY 1,2,3

--  (830144 rows affected)
SELECT *
FROM (
SELECT BASE_SESE_ID, SESE_COUNT, COUNT(*)  AS MATCH_COUNT
FROM ##SPCT_SESE_HASH_NOMATCH 
WHERE SESE_COUNT = MATCH_COUNT
GROUP BY BASE_SESE_ID, SESE_COUNT  )  x
WHERE BASE_SESE_ID = 'NRTN'

SELECT * FROM facets.dbo.CMC_SPCT_SUPP_CONV SPCT WHERE PDBC_PFX IN ('T030') AND SESE_ID = 'IUST' AND GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT order by 9


SELECT BASE.PDBC_PFX AS BASE_PFX, COMP.PDBC_PFX AS COMP_PFX, BASE.SESE_ID AS BASE_SESE_ID,
       BASE.SPCT_PFX_COUNT,
	   BASE.SESE_COUNT,
       COUNT(*)  AS MATCH_COUNT
--INTO ##SPCT_SESE_HASH_NOMATCH
FROM ##SPCT_SESE_HASH            BASE
CROSS APPLY (SELECT 
             FROM ##SPCT_SESE_HASH  COMP
             WHERE BASE.PDBC_PFX <> COMP.PDBC_PFX 
             AND BASE.SESE_ID = COMP.SESE_ID
	         AND BASE.HASHKEY = COMP.HASHKEY
GROUP BY BASE.PDBC_PFX, COMP.PDBC_PFX, BASE.SESE_ID, BASE.SPCT_PFX_COUNT,BASE.SESE_COUNT
ORDER BY 1,2,3,4,5,6


OPEN @COMP_CURSOR
FETCH NEXT INTO @COMPPFX;
WHILE @@FETCH_STATUS = 0
BEGIN

SELECT SPCT1.PDBC_PFX  AS PDBC_PFX1, SPCT2.PDBC_PFX  AS PDBC_PFX2, PFX1_DUPS.NBR_OCCURS, COUNT(1) AS NBR_MATCHES
INTO ##PFX_MATCHES
FROM ##PFX_W_COUNTS                            PFX1_DUPS
INNER JOIN ##PFX_W_COUNTS                      PFX2_DUPS

     AND PFX1_DUPS.DUP_FLAG = 'Y'
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV        SPCT2 
      ON PFX2_DUPS.PDBC_PFX = SPCT2.PDBC_PFX
	 AND GETDATE() BETWEEN SPCT2.SPCT_EFF_DT AND SPCT2.SPCT_TERM_DT
	 AND SPCT1.PDBC_PFX < SPCT2.PDBC_PFX
	 AND SPCT1.SESE_ID             = SPCT2.SESE_ID
	 AND SPCT1.SPCT_SEQ_NO			= SPCT2.SPCT_SEQ_NO
	 AND SPCT1.SPCT_IPCD_LOW		= SPCT2.SPCT_IPCD_LOW
	 AND SPCT1.SPCT_IPCD_HIGH		= SPCT2.SPCT_IPCD_HIGH
	 AND SPCT1.SPCT_MODIFIER		= SPCT2.SPCT_MODIFIER
	 AND SPCT1.SPCT_ID_REL_LOW		= SPCT2.SPCT_ID_REL_LOW
	 AND SPCT1.SPCT_ID_REL_HIGH		= SPCT2.SPCT_ID_REL_HIGH
	 AND SPCT1.SPCT_IDCD_TYPE		= SPCT2.SPCT_IDCD_TYPE
	 AND SPCT1.SPCT_PSCD_LOW		= SPCT2.SPCT_PSCD_LOW
	 AND SPCT1.SPCT_PSCD_HIGH		= SPCT2.SPCT_PSCD_HIGH
	 AND SPCT1.SPCT_AGE_LOW			= SPCT2.SPCT_AGE_LOW
	 AND SPCT1.SPCT_AGE_HIGH		= SPCT2.SPCT_AGE_HIGH
	 AND SPCT1.SPCT_SEX				= SPCT2.SPCT_SEX
	 AND SPCT1.PRPR_MCTR_TYPE		= SPCT2.PRPR_MCTR_TYPE
	 AND SPCT1.PRCF_MCTR_SPEC		= SPCT2.PRCF_MCTR_SPEC
	 AND SPCT1.SPCT_SESE_ID			= SPCT2.SPCT_SESE_ID
	 AND SPCT1.RPTC_RPT_CAT			= SPCT2.RPTC_RPT_CAT
	 AND SPCT1.SPCT_OPTS			= SPCT2.SPCT_OPTS
	 AND SPCT1.SPCT_RELATION		= SPCT2.SPCT_RELATION
WHERE PFX1_DUPS.DUP_FLAG = 'Y'


END;

CLOSE @COMP_CURSOR;
DEALLOCATE @COMP_CURSOR;


SELECT * 
FROM facets.dbo.CMC_SPCT_SUPP_CONV 
WHERE PDBC_PFX IN ('HC99', 'HC53')
AND SESE_ID = 'AHOT'
AND GETDATE() BETWEEN SPCT_EFF_DT AND SPCT_TERM_DT
ORDER BY 2,4



SELECT PDBC_PFX, SESE_ID, COUNT(DISTINCT SPCT_EFF_DT)
FROM facets.dbo.CMC_SPCT_SUPP_CONV 
GROUP BY PDBC_PFX, SESE_ID
HAVING COUNT(DISTINCT SPCT_EFF_DT) > 1






DROP TABLE IF EXISTS #FLOB
SELECT FLOB_CODE]
into #FLOB
  FROM tempdb].dbo].AHEAD_FLOB_FIN_LOB]
  WHERE SEQ_RENEW = 'SG ACA'      
  
--  SELECT COUNT(*) FROM   #FLOB
--  6

DROP TABLE IF EXISTS ##SGACA_PDBC
SELECT DISTINCT PDBL.PDBC_PFX, PDBL.PDBL_ACCT_CAT
INTO ##SGACA_PDBC
FROM  facets.dbo.CMC_PDBL_PROD_BILL            PDBL
WHERE PDBL.PDBL_ACCT_CAT IN (SELECT  FLOB_CODE FROM #FLOB)
	AND PDBL.PDBL_ID = 'MED1' 
    AND GETDATE() BETWEEN PDBL.PDBL_EFF_DT and PDBL.PDBL_TERM_DT

--  SELECT COUNT(*) FROM   ###SGACA_PDBC
--  89

select  DISTINCT 
           SPCT.PDBC_PFX  AS SPCT_PFX, 
		   PDPX.PDPX_DESC  AS PFX_DESC
from  ##SGACA_PDBC      SGACA
INNER JOIN facets.dbo.CMC_PDBC_PROD_COMP             PDBL
	ON PDBL.PDBC_PFX = SGACA.PDBC_PFX
	AND PDBL.PDBC_TYPE = 'PDBL'
	AND GETDATE() BETWEEN PDBL.PDBC_EFF_DT and PDBL.PDBC_TERM_DT
INNER JOIN facets.dbo.CMC_PDBC_PROD_COMP        SPCT
	ON PDBL.PDPD_ID = SPCT.PDPD_ID 
	and SPCT.PDBC_TYPE = 'SPCT'
	and GETDATE() BETWEEN SPCT.PDBC_EFF_DT and SPCT.PDBC_TERM_DT
INNER JOIN facets.dbo.CMC_PDPX_DESC PDPX 
	ON SPCT.PDBC_PFX = PDPX.PDBC_PFX 
	and PDPX.PDBC_TYPE = SPCT.PDBC_TYPE 
--  62 DISTINCT SPCT_PFX FOR PRODUCTS WITH PDBL


select  DISTINCT
           SRCT.PDBC_PFX  AS SRCT_PFX, 
		   PDPX.PDPX_DESC  AS PFX_DESC
from  ##SGACA_PDBC      SGACA
INNER JOIN facets.dbo.CMC_PDBC_PROD_COMP             PDBL
	ON PDBL.PDBC_PFX = SGACA.PDBC_PFX
	AND PDBL.PDBC_TYPE = 'PDBL'
	AND GETDATE() BETWEEN PDBL.PDBC_EFF_DT and PDBL.PDBC_TERM_DT
INNER JOIN facets.dbo.CMC_PDBC_PROD_COMP        SRCT
	ON PDBL.PDPD_ID = SRCT.PDPD_ID 
	and SRCT.PDBC_TYPE = 'SRCT'
	and GETDATE() BETWEEN SRCT.PDBC_EFF_DT and SRCT.PDBC_TERM_DT
INNER JOIN facets.dbo.CMC_PDPX_DESC PDPX 
	ON SRCT.PDBC_PFX = PDPX.PDBC_PFX 
	and PDPX.PDBC_TYPE = SRCT.PDBC_TYPE
-- 54 DISTINCT SRCT_PFX FOR PRODUCTS WITH PDBL


SELECT 
FROM  facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
WHERE 



SELECT  
       SPCT.PDBC_PFX
      ,SPCT.SESE_ID
	  ,CONCAT(
           SPCT_IPCD_LOW]
      ,'|',SPCT_IPCD_HIGH]
      ,'|',SPCT_MODIFIER]
      ,'|',SPCT_ID_REL_LOW]
      ,'|',SPCT_ID_REL_HIGH]
      ,'|',SPCT_IDCD_TYPE]
      ,'|',SPCT_PSCD_LOW]
      ,'|',SPCT_PSCD_HIGH]
      ,'|',CAST(SPCT_AGE_LOW] AS VARCHAR(3))
      ,'|',CAST(SPCT_AGE_HIGH] AS VARCHAR(3))
      ,'|',SPCT_SEX]
      ,'|',PRPR_MCTR_TYPE]
      ,'|',PRCF_MCTR_SPEC]
      ,'|',SPCT_SESE_ID]
      ,'|',RPTC_RPT_CAT]
      ,'|',SPCT_OPTS]
      ,'|',SPCT_RELATION] )  AS HASHKEY, COUNT(*)
INTO ##SPCT_SESE_HASH              
FROM ##SPCT_SESE_COUNT                       SSC
INNER JOIN facets.dbo.CMC_SPCT_SUPP_CONV     SPCT
   ON SSC.PDBC_PFX = SPCT.PDBC_PFX
   AND SSC.SESE_ID = SPCT.SESE_ID
   AND GETDATE() BETWEEN SPCT.SPCT_EFF_DT AND SPCT.SPCT_TERM_DT
--  (2998985 rows affected)
CREATE INDEX ##SPCT_SESE_HASH_IDX1 ON ##SPCT_SESE_HASH(SESE_ID)










































